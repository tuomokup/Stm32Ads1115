
FuzzWithAds1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08007ae8  08007ae8  00017ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fbc  08007fbc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc4  08007fc4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200001dc  080081a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080081a8  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ece  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176f  00000000  00000000  000270d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00028848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  00028fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010fbc  00000000  00000000  000296a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d8f  00000000  00000000  0003a65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061a9b  00000000  00000000  000443eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  000a5ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ad0 	.word	0x08007ad0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08007ad0 	.word	0x08007ad0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f99b 	bl	8001778 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f8eb 	bl	8001628 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f98d 	bl	8001778 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f983 	bl	8001778 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f913 	bl	80016ac <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f909 	bl	80016ac <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 f87a 	bl	800265c <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 f875 	bl	800265c <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_fmul>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	0244      	lsls	r4, r0, #9
 80006e6:	0045      	lsls	r5, r0, #1
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	0a64      	lsrs	r4, r4, #9
 80006ec:	1c0f      	adds	r7, r1, #0
 80006ee:	0e2d      	lsrs	r5, r5, #24
 80006f0:	0fc6      	lsrs	r6, r0, #31
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fmul+0x1c>
 80006f6:	e08d      	b.n	8000814 <__aeabi_fmul+0x138>
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fmul+0x22>
 80006fc:	e092      	b.n	8000824 <__aeabi_fmul+0x148>
 80006fe:	2300      	movs	r3, #0
 8000700:	2080      	movs	r0, #128	; 0x80
 8000702:	4699      	mov	r9, r3
 8000704:	469a      	mov	sl, r3
 8000706:	00e4      	lsls	r4, r4, #3
 8000708:	04c0      	lsls	r0, r0, #19
 800070a:	4304      	orrs	r4, r0
 800070c:	3d7f      	subs	r5, #127	; 0x7f
 800070e:	0278      	lsls	r0, r7, #9
 8000710:	0a43      	lsrs	r3, r0, #9
 8000712:	4698      	mov	r8, r3
 8000714:	007b      	lsls	r3, r7, #1
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	0fff      	lsrs	r7, r7, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fmul+0x44>
 800071e:	e070      	b.n	8000802 <__aeabi_fmul+0x126>
 8000720:	2bff      	cmp	r3, #255	; 0xff
 8000722:	d100      	bne.n	8000726 <__aeabi_fmul+0x4a>
 8000724:	e086      	b.n	8000834 <__aeabi_fmul+0x158>
 8000726:	4642      	mov	r2, r8
 8000728:	00d0      	lsls	r0, r2, #3
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	3b7f      	subs	r3, #127	; 0x7f
 800072e:	18ed      	adds	r5, r5, r3
 8000730:	2300      	movs	r3, #0
 8000732:	04d2      	lsls	r2, r2, #19
 8000734:	4302      	orrs	r2, r0
 8000736:	4690      	mov	r8, r2
 8000738:	469c      	mov	ip, r3
 800073a:	0031      	movs	r1, r6
 800073c:	464b      	mov	r3, r9
 800073e:	4079      	eors	r1, r7
 8000740:	1c68      	adds	r0, r5, #1
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d81c      	bhi.n	8000780 <__aeabi_fmul+0xa4>
 8000746:	4a76      	ldr	r2, [pc, #472]	; (8000920 <__aeabi_fmul+0x244>)
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	58d3      	ldr	r3, [r2, r3]
 800074c:	469f      	mov	pc, r3
 800074e:	0039      	movs	r1, r7
 8000750:	4644      	mov	r4, r8
 8000752:	46e2      	mov	sl, ip
 8000754:	4653      	mov	r3, sl
 8000756:	2b02      	cmp	r3, #2
 8000758:	d00f      	beq.n	800077a <__aeabi_fmul+0x9e>
 800075a:	2b03      	cmp	r3, #3
 800075c:	d100      	bne.n	8000760 <__aeabi_fmul+0x84>
 800075e:	e0d7      	b.n	8000910 <__aeabi_fmul+0x234>
 8000760:	2b01      	cmp	r3, #1
 8000762:	d137      	bne.n	80007d4 <__aeabi_fmul+0xf8>
 8000764:	2000      	movs	r0, #0
 8000766:	2400      	movs	r4, #0
 8000768:	05c0      	lsls	r0, r0, #23
 800076a:	4320      	orrs	r0, r4
 800076c:	07c9      	lsls	r1, r1, #31
 800076e:	4308      	orrs	r0, r1
 8000770:	bce0      	pop	{r5, r6, r7}
 8000772:	46ba      	mov	sl, r7
 8000774:	46b1      	mov	r9, r6
 8000776:	46a8      	mov	r8, r5
 8000778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077a:	20ff      	movs	r0, #255	; 0xff
 800077c:	2400      	movs	r4, #0
 800077e:	e7f3      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000780:	0c26      	lsrs	r6, r4, #16
 8000782:	0424      	lsls	r4, r4, #16
 8000784:	0c22      	lsrs	r2, r4, #16
 8000786:	4644      	mov	r4, r8
 8000788:	0424      	lsls	r4, r4, #16
 800078a:	0c24      	lsrs	r4, r4, #16
 800078c:	4643      	mov	r3, r8
 800078e:	0027      	movs	r7, r4
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	4357      	muls	r7, r2
 8000794:	4374      	muls	r4, r6
 8000796:	435a      	muls	r2, r3
 8000798:	435e      	muls	r6, r3
 800079a:	1912      	adds	r2, r2, r4
 800079c:	0c3b      	lsrs	r3, r7, #16
 800079e:	189b      	adds	r3, r3, r2
 80007a0:	429c      	cmp	r4, r3
 80007a2:	d903      	bls.n	80007ac <__aeabi_fmul+0xd0>
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0252      	lsls	r2, r2, #9
 80007a8:	4694      	mov	ip, r2
 80007aa:	4466      	add	r6, ip
 80007ac:	043f      	lsls	r7, r7, #16
 80007ae:	041a      	lsls	r2, r3, #16
 80007b0:	0c3f      	lsrs	r7, r7, #16
 80007b2:	19d2      	adds	r2, r2, r7
 80007b4:	0194      	lsls	r4, r2, #6
 80007b6:	1e67      	subs	r7, r4, #1
 80007b8:	41bc      	sbcs	r4, r7
 80007ba:	0c1b      	lsrs	r3, r3, #16
 80007bc:	0e92      	lsrs	r2, r2, #26
 80007be:	199b      	adds	r3, r3, r6
 80007c0:	4314      	orrs	r4, r2
 80007c2:	019b      	lsls	r3, r3, #6
 80007c4:	431c      	orrs	r4, r3
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fmul+0xf0>
 80007ca:	e09b      	b.n	8000904 <__aeabi_fmul+0x228>
 80007cc:	2301      	movs	r3, #1
 80007ce:	0862      	lsrs	r2, r4, #1
 80007d0:	401c      	ands	r4, r3
 80007d2:	4314      	orrs	r4, r2
 80007d4:	0002      	movs	r2, r0
 80007d6:	327f      	adds	r2, #127	; 0x7f
 80007d8:	2a00      	cmp	r2, #0
 80007da:	dd64      	ble.n	80008a6 <__aeabi_fmul+0x1ca>
 80007dc:	0763      	lsls	r3, r4, #29
 80007de:	d004      	beq.n	80007ea <__aeabi_fmul+0x10e>
 80007e0:	230f      	movs	r3, #15
 80007e2:	4023      	ands	r3, r4
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d000      	beq.n	80007ea <__aeabi_fmul+0x10e>
 80007e8:	3404      	adds	r4, #4
 80007ea:	0123      	lsls	r3, r4, #4
 80007ec:	d503      	bpl.n	80007f6 <__aeabi_fmul+0x11a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <__aeabi_fmul+0x248>)
 80007f2:	3280      	adds	r2, #128	; 0x80
 80007f4:	401c      	ands	r4, r3
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	dcbf      	bgt.n	800077a <__aeabi_fmul+0x9e>
 80007fa:	01a4      	lsls	r4, r4, #6
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	b2d0      	uxtb	r0, r2
 8000800:	e7b2      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000802:	4643      	mov	r3, r8
 8000804:	2b00      	cmp	r3, #0
 8000806:	d13d      	bne.n	8000884 <__aeabi_fmul+0x1a8>
 8000808:	464a      	mov	r2, r9
 800080a:	3301      	adds	r3, #1
 800080c:	431a      	orrs	r2, r3
 800080e:	4691      	mov	r9, r2
 8000810:	469c      	mov	ip, r3
 8000812:	e792      	b.n	800073a <__aeabi_fmul+0x5e>
 8000814:	2c00      	cmp	r4, #0
 8000816:	d129      	bne.n	800086c <__aeabi_fmul+0x190>
 8000818:	2304      	movs	r3, #4
 800081a:	4699      	mov	r9, r3
 800081c:	3b03      	subs	r3, #3
 800081e:	2500      	movs	r5, #0
 8000820:	469a      	mov	sl, r3
 8000822:	e774      	b.n	800070e <__aeabi_fmul+0x32>
 8000824:	2c00      	cmp	r4, #0
 8000826:	d11b      	bne.n	8000860 <__aeabi_fmul+0x184>
 8000828:	2308      	movs	r3, #8
 800082a:	4699      	mov	r9, r3
 800082c:	3b06      	subs	r3, #6
 800082e:	25ff      	movs	r5, #255	; 0xff
 8000830:	469a      	mov	sl, r3
 8000832:	e76c      	b.n	800070e <__aeabi_fmul+0x32>
 8000834:	4643      	mov	r3, r8
 8000836:	35ff      	adds	r5, #255	; 0xff
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10b      	bne.n	8000854 <__aeabi_fmul+0x178>
 800083c:	2302      	movs	r3, #2
 800083e:	464a      	mov	r2, r9
 8000840:	431a      	orrs	r2, r3
 8000842:	4691      	mov	r9, r2
 8000844:	469c      	mov	ip, r3
 8000846:	e778      	b.n	800073a <__aeabi_fmul+0x5e>
 8000848:	4653      	mov	r3, sl
 800084a:	0031      	movs	r1, r6
 800084c:	2b02      	cmp	r3, #2
 800084e:	d000      	beq.n	8000852 <__aeabi_fmul+0x176>
 8000850:	e783      	b.n	800075a <__aeabi_fmul+0x7e>
 8000852:	e792      	b.n	800077a <__aeabi_fmul+0x9e>
 8000854:	2303      	movs	r3, #3
 8000856:	464a      	mov	r2, r9
 8000858:	431a      	orrs	r2, r3
 800085a:	4691      	mov	r9, r2
 800085c:	469c      	mov	ip, r3
 800085e:	e76c      	b.n	800073a <__aeabi_fmul+0x5e>
 8000860:	230c      	movs	r3, #12
 8000862:	4699      	mov	r9, r3
 8000864:	3b09      	subs	r3, #9
 8000866:	25ff      	movs	r5, #255	; 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e750      	b.n	800070e <__aeabi_fmul+0x32>
 800086c:	0020      	movs	r0, r4
 800086e:	f001 fed7 	bl	8002620 <__clzsi2>
 8000872:	2576      	movs	r5, #118	; 0x76
 8000874:	1f43      	subs	r3, r0, #5
 8000876:	409c      	lsls	r4, r3
 8000878:	2300      	movs	r3, #0
 800087a:	426d      	negs	r5, r5
 800087c:	4699      	mov	r9, r3
 800087e:	469a      	mov	sl, r3
 8000880:	1a2d      	subs	r5, r5, r0
 8000882:	e744      	b.n	800070e <__aeabi_fmul+0x32>
 8000884:	4640      	mov	r0, r8
 8000886:	f001 fecb 	bl	8002620 <__clzsi2>
 800088a:	4642      	mov	r2, r8
 800088c:	1f43      	subs	r3, r0, #5
 800088e:	409a      	lsls	r2, r3
 8000890:	2300      	movs	r3, #0
 8000892:	1a2d      	subs	r5, r5, r0
 8000894:	4690      	mov	r8, r2
 8000896:	469c      	mov	ip, r3
 8000898:	3d76      	subs	r5, #118	; 0x76
 800089a:	e74e      	b.n	800073a <__aeabi_fmul+0x5e>
 800089c:	2480      	movs	r4, #128	; 0x80
 800089e:	2100      	movs	r1, #0
 80008a0:	20ff      	movs	r0, #255	; 0xff
 80008a2:	03e4      	lsls	r4, r4, #15
 80008a4:	e760      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008a6:	2301      	movs	r3, #1
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	2b1b      	cmp	r3, #27
 80008ac:	dd00      	ble.n	80008b0 <__aeabi_fmul+0x1d4>
 80008ae:	e759      	b.n	8000764 <__aeabi_fmul+0x88>
 80008b0:	0022      	movs	r2, r4
 80008b2:	309e      	adds	r0, #158	; 0x9e
 80008b4:	40da      	lsrs	r2, r3
 80008b6:	4084      	lsls	r4, r0
 80008b8:	0013      	movs	r3, r2
 80008ba:	1e62      	subs	r2, r4, #1
 80008bc:	4194      	sbcs	r4, r2
 80008be:	431c      	orrs	r4, r3
 80008c0:	0763      	lsls	r3, r4, #29
 80008c2:	d004      	beq.n	80008ce <__aeabi_fmul+0x1f2>
 80008c4:	230f      	movs	r3, #15
 80008c6:	4023      	ands	r3, r4
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d000      	beq.n	80008ce <__aeabi_fmul+0x1f2>
 80008cc:	3404      	adds	r4, #4
 80008ce:	0163      	lsls	r3, r4, #5
 80008d0:	d51a      	bpl.n	8000908 <__aeabi_fmul+0x22c>
 80008d2:	2001      	movs	r0, #1
 80008d4:	2400      	movs	r4, #0
 80008d6:	e747      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008d8:	2080      	movs	r0, #128	; 0x80
 80008da:	03c0      	lsls	r0, r0, #15
 80008dc:	4204      	tst	r4, r0
 80008de:	d009      	beq.n	80008f4 <__aeabi_fmul+0x218>
 80008e0:	4643      	mov	r3, r8
 80008e2:	4203      	tst	r3, r0
 80008e4:	d106      	bne.n	80008f4 <__aeabi_fmul+0x218>
 80008e6:	4644      	mov	r4, r8
 80008e8:	4304      	orrs	r4, r0
 80008ea:	0264      	lsls	r4, r4, #9
 80008ec:	0039      	movs	r1, r7
 80008ee:	20ff      	movs	r0, #255	; 0xff
 80008f0:	0a64      	lsrs	r4, r4, #9
 80008f2:	e739      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008f4:	2080      	movs	r0, #128	; 0x80
 80008f6:	03c0      	lsls	r0, r0, #15
 80008f8:	4304      	orrs	r4, r0
 80008fa:	0264      	lsls	r4, r4, #9
 80008fc:	0031      	movs	r1, r6
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	0a64      	lsrs	r4, r4, #9
 8000902:	e731      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000904:	0028      	movs	r0, r5
 8000906:	e765      	b.n	80007d4 <__aeabi_fmul+0xf8>
 8000908:	01a4      	lsls	r4, r4, #6
 800090a:	2000      	movs	r0, #0
 800090c:	0a64      	lsrs	r4, r4, #9
 800090e:	e72b      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000910:	2080      	movs	r0, #128	; 0x80
 8000912:	03c0      	lsls	r0, r0, #15
 8000914:	4304      	orrs	r4, r0
 8000916:	0264      	lsls	r4, r4, #9
 8000918:	20ff      	movs	r0, #255	; 0xff
 800091a:	0a64      	lsrs	r4, r4, #9
 800091c:	e724      	b.n	8000768 <__aeabi_fmul+0x8c>
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	08007b08 	.word	0x08007b08
 8000924:	f7ffffff 	.word	0xf7ffffff

08000928 <__aeabi_i2f>:
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	2800      	cmp	r0, #0
 800092c:	d013      	beq.n	8000956 <__aeabi_i2f+0x2e>
 800092e:	17c3      	asrs	r3, r0, #31
 8000930:	18c6      	adds	r6, r0, r3
 8000932:	405e      	eors	r6, r3
 8000934:	0fc4      	lsrs	r4, r0, #31
 8000936:	0030      	movs	r0, r6
 8000938:	f001 fe72 	bl	8002620 <__clzsi2>
 800093c:	239e      	movs	r3, #158	; 0x9e
 800093e:	0005      	movs	r5, r0
 8000940:	1a1b      	subs	r3, r3, r0
 8000942:	2b96      	cmp	r3, #150	; 0x96
 8000944:	dc0f      	bgt.n	8000966 <__aeabi_i2f+0x3e>
 8000946:	2808      	cmp	r0, #8
 8000948:	dd01      	ble.n	800094e <__aeabi_i2f+0x26>
 800094a:	3d08      	subs	r5, #8
 800094c:	40ae      	lsls	r6, r5
 800094e:	0276      	lsls	r6, r6, #9
 8000950:	0a76      	lsrs	r6, r6, #9
 8000952:	b2d8      	uxtb	r0, r3
 8000954:	e002      	b.n	800095c <__aeabi_i2f+0x34>
 8000956:	2400      	movs	r4, #0
 8000958:	2000      	movs	r0, #0
 800095a:	2600      	movs	r6, #0
 800095c:	05c0      	lsls	r0, r0, #23
 800095e:	4330      	orrs	r0, r6
 8000960:	07e4      	lsls	r4, r4, #31
 8000962:	4320      	orrs	r0, r4
 8000964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000966:	2b99      	cmp	r3, #153	; 0x99
 8000968:	dd0c      	ble.n	8000984 <__aeabi_i2f+0x5c>
 800096a:	2205      	movs	r2, #5
 800096c:	0031      	movs	r1, r6
 800096e:	1a12      	subs	r2, r2, r0
 8000970:	40d1      	lsrs	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	0001      	movs	r1, r0
 8000976:	0030      	movs	r0, r6
 8000978:	311b      	adds	r1, #27
 800097a:	4088      	lsls	r0, r1
 800097c:	1e41      	subs	r1, r0, #1
 800097e:	4188      	sbcs	r0, r1
 8000980:	4302      	orrs	r2, r0
 8000982:	0016      	movs	r6, r2
 8000984:	2d05      	cmp	r5, #5
 8000986:	dc12      	bgt.n	80009ae <__aeabi_i2f+0x86>
 8000988:	0031      	movs	r1, r6
 800098a:	4f0d      	ldr	r7, [pc, #52]	; (80009c0 <__aeabi_i2f+0x98>)
 800098c:	4039      	ands	r1, r7
 800098e:	0772      	lsls	r2, r6, #29
 8000990:	d009      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 8000992:	200f      	movs	r0, #15
 8000994:	4030      	ands	r0, r6
 8000996:	2804      	cmp	r0, #4
 8000998:	d005      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 800099a:	3104      	adds	r1, #4
 800099c:	014a      	lsls	r2, r1, #5
 800099e:	d502      	bpl.n	80009a6 <__aeabi_i2f+0x7e>
 80009a0:	239f      	movs	r3, #159	; 0x9f
 80009a2:	4039      	ands	r1, r7
 80009a4:	1b5b      	subs	r3, r3, r5
 80009a6:	0189      	lsls	r1, r1, #6
 80009a8:	0a4e      	lsrs	r6, r1, #9
 80009aa:	b2d8      	uxtb	r0, r3
 80009ac:	e7d6      	b.n	800095c <__aeabi_i2f+0x34>
 80009ae:	1f6a      	subs	r2, r5, #5
 80009b0:	4096      	lsls	r6, r2
 80009b2:	0031      	movs	r1, r6
 80009b4:	4f02      	ldr	r7, [pc, #8]	; (80009c0 <__aeabi_i2f+0x98>)
 80009b6:	4039      	ands	r1, r7
 80009b8:	0772      	lsls	r2, r6, #29
 80009ba:	d0f4      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 80009bc:	e7e9      	b.n	8000992 <__aeabi_i2f+0x6a>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	fbffffff 	.word	0xfbffffff

080009c4 <__aeabi_dadd>:
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	464f      	mov	r7, r9
 80009c8:	4646      	mov	r6, r8
 80009ca:	46d6      	mov	lr, sl
 80009cc:	000d      	movs	r5, r1
 80009ce:	0004      	movs	r4, r0
 80009d0:	b5c0      	push	{r6, r7, lr}
 80009d2:	001f      	movs	r7, r3
 80009d4:	0011      	movs	r1, r2
 80009d6:	0328      	lsls	r0, r5, #12
 80009d8:	0f62      	lsrs	r2, r4, #29
 80009da:	0a40      	lsrs	r0, r0, #9
 80009dc:	4310      	orrs	r0, r2
 80009de:	007a      	lsls	r2, r7, #1
 80009e0:	0d52      	lsrs	r2, r2, #21
 80009e2:	00e3      	lsls	r3, r4, #3
 80009e4:	033c      	lsls	r4, r7, #12
 80009e6:	4691      	mov	r9, r2
 80009e8:	0a64      	lsrs	r4, r4, #9
 80009ea:	0ffa      	lsrs	r2, r7, #31
 80009ec:	0f4f      	lsrs	r7, r1, #29
 80009ee:	006e      	lsls	r6, r5, #1
 80009f0:	4327      	orrs	r7, r4
 80009f2:	4692      	mov	sl, r2
 80009f4:	46b8      	mov	r8, r7
 80009f6:	0d76      	lsrs	r6, r6, #21
 80009f8:	0fed      	lsrs	r5, r5, #31
 80009fa:	00c9      	lsls	r1, r1, #3
 80009fc:	4295      	cmp	r5, r2
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x3e>
 8000a00:	e099      	b.n	8000b36 <__aeabi_dadd+0x172>
 8000a02:	464c      	mov	r4, r9
 8000a04:	1b34      	subs	r4, r6, r4
 8000a06:	46a4      	mov	ip, r4
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_dadd+0x4a>
 8000a0c:	e07c      	b.n	8000b08 <__aeabi_dadd+0x144>
 8000a0e:	464a      	mov	r2, r9
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x52>
 8000a14:	e0b8      	b.n	8000b88 <__aeabi_dadd+0x1c4>
 8000a16:	4ac5      	ldr	r2, [pc, #788]	; (8000d2c <__aeabi_dadd+0x368>)
 8000a18:	4296      	cmp	r6, r2
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x5a>
 8000a1c:	e11c      	b.n	8000c58 <__aeabi_dadd+0x294>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	003c      	movs	r4, r7
 8000a22:	0412      	lsls	r2, r2, #16
 8000a24:	4314      	orrs	r4, r2
 8000a26:	46a0      	mov	r8, r4
 8000a28:	4662      	mov	r2, ip
 8000a2a:	2a38      	cmp	r2, #56	; 0x38
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0x6c>
 8000a2e:	e161      	b.n	8000cf4 <__aeabi_dadd+0x330>
 8000a30:	2a1f      	cmp	r2, #31
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0x72>
 8000a34:	e1cc      	b.n	8000dd0 <__aeabi_dadd+0x40c>
 8000a36:	4664      	mov	r4, ip
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b12      	subs	r2, r2, r4
 8000a3c:	4644      	mov	r4, r8
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	000f      	movs	r7, r1
 8000a42:	46a1      	mov	r9, r4
 8000a44:	4664      	mov	r4, ip
 8000a46:	4091      	lsls	r1, r2
 8000a48:	40e7      	lsrs	r7, r4
 8000a4a:	464c      	mov	r4, r9
 8000a4c:	1e4a      	subs	r2, r1, #1
 8000a4e:	4191      	sbcs	r1, r2
 8000a50:	433c      	orrs	r4, r7
 8000a52:	4642      	mov	r2, r8
 8000a54:	4321      	orrs	r1, r4
 8000a56:	4664      	mov	r4, ip
 8000a58:	40e2      	lsrs	r2, r4
 8000a5a:	1a80      	subs	r0, r0, r2
 8000a5c:	1a5c      	subs	r4, r3, r1
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	419b      	sbcs	r3, r3
 8000a62:	425f      	negs	r7, r3
 8000a64:	1bc7      	subs	r7, r0, r7
 8000a66:	023b      	lsls	r3, r7, #8
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_dadd+0xa8>
 8000a6a:	e0d0      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000a6c:	027f      	lsls	r7, r7, #9
 8000a6e:	0a7f      	lsrs	r7, r7, #9
 8000a70:	2f00      	cmp	r7, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0xb2>
 8000a74:	e0ff      	b.n	8000c76 <__aeabi_dadd+0x2b2>
 8000a76:	0038      	movs	r0, r7
 8000a78:	f001 fdd2 	bl	8002620 <__clzsi2>
 8000a7c:	0001      	movs	r1, r0
 8000a7e:	3908      	subs	r1, #8
 8000a80:	2320      	movs	r3, #32
 8000a82:	0022      	movs	r2, r4
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	408f      	lsls	r7, r1
 8000a88:	40da      	lsrs	r2, r3
 8000a8a:	408c      	lsls	r4, r1
 8000a8c:	4317      	orrs	r7, r2
 8000a8e:	42b1      	cmp	r1, r6
 8000a90:	da00      	bge.n	8000a94 <__aeabi_dadd+0xd0>
 8000a92:	e0ff      	b.n	8000c94 <__aeabi_dadd+0x2d0>
 8000a94:	1b89      	subs	r1, r1, r6
 8000a96:	1c4b      	adds	r3, r1, #1
 8000a98:	2b1f      	cmp	r3, #31
 8000a9a:	dd00      	ble.n	8000a9e <__aeabi_dadd+0xda>
 8000a9c:	e0a8      	b.n	8000bf0 <__aeabi_dadd+0x22c>
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	0039      	movs	r1, r7
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	4094      	lsls	r4, r2
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	1e62      	subs	r2, r4, #1
 8000aae:	4194      	sbcs	r4, r2
 8000ab0:	40df      	lsrs	r7, r3
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	4301      	orrs	r1, r0
 8000ab6:	430c      	orrs	r4, r1
 8000ab8:	0763      	lsls	r3, r4, #29
 8000aba:	d009      	beq.n	8000ad0 <__aeabi_dadd+0x10c>
 8000abc:	230f      	movs	r3, #15
 8000abe:	4023      	ands	r3, r4
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d005      	beq.n	8000ad0 <__aeabi_dadd+0x10c>
 8000ac4:	1d23      	adds	r3, r4, #4
 8000ac6:	42a3      	cmp	r3, r4
 8000ac8:	41a4      	sbcs	r4, r4
 8000aca:	4264      	negs	r4, r4
 8000acc:	193f      	adds	r7, r7, r4
 8000ace:	001c      	movs	r4, r3
 8000ad0:	023b      	lsls	r3, r7, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0x112>
 8000ad4:	e09e      	b.n	8000c14 <__aeabi_dadd+0x250>
 8000ad6:	4b95      	ldr	r3, [pc, #596]	; (8000d2c <__aeabi_dadd+0x368>)
 8000ad8:	3601      	adds	r6, #1
 8000ada:	429e      	cmp	r6, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x11c>
 8000ade:	e0b7      	b.n	8000c50 <__aeabi_dadd+0x28c>
 8000ae0:	4a93      	ldr	r2, [pc, #588]	; (8000d30 <__aeabi_dadd+0x36c>)
 8000ae2:	08e4      	lsrs	r4, r4, #3
 8000ae4:	4017      	ands	r7, r2
 8000ae6:	077b      	lsls	r3, r7, #29
 8000ae8:	0571      	lsls	r1, r6, #21
 8000aea:	027f      	lsls	r7, r7, #9
 8000aec:	4323      	orrs	r3, r4
 8000aee:	0b3f      	lsrs	r7, r7, #12
 8000af0:	0d4a      	lsrs	r2, r1, #21
 8000af2:	0512      	lsls	r2, r2, #20
 8000af4:	433a      	orrs	r2, r7
 8000af6:	07ed      	lsls	r5, r5, #31
 8000af8:	432a      	orrs	r2, r5
 8000afa:	0018      	movs	r0, r3
 8000afc:	0011      	movs	r1, r2
 8000afe:	bce0      	pop	{r5, r6, r7}
 8000b00:	46ba      	mov	sl, r7
 8000b02:	46b1      	mov	r9, r6
 8000b04:	46a8      	mov	r8, r5
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d04b      	beq.n	8000ba4 <__aeabi_dadd+0x1e0>
 8000b0c:	464c      	mov	r4, r9
 8000b0e:	1ba4      	subs	r4, r4, r6
 8000b10:	46a4      	mov	ip, r4
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x154>
 8000b16:	e123      	b.n	8000d60 <__aeabi_dadd+0x39c>
 8000b18:	0004      	movs	r4, r0
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x15c>
 8000b1e:	e1af      	b.n	8000e80 <__aeabi_dadd+0x4bc>
 8000b20:	4662      	mov	r2, ip
 8000b22:	1e54      	subs	r4, r2, #1
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x166>
 8000b28:	e215      	b.n	8000f56 <__aeabi_dadd+0x592>
 8000b2a:	4d80      	ldr	r5, [pc, #512]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b2c:	45ac      	cmp	ip, r5
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x16e>
 8000b30:	e1c8      	b.n	8000ec4 <__aeabi_dadd+0x500>
 8000b32:	46a4      	mov	ip, r4
 8000b34:	e11b      	b.n	8000d6e <__aeabi_dadd+0x3aa>
 8000b36:	464a      	mov	r2, r9
 8000b38:	1ab2      	subs	r2, r6, r2
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	dc00      	bgt.n	8000b42 <__aeabi_dadd+0x17e>
 8000b40:	e0ac      	b.n	8000c9c <__aeabi_dadd+0x2d8>
 8000b42:	464a      	mov	r2, r9
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d043      	beq.n	8000bd0 <__aeabi_dadd+0x20c>
 8000b48:	4a78      	ldr	r2, [pc, #480]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b4a:	4296      	cmp	r6, r2
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x18c>
 8000b4e:	e1af      	b.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	003c      	movs	r4, r7
 8000b54:	0412      	lsls	r2, r2, #16
 8000b56:	4314      	orrs	r4, r2
 8000b58:	46a0      	mov	r8, r4
 8000b5a:	4662      	mov	r2, ip
 8000b5c:	2a38      	cmp	r2, #56	; 0x38
 8000b5e:	dc67      	bgt.n	8000c30 <__aeabi_dadd+0x26c>
 8000b60:	2a1f      	cmp	r2, #31
 8000b62:	dc00      	bgt.n	8000b66 <__aeabi_dadd+0x1a2>
 8000b64:	e15f      	b.n	8000e26 <__aeabi_dadd+0x462>
 8000b66:	4647      	mov	r7, r8
 8000b68:	3a20      	subs	r2, #32
 8000b6a:	40d7      	lsrs	r7, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	2a20      	cmp	r2, #32
 8000b70:	d005      	beq.n	8000b7e <__aeabi_dadd+0x1ba>
 8000b72:	4664      	mov	r4, ip
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	1b12      	subs	r2, r2, r4
 8000b78:	4644      	mov	r4, r8
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	4321      	orrs	r1, r4
 8000b7e:	1e4a      	subs	r2, r1, #1
 8000b80:	4191      	sbcs	r1, r2
 8000b82:	000c      	movs	r4, r1
 8000b84:	433c      	orrs	r4, r7
 8000b86:	e057      	b.n	8000c38 <__aeabi_dadd+0x274>
 8000b88:	003a      	movs	r2, r7
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x1cc>
 8000b8e:	e105      	b.n	8000d9c <__aeabi_dadd+0x3d8>
 8000b90:	0022      	movs	r2, r4
 8000b92:	3a01      	subs	r2, #1
 8000b94:	2c01      	cmp	r4, #1
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x1d6>
 8000b98:	e182      	b.n	8000ea0 <__aeabi_dadd+0x4dc>
 8000b9a:	4c64      	ldr	r4, [pc, #400]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b9c:	45a4      	cmp	ip, r4
 8000b9e:	d05b      	beq.n	8000c58 <__aeabi_dadd+0x294>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	e741      	b.n	8000a28 <__aeabi_dadd+0x64>
 8000ba4:	4c63      	ldr	r4, [pc, #396]	; (8000d34 <__aeabi_dadd+0x370>)
 8000ba6:	1c77      	adds	r7, r6, #1
 8000ba8:	4227      	tst	r7, r4
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x1ea>
 8000bac:	e0c4      	b.n	8000d38 <__aeabi_dadd+0x374>
 8000bae:	0004      	movs	r4, r0
 8000bb0:	431c      	orrs	r4, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_dadd+0x1f4>
 8000bb6:	e169      	b.n	8000e8c <__aeabi_dadd+0x4c8>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x1fa>
 8000bbc:	e1bf      	b.n	8000f3e <__aeabi_dadd+0x57a>
 8000bbe:	4644      	mov	r4, r8
 8000bc0:	430c      	orrs	r4, r1
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_dadd+0x202>
 8000bc4:	e1d0      	b.n	8000f68 <__aeabi_dadd+0x5a4>
 8000bc6:	0742      	lsls	r2, r0, #29
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	08c0      	lsrs	r0, r0, #3
 8000bce:	e029      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000bd0:	003a      	movs	r2, r7
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x214>
 8000bd6:	e170      	b.n	8000eba <__aeabi_dadd+0x4f6>
 8000bd8:	4662      	mov	r2, ip
 8000bda:	4664      	mov	r4, ip
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	2c01      	cmp	r4, #1
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0x220>
 8000be2:	e0e0      	b.n	8000da6 <__aeabi_dadd+0x3e2>
 8000be4:	4c51      	ldr	r4, [pc, #324]	; (8000d2c <__aeabi_dadd+0x368>)
 8000be6:	45a4      	cmp	ip, r4
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x228>
 8000bea:	e161      	b.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000bec:	4694      	mov	ip, r2
 8000bee:	e7b4      	b.n	8000b5a <__aeabi_dadd+0x196>
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	391f      	subs	r1, #31
 8000bf4:	40ca      	lsrs	r2, r1
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d003      	beq.n	8000c04 <__aeabi_dadd+0x240>
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	409f      	lsls	r7, r3
 8000c02:	433c      	orrs	r4, r7
 8000c04:	1e63      	subs	r3, r4, #1
 8000c06:	419c      	sbcs	r4, r3
 8000c08:	2700      	movs	r7, #0
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	430c      	orrs	r4, r1
 8000c0e:	0763      	lsls	r3, r4, #29
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dadd+0x250>
 8000c12:	e753      	b.n	8000abc <__aeabi_dadd+0xf8>
 8000c14:	46b4      	mov	ip, r6
 8000c16:	08e4      	lsrs	r4, r4, #3
 8000c18:	077b      	lsls	r3, r7, #29
 8000c1a:	4323      	orrs	r3, r4
 8000c1c:	08f8      	lsrs	r0, r7, #3
 8000c1e:	4a43      	ldr	r2, [pc, #268]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c20:	4594      	cmp	ip, r2
 8000c22:	d01d      	beq.n	8000c60 <__aeabi_dadd+0x29c>
 8000c24:	4662      	mov	r2, ip
 8000c26:	0307      	lsls	r7, r0, #12
 8000c28:	0552      	lsls	r2, r2, #21
 8000c2a:	0b3f      	lsrs	r7, r7, #12
 8000c2c:	0d52      	lsrs	r2, r2, #21
 8000c2e:	e760      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c30:	4644      	mov	r4, r8
 8000c32:	430c      	orrs	r4, r1
 8000c34:	1e62      	subs	r2, r4, #1
 8000c36:	4194      	sbcs	r4, r2
 8000c38:	18e4      	adds	r4, r4, r3
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	425f      	negs	r7, r3
 8000c40:	183f      	adds	r7, r7, r0
 8000c42:	023b      	lsls	r3, r7, #8
 8000c44:	d5e3      	bpl.n	8000c0e <__aeabi_dadd+0x24a>
 8000c46:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c48:	3601      	adds	r6, #1
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_dadd+0x28c>
 8000c4e:	e0b5      	b.n	8000dbc <__aeabi_dadd+0x3f8>
 8000c50:	0032      	movs	r2, r6
 8000c52:	2700      	movs	r7, #0
 8000c54:	2300      	movs	r3, #0
 8000c56:	e74c      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c58:	0742      	lsls	r2, r0, #29
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	08c0      	lsrs	r0, r0, #3
 8000c60:	001a      	movs	r2, r3
 8000c62:	4302      	orrs	r2, r0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x2a4>
 8000c66:	e1e1      	b.n	800102c <__aeabi_dadd+0x668>
 8000c68:	2780      	movs	r7, #128	; 0x80
 8000c6a:	033f      	lsls	r7, r7, #12
 8000c6c:	4307      	orrs	r7, r0
 8000c6e:	033f      	lsls	r7, r7, #12
 8000c70:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c72:	0b3f      	lsrs	r7, r7, #12
 8000c74:	e73d      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c76:	0020      	movs	r0, r4
 8000c78:	f001 fcd2 	bl	8002620 <__clzsi2>
 8000c7c:	0001      	movs	r1, r0
 8000c7e:	3118      	adds	r1, #24
 8000c80:	291f      	cmp	r1, #31
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dadd+0x2c2>
 8000c84:	e6fc      	b.n	8000a80 <__aeabi_dadd+0xbc>
 8000c86:	3808      	subs	r0, #8
 8000c88:	4084      	lsls	r4, r0
 8000c8a:	0027      	movs	r7, r4
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	42b1      	cmp	r1, r6
 8000c90:	db00      	blt.n	8000c94 <__aeabi_dadd+0x2d0>
 8000c92:	e6ff      	b.n	8000a94 <__aeabi_dadd+0xd0>
 8000c94:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <__aeabi_dadd+0x36c>)
 8000c96:	1a76      	subs	r6, r6, r1
 8000c98:	4017      	ands	r7, r2
 8000c9a:	e70d      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d02f      	beq.n	8000d00 <__aeabi_dadd+0x33c>
 8000ca0:	464a      	mov	r2, r9
 8000ca2:	1b92      	subs	r2, r2, r6
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_dadd+0x2e8>
 8000caa:	e0ad      	b.n	8000e08 <__aeabi_dadd+0x444>
 8000cac:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <__aeabi_dadd+0x368>)
 8000cae:	4591      	cmp	r9, r2
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_dadd+0x2f0>
 8000cb2:	e10f      	b.n	8000ed4 <__aeabi_dadd+0x510>
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	0412      	lsls	r2, r2, #16
 8000cb8:	4310      	orrs	r0, r2
 8000cba:	4662      	mov	r2, ip
 8000cbc:	2a38      	cmp	r2, #56	; 0x38
 8000cbe:	dd00      	ble.n	8000cc2 <__aeabi_dadd+0x2fe>
 8000cc0:	e10f      	b.n	8000ee2 <__aeabi_dadd+0x51e>
 8000cc2:	2a1f      	cmp	r2, #31
 8000cc4:	dd00      	ble.n	8000cc8 <__aeabi_dadd+0x304>
 8000cc6:	e180      	b.n	8000fca <__aeabi_dadd+0x606>
 8000cc8:	4664      	mov	r4, ip
 8000cca:	2220      	movs	r2, #32
 8000ccc:	001e      	movs	r6, r3
 8000cce:	1b12      	subs	r2, r2, r4
 8000cd0:	4667      	mov	r7, ip
 8000cd2:	0004      	movs	r4, r0
 8000cd4:	4093      	lsls	r3, r2
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	40fe      	lsrs	r6, r7
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	4193      	sbcs	r3, r2
 8000cde:	40f8      	lsrs	r0, r7
 8000ce0:	4334      	orrs	r4, r6
 8000ce2:	431c      	orrs	r4, r3
 8000ce4:	4480      	add	r8, r0
 8000ce6:	1864      	adds	r4, r4, r1
 8000ce8:	428c      	cmp	r4, r1
 8000cea:	41bf      	sbcs	r7, r7
 8000cec:	427f      	negs	r7, r7
 8000cee:	464e      	mov	r6, r9
 8000cf0:	4447      	add	r7, r8
 8000cf2:	e7a6      	b.n	8000c42 <__aeabi_dadd+0x27e>
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	1e4a      	subs	r2, r1, #1
 8000cfc:	4191      	sbcs	r1, r2
 8000cfe:	e6ad      	b.n	8000a5c <__aeabi_dadd+0x98>
 8000d00:	4c0c      	ldr	r4, [pc, #48]	; (8000d34 <__aeabi_dadd+0x370>)
 8000d02:	1c72      	adds	r2, r6, #1
 8000d04:	4222      	tst	r2, r4
 8000d06:	d000      	beq.n	8000d0a <__aeabi_dadd+0x346>
 8000d08:	e0a1      	b.n	8000e4e <__aeabi_dadd+0x48a>
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dadd+0x350>
 8000d12:	e0fa      	b.n	8000f0a <__aeabi_dadd+0x546>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x356>
 8000d18:	e145      	b.n	8000fa6 <__aeabi_dadd+0x5e2>
 8000d1a:	003a      	movs	r2, r7
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_dadd+0x35e>
 8000d20:	e146      	b.n	8000fb0 <__aeabi_dadd+0x5ec>
 8000d22:	0742      	lsls	r2, r0, #29
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	08c0      	lsrs	r0, r0, #3
 8000d2a:	e77b      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000d2c:	000007ff 	.word	0x000007ff
 8000d30:	ff7fffff 	.word	0xff7fffff
 8000d34:	000007fe 	.word	0x000007fe
 8000d38:	4647      	mov	r7, r8
 8000d3a:	1a5c      	subs	r4, r3, r1
 8000d3c:	1bc2      	subs	r2, r0, r7
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	41bf      	sbcs	r7, r7
 8000d42:	427f      	negs	r7, r7
 8000d44:	46b9      	mov	r9, r7
 8000d46:	0017      	movs	r7, r2
 8000d48:	464a      	mov	r2, r9
 8000d4a:	1abf      	subs	r7, r7, r2
 8000d4c:	023a      	lsls	r2, r7, #8
 8000d4e:	d500      	bpl.n	8000d52 <__aeabi_dadd+0x38e>
 8000d50:	e08d      	b.n	8000e6e <__aeabi_dadd+0x4aa>
 8000d52:	0023      	movs	r3, r4
 8000d54:	433b      	orrs	r3, r7
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x396>
 8000d58:	e68a      	b.n	8000a70 <__aeabi_dadd+0xac>
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	e761      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000d60:	4cb4      	ldr	r4, [pc, #720]	; (8001034 <__aeabi_dadd+0x670>)
 8000d62:	45a1      	cmp	r9, r4
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x3a4>
 8000d66:	e0ad      	b.n	8000ec4 <__aeabi_dadd+0x500>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	0424      	lsls	r4, r4, #16
 8000d6c:	4320      	orrs	r0, r4
 8000d6e:	4664      	mov	r4, ip
 8000d70:	2c38      	cmp	r4, #56	; 0x38
 8000d72:	dc3d      	bgt.n	8000df0 <__aeabi_dadd+0x42c>
 8000d74:	4662      	mov	r2, ip
 8000d76:	2c1f      	cmp	r4, #31
 8000d78:	dd00      	ble.n	8000d7c <__aeabi_dadd+0x3b8>
 8000d7a:	e0b7      	b.n	8000eec <__aeabi_dadd+0x528>
 8000d7c:	2520      	movs	r5, #32
 8000d7e:	001e      	movs	r6, r3
 8000d80:	1b2d      	subs	r5, r5, r4
 8000d82:	0004      	movs	r4, r0
 8000d84:	40ab      	lsls	r3, r5
 8000d86:	40ac      	lsls	r4, r5
 8000d88:	40d6      	lsrs	r6, r2
 8000d8a:	40d0      	lsrs	r0, r2
 8000d8c:	4642      	mov	r2, r8
 8000d8e:	1e5d      	subs	r5, r3, #1
 8000d90:	41ab      	sbcs	r3, r5
 8000d92:	4334      	orrs	r4, r6
 8000d94:	1a12      	subs	r2, r2, r0
 8000d96:	4690      	mov	r8, r2
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	e02c      	b.n	8000df6 <__aeabi_dadd+0x432>
 8000d9c:	0742      	lsls	r2, r0, #29
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	08c0      	lsrs	r0, r0, #3
 8000da4:	e73b      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000da6:	185c      	adds	r4, r3, r1
 8000da8:	429c      	cmp	r4, r3
 8000daa:	419b      	sbcs	r3, r3
 8000dac:	4440      	add	r0, r8
 8000dae:	425b      	negs	r3, r3
 8000db0:	18c7      	adds	r7, r0, r3
 8000db2:	2601      	movs	r6, #1
 8000db4:	023b      	lsls	r3, r7, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_dadd+0x3f6>
 8000db8:	e729      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000dba:	2602      	movs	r6, #2
 8000dbc:	4a9e      	ldr	r2, [pc, #632]	; (8001038 <__aeabi_dadd+0x674>)
 8000dbe:	0863      	lsrs	r3, r4, #1
 8000dc0:	4017      	ands	r7, r2
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4014      	ands	r4, r2
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	07fb      	lsls	r3, r7, #31
 8000dca:	431c      	orrs	r4, r3
 8000dcc:	087f      	lsrs	r7, r7, #1
 8000dce:	e673      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000dd0:	4644      	mov	r4, r8
 8000dd2:	3a20      	subs	r2, #32
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	4662      	mov	r2, ip
 8000dd8:	2a20      	cmp	r2, #32
 8000dda:	d005      	beq.n	8000de8 <__aeabi_dadd+0x424>
 8000ddc:	4667      	mov	r7, ip
 8000dde:	2240      	movs	r2, #64	; 0x40
 8000de0:	1bd2      	subs	r2, r2, r7
 8000de2:	4647      	mov	r7, r8
 8000de4:	4097      	lsls	r7, r2
 8000de6:	4339      	orrs	r1, r7
 8000de8:	1e4a      	subs	r2, r1, #1
 8000dea:	4191      	sbcs	r1, r2
 8000dec:	4321      	orrs	r1, r4
 8000dee:	e635      	b.n	8000a5c <__aeabi_dadd+0x98>
 8000df0:	4303      	orrs	r3, r0
 8000df2:	1e58      	subs	r0, r3, #1
 8000df4:	4183      	sbcs	r3, r0
 8000df6:	1acc      	subs	r4, r1, r3
 8000df8:	42a1      	cmp	r1, r4
 8000dfa:	41bf      	sbcs	r7, r7
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	427f      	negs	r7, r7
 8000e00:	4655      	mov	r5, sl
 8000e02:	464e      	mov	r6, r9
 8000e04:	1bdf      	subs	r7, r3, r7
 8000e06:	e62e      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000e08:	0002      	movs	r2, r0
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dadd+0x44c>
 8000e0e:	e0bd      	b.n	8000f8c <__aeabi_dadd+0x5c8>
 8000e10:	4662      	mov	r2, ip
 8000e12:	4664      	mov	r4, ip
 8000e14:	3a01      	subs	r2, #1
 8000e16:	2c01      	cmp	r4, #1
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x458>
 8000e1a:	e0e5      	b.n	8000fe8 <__aeabi_dadd+0x624>
 8000e1c:	4c85      	ldr	r4, [pc, #532]	; (8001034 <__aeabi_dadd+0x670>)
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d058      	beq.n	8000ed4 <__aeabi_dadd+0x510>
 8000e22:	4694      	mov	ip, r2
 8000e24:	e749      	b.n	8000cba <__aeabi_dadd+0x2f6>
 8000e26:	4664      	mov	r4, ip
 8000e28:	2220      	movs	r2, #32
 8000e2a:	1b12      	subs	r2, r2, r4
 8000e2c:	4644      	mov	r4, r8
 8000e2e:	4094      	lsls	r4, r2
 8000e30:	000f      	movs	r7, r1
 8000e32:	46a1      	mov	r9, r4
 8000e34:	4664      	mov	r4, ip
 8000e36:	4091      	lsls	r1, r2
 8000e38:	40e7      	lsrs	r7, r4
 8000e3a:	464c      	mov	r4, r9
 8000e3c:	1e4a      	subs	r2, r1, #1
 8000e3e:	4191      	sbcs	r1, r2
 8000e40:	433c      	orrs	r4, r7
 8000e42:	4642      	mov	r2, r8
 8000e44:	430c      	orrs	r4, r1
 8000e46:	4661      	mov	r1, ip
 8000e48:	40ca      	lsrs	r2, r1
 8000e4a:	1880      	adds	r0, r0, r2
 8000e4c:	e6f4      	b.n	8000c38 <__aeabi_dadd+0x274>
 8000e4e:	4c79      	ldr	r4, [pc, #484]	; (8001034 <__aeabi_dadd+0x670>)
 8000e50:	42a2      	cmp	r2, r4
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x492>
 8000e54:	e6fd      	b.n	8000c52 <__aeabi_dadd+0x28e>
 8000e56:	1859      	adds	r1, r3, r1
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	419b      	sbcs	r3, r3
 8000e5c:	4440      	add	r0, r8
 8000e5e:	425f      	negs	r7, r3
 8000e60:	19c7      	adds	r7, r0, r7
 8000e62:	07fc      	lsls	r4, r7, #31
 8000e64:	0849      	lsrs	r1, r1, #1
 8000e66:	0016      	movs	r6, r2
 8000e68:	430c      	orrs	r4, r1
 8000e6a:	087f      	lsrs	r7, r7, #1
 8000e6c:	e6cf      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000e6e:	1acc      	subs	r4, r1, r3
 8000e70:	42a1      	cmp	r1, r4
 8000e72:	41bf      	sbcs	r7, r7
 8000e74:	4643      	mov	r3, r8
 8000e76:	427f      	negs	r7, r7
 8000e78:	1a18      	subs	r0, r3, r0
 8000e7a:	4655      	mov	r5, sl
 8000e7c:	1bc7      	subs	r7, r0, r7
 8000e7e:	e5f7      	b.n	8000a70 <__aeabi_dadd+0xac>
 8000e80:	08c9      	lsrs	r1, r1, #3
 8000e82:	077b      	lsls	r3, r7, #29
 8000e84:	4655      	mov	r5, sl
 8000e86:	430b      	orrs	r3, r1
 8000e88:	08f8      	lsrs	r0, r7, #3
 8000e8a:	e6c8      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000e8c:	2c00      	cmp	r4, #0
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x4ce>
 8000e90:	e081      	b.n	8000f96 <__aeabi_dadd+0x5d2>
 8000e92:	4643      	mov	r3, r8
 8000e94:	430b      	orrs	r3, r1
 8000e96:	d115      	bne.n	8000ec4 <__aeabi_dadd+0x500>
 8000e98:	2080      	movs	r0, #128	; 0x80
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	0300      	lsls	r0, r0, #12
 8000e9e:	e6e3      	b.n	8000c68 <__aeabi_dadd+0x2a4>
 8000ea0:	1a5c      	subs	r4, r3, r1
 8000ea2:	42a3      	cmp	r3, r4
 8000ea4:	419b      	sbcs	r3, r3
 8000ea6:	1bc7      	subs	r7, r0, r7
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	2601      	movs	r6, #1
 8000eac:	1aff      	subs	r7, r7, r3
 8000eae:	e5da      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000eb0:	0742      	lsls	r2, r0, #29
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	08c0      	lsrs	r0, r0, #3
 8000eb8:	e6d2      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000eba:	0742      	lsls	r2, r0, #29
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	08c0      	lsrs	r0, r0, #3
 8000ec2:	e6ac      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	08c9      	lsrs	r1, r1, #3
 8000eca:	075b      	lsls	r3, r3, #29
 8000ecc:	4655      	mov	r5, sl
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	08d0      	lsrs	r0, r2, #3
 8000ed2:	e6c5      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	4642      	mov	r2, r8
 8000ed8:	075b      	lsls	r3, r3, #29
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	430b      	orrs	r3, r1
 8000ede:	08d0      	lsrs	r0, r2, #3
 8000ee0:	e6be      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	001c      	movs	r4, r3
 8000ee6:	1e63      	subs	r3, r4, #1
 8000ee8:	419c      	sbcs	r4, r3
 8000eea:	e6fc      	b.n	8000ce6 <__aeabi_dadd+0x322>
 8000eec:	0002      	movs	r2, r0
 8000eee:	3c20      	subs	r4, #32
 8000ef0:	40e2      	lsrs	r2, r4
 8000ef2:	0014      	movs	r4, r2
 8000ef4:	4662      	mov	r2, ip
 8000ef6:	2a20      	cmp	r2, #32
 8000ef8:	d003      	beq.n	8000f02 <__aeabi_dadd+0x53e>
 8000efa:	2540      	movs	r5, #64	; 0x40
 8000efc:	1aad      	subs	r5, r5, r2
 8000efe:	40a8      	lsls	r0, r5
 8000f00:	4303      	orrs	r3, r0
 8000f02:	1e58      	subs	r0, r3, #1
 8000f04:	4183      	sbcs	r3, r0
 8000f06:	4323      	orrs	r3, r4
 8000f08:	e775      	b.n	8000df6 <__aeabi_dadd+0x432>
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	d0e2      	beq.n	8000ed4 <__aeabi_dadd+0x510>
 8000f0e:	003a      	movs	r2, r7
 8000f10:	430a      	orrs	r2, r1
 8000f12:	d0cd      	beq.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000f14:	0742      	lsls	r2, r0, #29
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	08c0      	lsrs	r0, r0, #3
 8000f1e:	0312      	lsls	r2, r2, #12
 8000f20:	4210      	tst	r0, r2
 8000f22:	d006      	beq.n	8000f32 <__aeabi_dadd+0x56e>
 8000f24:	08fc      	lsrs	r4, r7, #3
 8000f26:	4214      	tst	r4, r2
 8000f28:	d103      	bne.n	8000f32 <__aeabi_dadd+0x56e>
 8000f2a:	0020      	movs	r0, r4
 8000f2c:	08cb      	lsrs	r3, r1, #3
 8000f2e:	077a      	lsls	r2, r7, #29
 8000f30:	4313      	orrs	r3, r2
 8000f32:	0f5a      	lsrs	r2, r3, #29
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	0752      	lsls	r2, r2, #29
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	e690      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	430b      	orrs	r3, r1
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0x582>
 8000f44:	e709      	b.n	8000d5a <__aeabi_dadd+0x396>
 8000f46:	4643      	mov	r3, r8
 8000f48:	4642      	mov	r2, r8
 8000f4a:	08c9      	lsrs	r1, r1, #3
 8000f4c:	075b      	lsls	r3, r3, #29
 8000f4e:	4655      	mov	r5, sl
 8000f50:	430b      	orrs	r3, r1
 8000f52:	08d0      	lsrs	r0, r2, #3
 8000f54:	e666      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000f56:	1acc      	subs	r4, r1, r3
 8000f58:	42a1      	cmp	r1, r4
 8000f5a:	4189      	sbcs	r1, r1
 8000f5c:	1a3f      	subs	r7, r7, r0
 8000f5e:	4249      	negs	r1, r1
 8000f60:	4655      	mov	r5, sl
 8000f62:	2601      	movs	r6, #1
 8000f64:	1a7f      	subs	r7, r7, r1
 8000f66:	e57e      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000f68:	4642      	mov	r2, r8
 8000f6a:	1a5c      	subs	r4, r3, r1
 8000f6c:	1a87      	subs	r7, r0, r2
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	4192      	sbcs	r2, r2
 8000f72:	4252      	negs	r2, r2
 8000f74:	1abf      	subs	r7, r7, r2
 8000f76:	023a      	lsls	r2, r7, #8
 8000f78:	d53d      	bpl.n	8000ff6 <__aeabi_dadd+0x632>
 8000f7a:	1acc      	subs	r4, r1, r3
 8000f7c:	42a1      	cmp	r1, r4
 8000f7e:	4189      	sbcs	r1, r1
 8000f80:	4643      	mov	r3, r8
 8000f82:	4249      	negs	r1, r1
 8000f84:	1a1f      	subs	r7, r3, r0
 8000f86:	4655      	mov	r5, sl
 8000f88:	1a7f      	subs	r7, r7, r1
 8000f8a:	e595      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000f8c:	077b      	lsls	r3, r7, #29
 8000f8e:	08c9      	lsrs	r1, r1, #3
 8000f90:	430b      	orrs	r3, r1
 8000f92:	08f8      	lsrs	r0, r7, #3
 8000f94:	e643      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000f96:	4644      	mov	r4, r8
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	d130      	bne.n	8001000 <__aeabi_dadd+0x63c>
 8000f9e:	0742      	lsls	r2, r0, #29
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	08c0      	lsrs	r0, r0, #3
 8000fa4:	e65c      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000fa6:	077b      	lsls	r3, r7, #29
 8000fa8:	08c9      	lsrs	r1, r1, #3
 8000faa:	430b      	orrs	r3, r1
 8000fac:	08f8      	lsrs	r0, r7, #3
 8000fae:	e639      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000fb0:	185c      	adds	r4, r3, r1
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	419b      	sbcs	r3, r3
 8000fb6:	4440      	add	r0, r8
 8000fb8:	425b      	negs	r3, r3
 8000fba:	18c7      	adds	r7, r0, r3
 8000fbc:	023b      	lsls	r3, r7, #8
 8000fbe:	d400      	bmi.n	8000fc2 <__aeabi_dadd+0x5fe>
 8000fc0:	e625      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <__aeabi_dadd+0x674>)
 8000fc4:	2601      	movs	r6, #1
 8000fc6:	401f      	ands	r7, r3
 8000fc8:	e621      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000fca:	0004      	movs	r4, r0
 8000fcc:	3a20      	subs	r2, #32
 8000fce:	40d4      	lsrs	r4, r2
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	2a20      	cmp	r2, #32
 8000fd4:	d004      	beq.n	8000fe0 <__aeabi_dadd+0x61c>
 8000fd6:	2240      	movs	r2, #64	; 0x40
 8000fd8:	4666      	mov	r6, ip
 8000fda:	1b92      	subs	r2, r2, r6
 8000fdc:	4090      	lsls	r0, r2
 8000fde:	4303      	orrs	r3, r0
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	431c      	orrs	r4, r3
 8000fe6:	e67e      	b.n	8000ce6 <__aeabi_dadd+0x322>
 8000fe8:	185c      	adds	r4, r3, r1
 8000fea:	428c      	cmp	r4, r1
 8000fec:	4189      	sbcs	r1, r1
 8000fee:	4440      	add	r0, r8
 8000ff0:	4249      	negs	r1, r1
 8000ff2:	1847      	adds	r7, r0, r1
 8000ff4:	e6dd      	b.n	8000db2 <__aeabi_dadd+0x3ee>
 8000ff6:	0023      	movs	r3, r4
 8000ff8:	433b      	orrs	r3, r7
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x63a>
 8000ffc:	e6ad      	b.n	8000d5a <__aeabi_dadd+0x396>
 8000ffe:	e606      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8001000:	0744      	lsls	r4, r0, #29
 8001002:	4323      	orrs	r3, r4
 8001004:	2480      	movs	r4, #128	; 0x80
 8001006:	08c0      	lsrs	r0, r0, #3
 8001008:	0324      	lsls	r4, r4, #12
 800100a:	4220      	tst	r0, r4
 800100c:	d008      	beq.n	8001020 <__aeabi_dadd+0x65c>
 800100e:	4642      	mov	r2, r8
 8001010:	08d6      	lsrs	r6, r2, #3
 8001012:	4226      	tst	r6, r4
 8001014:	d104      	bne.n	8001020 <__aeabi_dadd+0x65c>
 8001016:	4655      	mov	r5, sl
 8001018:	0030      	movs	r0, r6
 800101a:	08cb      	lsrs	r3, r1, #3
 800101c:	0751      	lsls	r1, r2, #29
 800101e:	430b      	orrs	r3, r1
 8001020:	0f5a      	lsrs	r2, r3, #29
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	0752      	lsls	r2, r2, #29
 8001028:	4313      	orrs	r3, r2
 800102a:	e619      	b.n	8000c60 <__aeabi_dadd+0x29c>
 800102c:	2300      	movs	r3, #0
 800102e:	4a01      	ldr	r2, [pc, #4]	; (8001034 <__aeabi_dadd+0x670>)
 8001030:	001f      	movs	r7, r3
 8001032:	e55e      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8001034:	000007ff 	.word	0x000007ff
 8001038:	ff7fffff 	.word	0xff7fffff

0800103c <__aeabi_ddiv>:
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	4657      	mov	r7, sl
 8001040:	464e      	mov	r6, r9
 8001042:	4645      	mov	r5, r8
 8001044:	46de      	mov	lr, fp
 8001046:	b5e0      	push	{r5, r6, r7, lr}
 8001048:	4681      	mov	r9, r0
 800104a:	0005      	movs	r5, r0
 800104c:	030c      	lsls	r4, r1, #12
 800104e:	0048      	lsls	r0, r1, #1
 8001050:	4692      	mov	sl, r2
 8001052:	001f      	movs	r7, r3
 8001054:	b085      	sub	sp, #20
 8001056:	0b24      	lsrs	r4, r4, #12
 8001058:	0d40      	lsrs	r0, r0, #21
 800105a:	0fce      	lsrs	r6, r1, #31
 800105c:	2800      	cmp	r0, #0
 800105e:	d100      	bne.n	8001062 <__aeabi_ddiv+0x26>
 8001060:	e156      	b.n	8001310 <__aeabi_ddiv+0x2d4>
 8001062:	4bd4      	ldr	r3, [pc, #848]	; (80013b4 <__aeabi_ddiv+0x378>)
 8001064:	4298      	cmp	r0, r3
 8001066:	d100      	bne.n	800106a <__aeabi_ddiv+0x2e>
 8001068:	e172      	b.n	8001350 <__aeabi_ddiv+0x314>
 800106a:	0f6b      	lsrs	r3, r5, #29
 800106c:	00e4      	lsls	r4, r4, #3
 800106e:	431c      	orrs	r4, r3
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	4323      	orrs	r3, r4
 8001076:	4698      	mov	r8, r3
 8001078:	4bcf      	ldr	r3, [pc, #828]	; (80013b8 <__aeabi_ddiv+0x37c>)
 800107a:	00ed      	lsls	r5, r5, #3
 800107c:	469b      	mov	fp, r3
 800107e:	2300      	movs	r3, #0
 8001080:	4699      	mov	r9, r3
 8001082:	4483      	add	fp, r0
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	033c      	lsls	r4, r7, #12
 8001088:	007b      	lsls	r3, r7, #1
 800108a:	4650      	mov	r0, sl
 800108c:	0b24      	lsrs	r4, r4, #12
 800108e:	0d5b      	lsrs	r3, r3, #21
 8001090:	0fff      	lsrs	r7, r7, #31
 8001092:	2b00      	cmp	r3, #0
 8001094:	d100      	bne.n	8001098 <__aeabi_ddiv+0x5c>
 8001096:	e11f      	b.n	80012d8 <__aeabi_ddiv+0x29c>
 8001098:	4ac6      	ldr	r2, [pc, #792]	; (80013b4 <__aeabi_ddiv+0x378>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d100      	bne.n	80010a0 <__aeabi_ddiv+0x64>
 800109e:	e162      	b.n	8001366 <__aeabi_ddiv+0x32a>
 80010a0:	49c5      	ldr	r1, [pc, #788]	; (80013b8 <__aeabi_ddiv+0x37c>)
 80010a2:	0f42      	lsrs	r2, r0, #29
 80010a4:	468c      	mov	ip, r1
 80010a6:	00e4      	lsls	r4, r4, #3
 80010a8:	4659      	mov	r1, fp
 80010aa:	4314      	orrs	r4, r2
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	4463      	add	r3, ip
 80010b0:	0412      	lsls	r2, r2, #16
 80010b2:	1acb      	subs	r3, r1, r3
 80010b4:	4314      	orrs	r4, r2
 80010b6:	469b      	mov	fp, r3
 80010b8:	00c2      	lsls	r2, r0, #3
 80010ba:	2000      	movs	r0, #0
 80010bc:	0033      	movs	r3, r6
 80010be:	407b      	eors	r3, r7
 80010c0:	469a      	mov	sl, r3
 80010c2:	464b      	mov	r3, r9
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d827      	bhi.n	8001118 <__aeabi_ddiv+0xdc>
 80010c8:	49bc      	ldr	r1, [pc, #752]	; (80013bc <__aeabi_ddiv+0x380>)
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	58cb      	ldr	r3, [r1, r3]
 80010ce:	469f      	mov	pc, r3
 80010d0:	46b2      	mov	sl, r6
 80010d2:	9b00      	ldr	r3, [sp, #0]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d016      	beq.n	8001106 <__aeabi_ddiv+0xca>
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d100      	bne.n	80010de <__aeabi_ddiv+0xa2>
 80010dc:	e28e      	b.n	80015fc <__aeabi_ddiv+0x5c0>
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d000      	beq.n	80010e4 <__aeabi_ddiv+0xa8>
 80010e2:	e0d9      	b.n	8001298 <__aeabi_ddiv+0x25c>
 80010e4:	2300      	movs	r3, #0
 80010e6:	2400      	movs	r4, #0
 80010e8:	2500      	movs	r5, #0
 80010ea:	4652      	mov	r2, sl
 80010ec:	051b      	lsls	r3, r3, #20
 80010ee:	4323      	orrs	r3, r4
 80010f0:	07d2      	lsls	r2, r2, #31
 80010f2:	4313      	orrs	r3, r2
 80010f4:	0028      	movs	r0, r5
 80010f6:	0019      	movs	r1, r3
 80010f8:	b005      	add	sp, #20
 80010fa:	bcf0      	pop	{r4, r5, r6, r7}
 80010fc:	46bb      	mov	fp, r7
 80010fe:	46b2      	mov	sl, r6
 8001100:	46a9      	mov	r9, r5
 8001102:	46a0      	mov	r8, r4
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	2400      	movs	r4, #0
 8001108:	2500      	movs	r5, #0
 800110a:	4baa      	ldr	r3, [pc, #680]	; (80013b4 <__aeabi_ddiv+0x378>)
 800110c:	e7ed      	b.n	80010ea <__aeabi_ddiv+0xae>
 800110e:	46ba      	mov	sl, r7
 8001110:	46a0      	mov	r8, r4
 8001112:	0015      	movs	r5, r2
 8001114:	9000      	str	r0, [sp, #0]
 8001116:	e7dc      	b.n	80010d2 <__aeabi_ddiv+0x96>
 8001118:	4544      	cmp	r4, r8
 800111a:	d200      	bcs.n	800111e <__aeabi_ddiv+0xe2>
 800111c:	e1c7      	b.n	80014ae <__aeabi_ddiv+0x472>
 800111e:	d100      	bne.n	8001122 <__aeabi_ddiv+0xe6>
 8001120:	e1c2      	b.n	80014a8 <__aeabi_ddiv+0x46c>
 8001122:	2301      	movs	r3, #1
 8001124:	425b      	negs	r3, r3
 8001126:	469c      	mov	ip, r3
 8001128:	002e      	movs	r6, r5
 800112a:	4640      	mov	r0, r8
 800112c:	2500      	movs	r5, #0
 800112e:	44e3      	add	fp, ip
 8001130:	0223      	lsls	r3, r4, #8
 8001132:	0e14      	lsrs	r4, r2, #24
 8001134:	431c      	orrs	r4, r3
 8001136:	0c1b      	lsrs	r3, r3, #16
 8001138:	4699      	mov	r9, r3
 800113a:	0423      	lsls	r3, r4, #16
 800113c:	0c1f      	lsrs	r7, r3, #16
 800113e:	0212      	lsls	r2, r2, #8
 8001140:	4649      	mov	r1, r9
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	9701      	str	r7, [sp, #4]
 8001146:	f7ff f881 	bl	800024c <__aeabi_uidivmod>
 800114a:	0002      	movs	r2, r0
 800114c:	437a      	muls	r2, r7
 800114e:	040b      	lsls	r3, r1, #16
 8001150:	0c31      	lsrs	r1, r6, #16
 8001152:	4680      	mov	r8, r0
 8001154:	4319      	orrs	r1, r3
 8001156:	428a      	cmp	r2, r1
 8001158:	d907      	bls.n	800116a <__aeabi_ddiv+0x12e>
 800115a:	2301      	movs	r3, #1
 800115c:	425b      	negs	r3, r3
 800115e:	469c      	mov	ip, r3
 8001160:	1909      	adds	r1, r1, r4
 8001162:	44e0      	add	r8, ip
 8001164:	428c      	cmp	r4, r1
 8001166:	d800      	bhi.n	800116a <__aeabi_ddiv+0x12e>
 8001168:	e207      	b.n	800157a <__aeabi_ddiv+0x53e>
 800116a:	1a88      	subs	r0, r1, r2
 800116c:	4649      	mov	r1, r9
 800116e:	f7ff f86d 	bl	800024c <__aeabi_uidivmod>
 8001172:	0409      	lsls	r1, r1, #16
 8001174:	468c      	mov	ip, r1
 8001176:	0431      	lsls	r1, r6, #16
 8001178:	4666      	mov	r6, ip
 800117a:	9a01      	ldr	r2, [sp, #4]
 800117c:	0c09      	lsrs	r1, r1, #16
 800117e:	4342      	muls	r2, r0
 8001180:	0003      	movs	r3, r0
 8001182:	4331      	orrs	r1, r6
 8001184:	428a      	cmp	r2, r1
 8001186:	d904      	bls.n	8001192 <__aeabi_ddiv+0x156>
 8001188:	1909      	adds	r1, r1, r4
 800118a:	3b01      	subs	r3, #1
 800118c:	428c      	cmp	r4, r1
 800118e:	d800      	bhi.n	8001192 <__aeabi_ddiv+0x156>
 8001190:	e1ed      	b.n	800156e <__aeabi_ddiv+0x532>
 8001192:	1a88      	subs	r0, r1, r2
 8001194:	4642      	mov	r2, r8
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	431a      	orrs	r2, r3
 800119a:	4690      	mov	r8, r2
 800119c:	4641      	mov	r1, r8
 800119e:	9b00      	ldr	r3, [sp, #0]
 80011a0:	040e      	lsls	r6, r1, #16
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	001f      	movs	r7, r3
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	9b00      	ldr	r3, [sp, #0]
 80011aa:	0c36      	lsrs	r6, r6, #16
 80011ac:	041b      	lsls	r3, r3, #16
 80011ae:	0c19      	lsrs	r1, r3, #16
 80011b0:	000b      	movs	r3, r1
 80011b2:	4373      	muls	r3, r6
 80011b4:	0c12      	lsrs	r2, r2, #16
 80011b6:	437e      	muls	r6, r7
 80011b8:	9103      	str	r1, [sp, #12]
 80011ba:	4351      	muls	r1, r2
 80011bc:	437a      	muls	r2, r7
 80011be:	0c1f      	lsrs	r7, r3, #16
 80011c0:	46bc      	mov	ip, r7
 80011c2:	1876      	adds	r6, r6, r1
 80011c4:	4466      	add	r6, ip
 80011c6:	42b1      	cmp	r1, r6
 80011c8:	d903      	bls.n	80011d2 <__aeabi_ddiv+0x196>
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	0249      	lsls	r1, r1, #9
 80011ce:	468c      	mov	ip, r1
 80011d0:	4462      	add	r2, ip
 80011d2:	0c31      	lsrs	r1, r6, #16
 80011d4:	188a      	adds	r2, r1, r2
 80011d6:	0431      	lsls	r1, r6, #16
 80011d8:	041e      	lsls	r6, r3, #16
 80011da:	0c36      	lsrs	r6, r6, #16
 80011dc:	198e      	adds	r6, r1, r6
 80011de:	4290      	cmp	r0, r2
 80011e0:	d302      	bcc.n	80011e8 <__aeabi_ddiv+0x1ac>
 80011e2:	d112      	bne.n	800120a <__aeabi_ddiv+0x1ce>
 80011e4:	42b5      	cmp	r5, r6
 80011e6:	d210      	bcs.n	800120a <__aeabi_ddiv+0x1ce>
 80011e8:	4643      	mov	r3, r8
 80011ea:	1e59      	subs	r1, r3, #1
 80011ec:	9b00      	ldr	r3, [sp, #0]
 80011ee:	469c      	mov	ip, r3
 80011f0:	4465      	add	r5, ip
 80011f2:	001f      	movs	r7, r3
 80011f4:	429d      	cmp	r5, r3
 80011f6:	419b      	sbcs	r3, r3
 80011f8:	425b      	negs	r3, r3
 80011fa:	191b      	adds	r3, r3, r4
 80011fc:	18c0      	adds	r0, r0, r3
 80011fe:	4284      	cmp	r4, r0
 8001200:	d200      	bcs.n	8001204 <__aeabi_ddiv+0x1c8>
 8001202:	e1a0      	b.n	8001546 <__aeabi_ddiv+0x50a>
 8001204:	d100      	bne.n	8001208 <__aeabi_ddiv+0x1cc>
 8001206:	e19b      	b.n	8001540 <__aeabi_ddiv+0x504>
 8001208:	4688      	mov	r8, r1
 800120a:	1bae      	subs	r6, r5, r6
 800120c:	42b5      	cmp	r5, r6
 800120e:	41ad      	sbcs	r5, r5
 8001210:	1a80      	subs	r0, r0, r2
 8001212:	426d      	negs	r5, r5
 8001214:	1b40      	subs	r0, r0, r5
 8001216:	4284      	cmp	r4, r0
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x1e0>
 800121a:	e1d5      	b.n	80015c8 <__aeabi_ddiv+0x58c>
 800121c:	4649      	mov	r1, r9
 800121e:	f7ff f815 	bl	800024c <__aeabi_uidivmod>
 8001222:	9a01      	ldr	r2, [sp, #4]
 8001224:	040b      	lsls	r3, r1, #16
 8001226:	4342      	muls	r2, r0
 8001228:	0c31      	lsrs	r1, r6, #16
 800122a:	0005      	movs	r5, r0
 800122c:	4319      	orrs	r1, r3
 800122e:	428a      	cmp	r2, r1
 8001230:	d900      	bls.n	8001234 <__aeabi_ddiv+0x1f8>
 8001232:	e16c      	b.n	800150e <__aeabi_ddiv+0x4d2>
 8001234:	1a88      	subs	r0, r1, r2
 8001236:	4649      	mov	r1, r9
 8001238:	f7ff f808 	bl	800024c <__aeabi_uidivmod>
 800123c:	9a01      	ldr	r2, [sp, #4]
 800123e:	0436      	lsls	r6, r6, #16
 8001240:	4342      	muls	r2, r0
 8001242:	0409      	lsls	r1, r1, #16
 8001244:	0c36      	lsrs	r6, r6, #16
 8001246:	0003      	movs	r3, r0
 8001248:	430e      	orrs	r6, r1
 800124a:	42b2      	cmp	r2, r6
 800124c:	d900      	bls.n	8001250 <__aeabi_ddiv+0x214>
 800124e:	e153      	b.n	80014f8 <__aeabi_ddiv+0x4bc>
 8001250:	9803      	ldr	r0, [sp, #12]
 8001252:	1ab6      	subs	r6, r6, r2
 8001254:	0002      	movs	r2, r0
 8001256:	042d      	lsls	r5, r5, #16
 8001258:	431d      	orrs	r5, r3
 800125a:	9f02      	ldr	r7, [sp, #8]
 800125c:	042b      	lsls	r3, r5, #16
 800125e:	0c1b      	lsrs	r3, r3, #16
 8001260:	435a      	muls	r2, r3
 8001262:	437b      	muls	r3, r7
 8001264:	469c      	mov	ip, r3
 8001266:	0c29      	lsrs	r1, r5, #16
 8001268:	4348      	muls	r0, r1
 800126a:	0c13      	lsrs	r3, r2, #16
 800126c:	4484      	add	ip, r0
 800126e:	4463      	add	r3, ip
 8001270:	4379      	muls	r1, r7
 8001272:	4298      	cmp	r0, r3
 8001274:	d903      	bls.n	800127e <__aeabi_ddiv+0x242>
 8001276:	2080      	movs	r0, #128	; 0x80
 8001278:	0240      	lsls	r0, r0, #9
 800127a:	4684      	mov	ip, r0
 800127c:	4461      	add	r1, ip
 800127e:	0c18      	lsrs	r0, r3, #16
 8001280:	0412      	lsls	r2, r2, #16
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	0c12      	lsrs	r2, r2, #16
 8001286:	1841      	adds	r1, r0, r1
 8001288:	189b      	adds	r3, r3, r2
 800128a:	428e      	cmp	r6, r1
 800128c:	d200      	bcs.n	8001290 <__aeabi_ddiv+0x254>
 800128e:	e0ff      	b.n	8001490 <__aeabi_ddiv+0x454>
 8001290:	d100      	bne.n	8001294 <__aeabi_ddiv+0x258>
 8001292:	e0fa      	b.n	800148a <__aeabi_ddiv+0x44e>
 8001294:	2301      	movs	r3, #1
 8001296:	431d      	orrs	r5, r3
 8001298:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <__aeabi_ddiv+0x384>)
 800129a:	445a      	add	r2, fp
 800129c:	2a00      	cmp	r2, #0
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_ddiv+0x266>
 80012a0:	e0aa      	b.n	80013f8 <__aeabi_ddiv+0x3bc>
 80012a2:	076b      	lsls	r3, r5, #29
 80012a4:	d000      	beq.n	80012a8 <__aeabi_ddiv+0x26c>
 80012a6:	e13d      	b.n	8001524 <__aeabi_ddiv+0x4e8>
 80012a8:	08ed      	lsrs	r5, r5, #3
 80012aa:	4643      	mov	r3, r8
 80012ac:	01db      	lsls	r3, r3, #7
 80012ae:	d506      	bpl.n	80012be <__aeabi_ddiv+0x282>
 80012b0:	4642      	mov	r2, r8
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <__aeabi_ddiv+0x388>)
 80012b4:	401a      	ands	r2, r3
 80012b6:	4690      	mov	r8, r2
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	00d2      	lsls	r2, r2, #3
 80012bc:	445a      	add	r2, fp
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <__aeabi_ddiv+0x38c>)
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dd00      	ble.n	80012c6 <__aeabi_ddiv+0x28a>
 80012c4:	e71f      	b.n	8001106 <__aeabi_ddiv+0xca>
 80012c6:	4643      	mov	r3, r8
 80012c8:	075b      	lsls	r3, r3, #29
 80012ca:	431d      	orrs	r5, r3
 80012cc:	4643      	mov	r3, r8
 80012ce:	0552      	lsls	r2, r2, #21
 80012d0:	025c      	lsls	r4, r3, #9
 80012d2:	0b24      	lsrs	r4, r4, #12
 80012d4:	0d53      	lsrs	r3, r2, #21
 80012d6:	e708      	b.n	80010ea <__aeabi_ddiv+0xae>
 80012d8:	4652      	mov	r2, sl
 80012da:	4322      	orrs	r2, r4
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x2a4>
 80012de:	e07b      	b.n	80013d8 <__aeabi_ddiv+0x39c>
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_ddiv+0x2aa>
 80012e4:	e0fa      	b.n	80014dc <__aeabi_ddiv+0x4a0>
 80012e6:	0020      	movs	r0, r4
 80012e8:	f001 f99a 	bl	8002620 <__clzsi2>
 80012ec:	0002      	movs	r2, r0
 80012ee:	3a0b      	subs	r2, #11
 80012f0:	231d      	movs	r3, #29
 80012f2:	0001      	movs	r1, r0
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	4652      	mov	r2, sl
 80012f8:	3908      	subs	r1, #8
 80012fa:	40da      	lsrs	r2, r3
 80012fc:	408c      	lsls	r4, r1
 80012fe:	4314      	orrs	r4, r2
 8001300:	4652      	mov	r2, sl
 8001302:	408a      	lsls	r2, r1
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <__aeabi_ddiv+0x390>)
 8001306:	4458      	add	r0, fp
 8001308:	469b      	mov	fp, r3
 800130a:	4483      	add	fp, r0
 800130c:	2000      	movs	r0, #0
 800130e:	e6d5      	b.n	80010bc <__aeabi_ddiv+0x80>
 8001310:	464b      	mov	r3, r9
 8001312:	4323      	orrs	r3, r4
 8001314:	4698      	mov	r8, r3
 8001316:	d044      	beq.n	80013a2 <__aeabi_ddiv+0x366>
 8001318:	2c00      	cmp	r4, #0
 800131a:	d100      	bne.n	800131e <__aeabi_ddiv+0x2e2>
 800131c:	e0ce      	b.n	80014bc <__aeabi_ddiv+0x480>
 800131e:	0020      	movs	r0, r4
 8001320:	f001 f97e 	bl	8002620 <__clzsi2>
 8001324:	0001      	movs	r1, r0
 8001326:	0002      	movs	r2, r0
 8001328:	390b      	subs	r1, #11
 800132a:	231d      	movs	r3, #29
 800132c:	1a5b      	subs	r3, r3, r1
 800132e:	4649      	mov	r1, r9
 8001330:	0010      	movs	r0, r2
 8001332:	40d9      	lsrs	r1, r3
 8001334:	3808      	subs	r0, #8
 8001336:	4084      	lsls	r4, r0
 8001338:	000b      	movs	r3, r1
 800133a:	464d      	mov	r5, r9
 800133c:	4323      	orrs	r3, r4
 800133e:	4698      	mov	r8, r3
 8001340:	4085      	lsls	r5, r0
 8001342:	4823      	ldr	r0, [pc, #140]	; (80013d0 <__aeabi_ddiv+0x394>)
 8001344:	1a83      	subs	r3, r0, r2
 8001346:	469b      	mov	fp, r3
 8001348:	2300      	movs	r3, #0
 800134a:	4699      	mov	r9, r3
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	e69a      	b.n	8001086 <__aeabi_ddiv+0x4a>
 8001350:	464b      	mov	r3, r9
 8001352:	4323      	orrs	r3, r4
 8001354:	4698      	mov	r8, r3
 8001356:	d11d      	bne.n	8001394 <__aeabi_ddiv+0x358>
 8001358:	2308      	movs	r3, #8
 800135a:	4699      	mov	r9, r3
 800135c:	3b06      	subs	r3, #6
 800135e:	2500      	movs	r5, #0
 8001360:	4683      	mov	fp, r0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	e68f      	b.n	8001086 <__aeabi_ddiv+0x4a>
 8001366:	4652      	mov	r2, sl
 8001368:	4322      	orrs	r2, r4
 800136a:	d109      	bne.n	8001380 <__aeabi_ddiv+0x344>
 800136c:	2302      	movs	r3, #2
 800136e:	4649      	mov	r1, r9
 8001370:	4319      	orrs	r1, r3
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <__aeabi_ddiv+0x398>)
 8001374:	4689      	mov	r9, r1
 8001376:	469c      	mov	ip, r3
 8001378:	2400      	movs	r4, #0
 800137a:	2002      	movs	r0, #2
 800137c:	44e3      	add	fp, ip
 800137e:	e69d      	b.n	80010bc <__aeabi_ddiv+0x80>
 8001380:	2303      	movs	r3, #3
 8001382:	464a      	mov	r2, r9
 8001384:	431a      	orrs	r2, r3
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <__aeabi_ddiv+0x398>)
 8001388:	4691      	mov	r9, r2
 800138a:	469c      	mov	ip, r3
 800138c:	4652      	mov	r2, sl
 800138e:	2003      	movs	r0, #3
 8001390:	44e3      	add	fp, ip
 8001392:	e693      	b.n	80010bc <__aeabi_ddiv+0x80>
 8001394:	230c      	movs	r3, #12
 8001396:	4699      	mov	r9, r3
 8001398:	3b09      	subs	r3, #9
 800139a:	46a0      	mov	r8, r4
 800139c:	4683      	mov	fp, r0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	e671      	b.n	8001086 <__aeabi_ddiv+0x4a>
 80013a2:	2304      	movs	r3, #4
 80013a4:	4699      	mov	r9, r3
 80013a6:	2300      	movs	r3, #0
 80013a8:	469b      	mov	fp, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	2500      	movs	r5, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	e669      	b.n	8001086 <__aeabi_ddiv+0x4a>
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	000007ff 	.word	0x000007ff
 80013b8:	fffffc01 	.word	0xfffffc01
 80013bc:	08007b48 	.word	0x08007b48
 80013c0:	000003ff 	.word	0x000003ff
 80013c4:	feffffff 	.word	0xfeffffff
 80013c8:	000007fe 	.word	0x000007fe
 80013cc:	000003f3 	.word	0x000003f3
 80013d0:	fffffc0d 	.word	0xfffffc0d
 80013d4:	fffff801 	.word	0xfffff801
 80013d8:	4649      	mov	r1, r9
 80013da:	2301      	movs	r3, #1
 80013dc:	4319      	orrs	r1, r3
 80013de:	4689      	mov	r9, r1
 80013e0:	2400      	movs	r4, #0
 80013e2:	2001      	movs	r0, #1
 80013e4:	e66a      	b.n	80010bc <__aeabi_ddiv+0x80>
 80013e6:	2300      	movs	r3, #0
 80013e8:	2480      	movs	r4, #128	; 0x80
 80013ea:	469a      	mov	sl, r3
 80013ec:	2500      	movs	r5, #0
 80013ee:	4b8a      	ldr	r3, [pc, #552]	; (8001618 <__aeabi_ddiv+0x5dc>)
 80013f0:	0324      	lsls	r4, r4, #12
 80013f2:	e67a      	b.n	80010ea <__aeabi_ddiv+0xae>
 80013f4:	2501      	movs	r5, #1
 80013f6:	426d      	negs	r5, r5
 80013f8:	2301      	movs	r3, #1
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	2b38      	cmp	r3, #56	; 0x38
 80013fe:	dd00      	ble.n	8001402 <__aeabi_ddiv+0x3c6>
 8001400:	e670      	b.n	80010e4 <__aeabi_ddiv+0xa8>
 8001402:	2b1f      	cmp	r3, #31
 8001404:	dc00      	bgt.n	8001408 <__aeabi_ddiv+0x3cc>
 8001406:	e0bf      	b.n	8001588 <__aeabi_ddiv+0x54c>
 8001408:	211f      	movs	r1, #31
 800140a:	4249      	negs	r1, r1
 800140c:	1a8a      	subs	r2, r1, r2
 800140e:	4641      	mov	r1, r8
 8001410:	40d1      	lsrs	r1, r2
 8001412:	000a      	movs	r2, r1
 8001414:	2b20      	cmp	r3, #32
 8001416:	d004      	beq.n	8001422 <__aeabi_ddiv+0x3e6>
 8001418:	4641      	mov	r1, r8
 800141a:	4b80      	ldr	r3, [pc, #512]	; (800161c <__aeabi_ddiv+0x5e0>)
 800141c:	445b      	add	r3, fp
 800141e:	4099      	lsls	r1, r3
 8001420:	430d      	orrs	r5, r1
 8001422:	1e6b      	subs	r3, r5, #1
 8001424:	419d      	sbcs	r5, r3
 8001426:	2307      	movs	r3, #7
 8001428:	432a      	orrs	r2, r5
 800142a:	001d      	movs	r5, r3
 800142c:	2400      	movs	r4, #0
 800142e:	4015      	ands	r5, r2
 8001430:	4213      	tst	r3, r2
 8001432:	d100      	bne.n	8001436 <__aeabi_ddiv+0x3fa>
 8001434:	e0d4      	b.n	80015e0 <__aeabi_ddiv+0x5a4>
 8001436:	210f      	movs	r1, #15
 8001438:	2300      	movs	r3, #0
 800143a:	4011      	ands	r1, r2
 800143c:	2904      	cmp	r1, #4
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0x406>
 8001440:	e0cb      	b.n	80015da <__aeabi_ddiv+0x59e>
 8001442:	1d11      	adds	r1, r2, #4
 8001444:	4291      	cmp	r1, r2
 8001446:	4192      	sbcs	r2, r2
 8001448:	4252      	negs	r2, r2
 800144a:	189b      	adds	r3, r3, r2
 800144c:	000a      	movs	r2, r1
 800144e:	0219      	lsls	r1, r3, #8
 8001450:	d400      	bmi.n	8001454 <__aeabi_ddiv+0x418>
 8001452:	e0c2      	b.n	80015da <__aeabi_ddiv+0x59e>
 8001454:	2301      	movs	r3, #1
 8001456:	2400      	movs	r4, #0
 8001458:	2500      	movs	r5, #0
 800145a:	e646      	b.n	80010ea <__aeabi_ddiv+0xae>
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	4641      	mov	r1, r8
 8001460:	031b      	lsls	r3, r3, #12
 8001462:	4219      	tst	r1, r3
 8001464:	d008      	beq.n	8001478 <__aeabi_ddiv+0x43c>
 8001466:	421c      	tst	r4, r3
 8001468:	d106      	bne.n	8001478 <__aeabi_ddiv+0x43c>
 800146a:	431c      	orrs	r4, r3
 800146c:	0324      	lsls	r4, r4, #12
 800146e:	46ba      	mov	sl, r7
 8001470:	0015      	movs	r5, r2
 8001472:	4b69      	ldr	r3, [pc, #420]	; (8001618 <__aeabi_ddiv+0x5dc>)
 8001474:	0b24      	lsrs	r4, r4, #12
 8001476:	e638      	b.n	80010ea <__aeabi_ddiv+0xae>
 8001478:	2480      	movs	r4, #128	; 0x80
 800147a:	4643      	mov	r3, r8
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	431c      	orrs	r4, r3
 8001480:	0324      	lsls	r4, r4, #12
 8001482:	46b2      	mov	sl, r6
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <__aeabi_ddiv+0x5dc>)
 8001486:	0b24      	lsrs	r4, r4, #12
 8001488:	e62f      	b.n	80010ea <__aeabi_ddiv+0xae>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x454>
 800148e:	e703      	b.n	8001298 <__aeabi_ddiv+0x25c>
 8001490:	19a6      	adds	r6, r4, r6
 8001492:	1e68      	subs	r0, r5, #1
 8001494:	42a6      	cmp	r6, r4
 8001496:	d200      	bcs.n	800149a <__aeabi_ddiv+0x45e>
 8001498:	e08d      	b.n	80015b6 <__aeabi_ddiv+0x57a>
 800149a:	428e      	cmp	r6, r1
 800149c:	d200      	bcs.n	80014a0 <__aeabi_ddiv+0x464>
 800149e:	e0a3      	b.n	80015e8 <__aeabi_ddiv+0x5ac>
 80014a0:	d100      	bne.n	80014a4 <__aeabi_ddiv+0x468>
 80014a2:	e0b3      	b.n	800160c <__aeabi_ddiv+0x5d0>
 80014a4:	0005      	movs	r5, r0
 80014a6:	e6f5      	b.n	8001294 <__aeabi_ddiv+0x258>
 80014a8:	42aa      	cmp	r2, r5
 80014aa:	d900      	bls.n	80014ae <__aeabi_ddiv+0x472>
 80014ac:	e639      	b.n	8001122 <__aeabi_ddiv+0xe6>
 80014ae:	4643      	mov	r3, r8
 80014b0:	07de      	lsls	r6, r3, #31
 80014b2:	0858      	lsrs	r0, r3, #1
 80014b4:	086b      	lsrs	r3, r5, #1
 80014b6:	431e      	orrs	r6, r3
 80014b8:	07ed      	lsls	r5, r5, #31
 80014ba:	e639      	b.n	8001130 <__aeabi_ddiv+0xf4>
 80014bc:	4648      	mov	r0, r9
 80014be:	f001 f8af 	bl	8002620 <__clzsi2>
 80014c2:	0001      	movs	r1, r0
 80014c4:	0002      	movs	r2, r0
 80014c6:	3115      	adds	r1, #21
 80014c8:	3220      	adds	r2, #32
 80014ca:	291c      	cmp	r1, #28
 80014cc:	dc00      	bgt.n	80014d0 <__aeabi_ddiv+0x494>
 80014ce:	e72c      	b.n	800132a <__aeabi_ddiv+0x2ee>
 80014d0:	464b      	mov	r3, r9
 80014d2:	3808      	subs	r0, #8
 80014d4:	4083      	lsls	r3, r0
 80014d6:	2500      	movs	r5, #0
 80014d8:	4698      	mov	r8, r3
 80014da:	e732      	b.n	8001342 <__aeabi_ddiv+0x306>
 80014dc:	f001 f8a0 	bl	8002620 <__clzsi2>
 80014e0:	0003      	movs	r3, r0
 80014e2:	001a      	movs	r2, r3
 80014e4:	3215      	adds	r2, #21
 80014e6:	3020      	adds	r0, #32
 80014e8:	2a1c      	cmp	r2, #28
 80014ea:	dc00      	bgt.n	80014ee <__aeabi_ddiv+0x4b2>
 80014ec:	e700      	b.n	80012f0 <__aeabi_ddiv+0x2b4>
 80014ee:	4654      	mov	r4, sl
 80014f0:	3b08      	subs	r3, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	409c      	lsls	r4, r3
 80014f6:	e705      	b.n	8001304 <__aeabi_ddiv+0x2c8>
 80014f8:	1936      	adds	r6, r6, r4
 80014fa:	3b01      	subs	r3, #1
 80014fc:	42b4      	cmp	r4, r6
 80014fe:	d900      	bls.n	8001502 <__aeabi_ddiv+0x4c6>
 8001500:	e6a6      	b.n	8001250 <__aeabi_ddiv+0x214>
 8001502:	42b2      	cmp	r2, r6
 8001504:	d800      	bhi.n	8001508 <__aeabi_ddiv+0x4cc>
 8001506:	e6a3      	b.n	8001250 <__aeabi_ddiv+0x214>
 8001508:	1e83      	subs	r3, r0, #2
 800150a:	1936      	adds	r6, r6, r4
 800150c:	e6a0      	b.n	8001250 <__aeabi_ddiv+0x214>
 800150e:	1909      	adds	r1, r1, r4
 8001510:	3d01      	subs	r5, #1
 8001512:	428c      	cmp	r4, r1
 8001514:	d900      	bls.n	8001518 <__aeabi_ddiv+0x4dc>
 8001516:	e68d      	b.n	8001234 <__aeabi_ddiv+0x1f8>
 8001518:	428a      	cmp	r2, r1
 800151a:	d800      	bhi.n	800151e <__aeabi_ddiv+0x4e2>
 800151c:	e68a      	b.n	8001234 <__aeabi_ddiv+0x1f8>
 800151e:	1e85      	subs	r5, r0, #2
 8001520:	1909      	adds	r1, r1, r4
 8001522:	e687      	b.n	8001234 <__aeabi_ddiv+0x1f8>
 8001524:	230f      	movs	r3, #15
 8001526:	402b      	ands	r3, r5
 8001528:	2b04      	cmp	r3, #4
 800152a:	d100      	bne.n	800152e <__aeabi_ddiv+0x4f2>
 800152c:	e6bc      	b.n	80012a8 <__aeabi_ddiv+0x26c>
 800152e:	2305      	movs	r3, #5
 8001530:	425b      	negs	r3, r3
 8001532:	42ab      	cmp	r3, r5
 8001534:	419b      	sbcs	r3, r3
 8001536:	3504      	adds	r5, #4
 8001538:	425b      	negs	r3, r3
 800153a:	08ed      	lsrs	r5, r5, #3
 800153c:	4498      	add	r8, r3
 800153e:	e6b4      	b.n	80012aa <__aeabi_ddiv+0x26e>
 8001540:	42af      	cmp	r7, r5
 8001542:	d900      	bls.n	8001546 <__aeabi_ddiv+0x50a>
 8001544:	e660      	b.n	8001208 <__aeabi_ddiv+0x1cc>
 8001546:	4282      	cmp	r2, r0
 8001548:	d804      	bhi.n	8001554 <__aeabi_ddiv+0x518>
 800154a:	d000      	beq.n	800154e <__aeabi_ddiv+0x512>
 800154c:	e65c      	b.n	8001208 <__aeabi_ddiv+0x1cc>
 800154e:	42ae      	cmp	r6, r5
 8001550:	d800      	bhi.n	8001554 <__aeabi_ddiv+0x518>
 8001552:	e659      	b.n	8001208 <__aeabi_ddiv+0x1cc>
 8001554:	2302      	movs	r3, #2
 8001556:	425b      	negs	r3, r3
 8001558:	469c      	mov	ip, r3
 800155a:	9b00      	ldr	r3, [sp, #0]
 800155c:	44e0      	add	r8, ip
 800155e:	469c      	mov	ip, r3
 8001560:	4465      	add	r5, ip
 8001562:	429d      	cmp	r5, r3
 8001564:	419b      	sbcs	r3, r3
 8001566:	425b      	negs	r3, r3
 8001568:	191b      	adds	r3, r3, r4
 800156a:	18c0      	adds	r0, r0, r3
 800156c:	e64d      	b.n	800120a <__aeabi_ddiv+0x1ce>
 800156e:	428a      	cmp	r2, r1
 8001570:	d800      	bhi.n	8001574 <__aeabi_ddiv+0x538>
 8001572:	e60e      	b.n	8001192 <__aeabi_ddiv+0x156>
 8001574:	1e83      	subs	r3, r0, #2
 8001576:	1909      	adds	r1, r1, r4
 8001578:	e60b      	b.n	8001192 <__aeabi_ddiv+0x156>
 800157a:	428a      	cmp	r2, r1
 800157c:	d800      	bhi.n	8001580 <__aeabi_ddiv+0x544>
 800157e:	e5f4      	b.n	800116a <__aeabi_ddiv+0x12e>
 8001580:	1e83      	subs	r3, r0, #2
 8001582:	4698      	mov	r8, r3
 8001584:	1909      	adds	r1, r1, r4
 8001586:	e5f0      	b.n	800116a <__aeabi_ddiv+0x12e>
 8001588:	4925      	ldr	r1, [pc, #148]	; (8001620 <__aeabi_ddiv+0x5e4>)
 800158a:	0028      	movs	r0, r5
 800158c:	4459      	add	r1, fp
 800158e:	408d      	lsls	r5, r1
 8001590:	4642      	mov	r2, r8
 8001592:	408a      	lsls	r2, r1
 8001594:	1e69      	subs	r1, r5, #1
 8001596:	418d      	sbcs	r5, r1
 8001598:	4641      	mov	r1, r8
 800159a:	40d8      	lsrs	r0, r3
 800159c:	40d9      	lsrs	r1, r3
 800159e:	4302      	orrs	r2, r0
 80015a0:	432a      	orrs	r2, r5
 80015a2:	000b      	movs	r3, r1
 80015a4:	0751      	lsls	r1, r2, #29
 80015a6:	d100      	bne.n	80015aa <__aeabi_ddiv+0x56e>
 80015a8:	e751      	b.n	800144e <__aeabi_ddiv+0x412>
 80015aa:	210f      	movs	r1, #15
 80015ac:	4011      	ands	r1, r2
 80015ae:	2904      	cmp	r1, #4
 80015b0:	d000      	beq.n	80015b4 <__aeabi_ddiv+0x578>
 80015b2:	e746      	b.n	8001442 <__aeabi_ddiv+0x406>
 80015b4:	e74b      	b.n	800144e <__aeabi_ddiv+0x412>
 80015b6:	0005      	movs	r5, r0
 80015b8:	428e      	cmp	r6, r1
 80015ba:	d000      	beq.n	80015be <__aeabi_ddiv+0x582>
 80015bc:	e66a      	b.n	8001294 <__aeabi_ddiv+0x258>
 80015be:	9a00      	ldr	r2, [sp, #0]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d000      	beq.n	80015c6 <__aeabi_ddiv+0x58a>
 80015c4:	e666      	b.n	8001294 <__aeabi_ddiv+0x258>
 80015c6:	e667      	b.n	8001298 <__aeabi_ddiv+0x25c>
 80015c8:	4a16      	ldr	r2, [pc, #88]	; (8001624 <__aeabi_ddiv+0x5e8>)
 80015ca:	445a      	add	r2, fp
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	dc00      	bgt.n	80015d2 <__aeabi_ddiv+0x596>
 80015d0:	e710      	b.n	80013f4 <__aeabi_ddiv+0x3b8>
 80015d2:	2301      	movs	r3, #1
 80015d4:	2500      	movs	r5, #0
 80015d6:	4498      	add	r8, r3
 80015d8:	e667      	b.n	80012aa <__aeabi_ddiv+0x26e>
 80015da:	075d      	lsls	r5, r3, #29
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	0b1c      	lsrs	r4, r3, #12
 80015e0:	08d2      	lsrs	r2, r2, #3
 80015e2:	2300      	movs	r3, #0
 80015e4:	4315      	orrs	r5, r2
 80015e6:	e580      	b.n	80010ea <__aeabi_ddiv+0xae>
 80015e8:	9800      	ldr	r0, [sp, #0]
 80015ea:	3d02      	subs	r5, #2
 80015ec:	0042      	lsls	r2, r0, #1
 80015ee:	4282      	cmp	r2, r0
 80015f0:	41bf      	sbcs	r7, r7
 80015f2:	427f      	negs	r7, r7
 80015f4:	193c      	adds	r4, r7, r4
 80015f6:	1936      	adds	r6, r6, r4
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	e7dd      	b.n	80015b8 <__aeabi_ddiv+0x57c>
 80015fc:	2480      	movs	r4, #128	; 0x80
 80015fe:	4643      	mov	r3, r8
 8001600:	0324      	lsls	r4, r4, #12
 8001602:	431c      	orrs	r4, r3
 8001604:	0324      	lsls	r4, r4, #12
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__aeabi_ddiv+0x5dc>)
 8001608:	0b24      	lsrs	r4, r4, #12
 800160a:	e56e      	b.n	80010ea <__aeabi_ddiv+0xae>
 800160c:	9a00      	ldr	r2, [sp, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d3ea      	bcc.n	80015e8 <__aeabi_ddiv+0x5ac>
 8001612:	0005      	movs	r5, r0
 8001614:	e7d3      	b.n	80015be <__aeabi_ddiv+0x582>
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	000007ff 	.word	0x000007ff
 800161c:	0000043e 	.word	0x0000043e
 8001620:	0000041e 	.word	0x0000041e
 8001624:	000003ff 	.word	0x000003ff

08001628 <__eqdf2>:
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	464e      	mov	r6, r9
 800162c:	4645      	mov	r5, r8
 800162e:	46de      	mov	lr, fp
 8001630:	4657      	mov	r7, sl
 8001632:	4690      	mov	r8, r2
 8001634:	b5e0      	push	{r5, r6, r7, lr}
 8001636:	0017      	movs	r7, r2
 8001638:	031a      	lsls	r2, r3, #12
 800163a:	0b12      	lsrs	r2, r2, #12
 800163c:	0005      	movs	r5, r0
 800163e:	4684      	mov	ip, r0
 8001640:	4819      	ldr	r0, [pc, #100]	; (80016a8 <__eqdf2+0x80>)
 8001642:	030e      	lsls	r6, r1, #12
 8001644:	004c      	lsls	r4, r1, #1
 8001646:	4691      	mov	r9, r2
 8001648:	005a      	lsls	r2, r3, #1
 800164a:	0fdb      	lsrs	r3, r3, #31
 800164c:	469b      	mov	fp, r3
 800164e:	0b36      	lsrs	r6, r6, #12
 8001650:	0d64      	lsrs	r4, r4, #21
 8001652:	0fc9      	lsrs	r1, r1, #31
 8001654:	0d52      	lsrs	r2, r2, #21
 8001656:	4284      	cmp	r4, r0
 8001658:	d019      	beq.n	800168e <__eqdf2+0x66>
 800165a:	4282      	cmp	r2, r0
 800165c:	d010      	beq.n	8001680 <__eqdf2+0x58>
 800165e:	2001      	movs	r0, #1
 8001660:	4294      	cmp	r4, r2
 8001662:	d10e      	bne.n	8001682 <__eqdf2+0x5a>
 8001664:	454e      	cmp	r6, r9
 8001666:	d10c      	bne.n	8001682 <__eqdf2+0x5a>
 8001668:	2001      	movs	r0, #1
 800166a:	45c4      	cmp	ip, r8
 800166c:	d109      	bne.n	8001682 <__eqdf2+0x5a>
 800166e:	4559      	cmp	r1, fp
 8001670:	d017      	beq.n	80016a2 <__eqdf2+0x7a>
 8001672:	2c00      	cmp	r4, #0
 8001674:	d105      	bne.n	8001682 <__eqdf2+0x5a>
 8001676:	0030      	movs	r0, r6
 8001678:	4328      	orrs	r0, r5
 800167a:	1e43      	subs	r3, r0, #1
 800167c:	4198      	sbcs	r0, r3
 800167e:	e000      	b.n	8001682 <__eqdf2+0x5a>
 8001680:	2001      	movs	r0, #1
 8001682:	bcf0      	pop	{r4, r5, r6, r7}
 8001684:	46bb      	mov	fp, r7
 8001686:	46b2      	mov	sl, r6
 8001688:	46a9      	mov	r9, r5
 800168a:	46a0      	mov	r8, r4
 800168c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168e:	0033      	movs	r3, r6
 8001690:	2001      	movs	r0, #1
 8001692:	432b      	orrs	r3, r5
 8001694:	d1f5      	bne.n	8001682 <__eqdf2+0x5a>
 8001696:	42a2      	cmp	r2, r4
 8001698:	d1f3      	bne.n	8001682 <__eqdf2+0x5a>
 800169a:	464b      	mov	r3, r9
 800169c:	433b      	orrs	r3, r7
 800169e:	d1f0      	bne.n	8001682 <__eqdf2+0x5a>
 80016a0:	e7e2      	b.n	8001668 <__eqdf2+0x40>
 80016a2:	2000      	movs	r0, #0
 80016a4:	e7ed      	b.n	8001682 <__eqdf2+0x5a>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	000007ff 	.word	0x000007ff

080016ac <__gedf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	4647      	mov	r7, r8
 80016b0:	46ce      	mov	lr, r9
 80016b2:	0004      	movs	r4, r0
 80016b4:	0018      	movs	r0, r3
 80016b6:	0016      	movs	r6, r2
 80016b8:	031b      	lsls	r3, r3, #12
 80016ba:	0b1b      	lsrs	r3, r3, #12
 80016bc:	4d2d      	ldr	r5, [pc, #180]	; (8001774 <__gedf2+0xc8>)
 80016be:	004a      	lsls	r2, r1, #1
 80016c0:	4699      	mov	r9, r3
 80016c2:	b580      	push	{r7, lr}
 80016c4:	0043      	lsls	r3, r0, #1
 80016c6:	030f      	lsls	r7, r1, #12
 80016c8:	46a4      	mov	ip, r4
 80016ca:	46b0      	mov	r8, r6
 80016cc:	0b3f      	lsrs	r7, r7, #12
 80016ce:	0d52      	lsrs	r2, r2, #21
 80016d0:	0fc9      	lsrs	r1, r1, #31
 80016d2:	0d5b      	lsrs	r3, r3, #21
 80016d4:	0fc0      	lsrs	r0, r0, #31
 80016d6:	42aa      	cmp	r2, r5
 80016d8:	d021      	beq.n	800171e <__gedf2+0x72>
 80016da:	42ab      	cmp	r3, r5
 80016dc:	d013      	beq.n	8001706 <__gedf2+0x5a>
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d122      	bne.n	8001728 <__gedf2+0x7c>
 80016e2:	433c      	orrs	r4, r7
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <__gedf2+0x42>
 80016e8:	464d      	mov	r5, r9
 80016ea:	432e      	orrs	r6, r5
 80016ec:	d022      	beq.n	8001734 <__gedf2+0x88>
 80016ee:	2c00      	cmp	r4, #0
 80016f0:	d010      	beq.n	8001714 <__gedf2+0x68>
 80016f2:	4281      	cmp	r1, r0
 80016f4:	d022      	beq.n	800173c <__gedf2+0x90>
 80016f6:	2002      	movs	r0, #2
 80016f8:	3901      	subs	r1, #1
 80016fa:	4008      	ands	r0, r1
 80016fc:	3801      	subs	r0, #1
 80016fe:	bcc0      	pop	{r6, r7}
 8001700:	46b9      	mov	r9, r7
 8001702:	46b0      	mov	r8, r6
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	464d      	mov	r5, r9
 8001708:	432e      	orrs	r6, r5
 800170a:	d129      	bne.n	8001760 <__gedf2+0xb4>
 800170c:	2a00      	cmp	r2, #0
 800170e:	d1f0      	bne.n	80016f2 <__gedf2+0x46>
 8001710:	433c      	orrs	r4, r7
 8001712:	d1ee      	bne.n	80016f2 <__gedf2+0x46>
 8001714:	2800      	cmp	r0, #0
 8001716:	d1f2      	bne.n	80016fe <__gedf2+0x52>
 8001718:	2001      	movs	r0, #1
 800171a:	4240      	negs	r0, r0
 800171c:	e7ef      	b.n	80016fe <__gedf2+0x52>
 800171e:	003d      	movs	r5, r7
 8001720:	4325      	orrs	r5, r4
 8001722:	d11d      	bne.n	8001760 <__gedf2+0xb4>
 8001724:	4293      	cmp	r3, r2
 8001726:	d0ee      	beq.n	8001706 <__gedf2+0x5a>
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1e2      	bne.n	80016f2 <__gedf2+0x46>
 800172c:	464c      	mov	r4, r9
 800172e:	4326      	orrs	r6, r4
 8001730:	d1df      	bne.n	80016f2 <__gedf2+0x46>
 8001732:	e7e0      	b.n	80016f6 <__gedf2+0x4a>
 8001734:	2000      	movs	r0, #0
 8001736:	2c00      	cmp	r4, #0
 8001738:	d0e1      	beq.n	80016fe <__gedf2+0x52>
 800173a:	e7dc      	b.n	80016f6 <__gedf2+0x4a>
 800173c:	429a      	cmp	r2, r3
 800173e:	dc0a      	bgt.n	8001756 <__gedf2+0xaa>
 8001740:	dbe8      	blt.n	8001714 <__gedf2+0x68>
 8001742:	454f      	cmp	r7, r9
 8001744:	d8d7      	bhi.n	80016f6 <__gedf2+0x4a>
 8001746:	d00e      	beq.n	8001766 <__gedf2+0xba>
 8001748:	2000      	movs	r0, #0
 800174a:	454f      	cmp	r7, r9
 800174c:	d2d7      	bcs.n	80016fe <__gedf2+0x52>
 800174e:	2900      	cmp	r1, #0
 8001750:	d0e2      	beq.n	8001718 <__gedf2+0x6c>
 8001752:	0008      	movs	r0, r1
 8001754:	e7d3      	b.n	80016fe <__gedf2+0x52>
 8001756:	4243      	negs	r3, r0
 8001758:	4158      	adcs	r0, r3
 800175a:	0040      	lsls	r0, r0, #1
 800175c:	3801      	subs	r0, #1
 800175e:	e7ce      	b.n	80016fe <__gedf2+0x52>
 8001760:	2002      	movs	r0, #2
 8001762:	4240      	negs	r0, r0
 8001764:	e7cb      	b.n	80016fe <__gedf2+0x52>
 8001766:	45c4      	cmp	ip, r8
 8001768:	d8c5      	bhi.n	80016f6 <__gedf2+0x4a>
 800176a:	2000      	movs	r0, #0
 800176c:	45c4      	cmp	ip, r8
 800176e:	d2c6      	bcs.n	80016fe <__gedf2+0x52>
 8001770:	e7ed      	b.n	800174e <__gedf2+0xa2>
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	000007ff 	.word	0x000007ff

08001778 <__ledf2>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	4647      	mov	r7, r8
 800177c:	46ce      	mov	lr, r9
 800177e:	0004      	movs	r4, r0
 8001780:	0018      	movs	r0, r3
 8001782:	0016      	movs	r6, r2
 8001784:	031b      	lsls	r3, r3, #12
 8001786:	0b1b      	lsrs	r3, r3, #12
 8001788:	4d2c      	ldr	r5, [pc, #176]	; (800183c <__ledf2+0xc4>)
 800178a:	004a      	lsls	r2, r1, #1
 800178c:	4699      	mov	r9, r3
 800178e:	b580      	push	{r7, lr}
 8001790:	0043      	lsls	r3, r0, #1
 8001792:	030f      	lsls	r7, r1, #12
 8001794:	46a4      	mov	ip, r4
 8001796:	46b0      	mov	r8, r6
 8001798:	0b3f      	lsrs	r7, r7, #12
 800179a:	0d52      	lsrs	r2, r2, #21
 800179c:	0fc9      	lsrs	r1, r1, #31
 800179e:	0d5b      	lsrs	r3, r3, #21
 80017a0:	0fc0      	lsrs	r0, r0, #31
 80017a2:	42aa      	cmp	r2, r5
 80017a4:	d00d      	beq.n	80017c2 <__ledf2+0x4a>
 80017a6:	42ab      	cmp	r3, r5
 80017a8:	d010      	beq.n	80017cc <__ledf2+0x54>
 80017aa:	2a00      	cmp	r2, #0
 80017ac:	d127      	bne.n	80017fe <__ledf2+0x86>
 80017ae:	433c      	orrs	r4, r7
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <__ledf2+0x60>
 80017b4:	464d      	mov	r5, r9
 80017b6:	432e      	orrs	r6, r5
 80017b8:	d10e      	bne.n	80017d8 <__ledf2+0x60>
 80017ba:	2000      	movs	r0, #0
 80017bc:	2c00      	cmp	r4, #0
 80017be:	d015      	beq.n	80017ec <__ledf2+0x74>
 80017c0:	e00e      	b.n	80017e0 <__ledf2+0x68>
 80017c2:	003d      	movs	r5, r7
 80017c4:	4325      	orrs	r5, r4
 80017c6:	d110      	bne.n	80017ea <__ledf2+0x72>
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d118      	bne.n	80017fe <__ledf2+0x86>
 80017cc:	464d      	mov	r5, r9
 80017ce:	432e      	orrs	r6, r5
 80017d0:	d10b      	bne.n	80017ea <__ledf2+0x72>
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d102      	bne.n	80017dc <__ledf2+0x64>
 80017d6:	433c      	orrs	r4, r7
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d00b      	beq.n	80017f4 <__ledf2+0x7c>
 80017dc:	4281      	cmp	r1, r0
 80017de:	d014      	beq.n	800180a <__ledf2+0x92>
 80017e0:	2002      	movs	r0, #2
 80017e2:	3901      	subs	r1, #1
 80017e4:	4008      	ands	r0, r1
 80017e6:	3801      	subs	r0, #1
 80017e8:	e000      	b.n	80017ec <__ledf2+0x74>
 80017ea:	2002      	movs	r0, #2
 80017ec:	bcc0      	pop	{r6, r7}
 80017ee:	46b9      	mov	r9, r7
 80017f0:	46b0      	mov	r8, r6
 80017f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1f9      	bne.n	80017ec <__ledf2+0x74>
 80017f8:	2001      	movs	r0, #1
 80017fa:	4240      	negs	r0, r0
 80017fc:	e7f6      	b.n	80017ec <__ledf2+0x74>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ec      	bne.n	80017dc <__ledf2+0x64>
 8001802:	464c      	mov	r4, r9
 8001804:	4326      	orrs	r6, r4
 8001806:	d1e9      	bne.n	80017dc <__ledf2+0x64>
 8001808:	e7ea      	b.n	80017e0 <__ledf2+0x68>
 800180a:	429a      	cmp	r2, r3
 800180c:	dd04      	ble.n	8001818 <__ledf2+0xa0>
 800180e:	4243      	negs	r3, r0
 8001810:	4158      	adcs	r0, r3
 8001812:	0040      	lsls	r0, r0, #1
 8001814:	3801      	subs	r0, #1
 8001816:	e7e9      	b.n	80017ec <__ledf2+0x74>
 8001818:	429a      	cmp	r2, r3
 800181a:	dbeb      	blt.n	80017f4 <__ledf2+0x7c>
 800181c:	454f      	cmp	r7, r9
 800181e:	d8df      	bhi.n	80017e0 <__ledf2+0x68>
 8001820:	d006      	beq.n	8001830 <__ledf2+0xb8>
 8001822:	2000      	movs	r0, #0
 8001824:	454f      	cmp	r7, r9
 8001826:	d2e1      	bcs.n	80017ec <__ledf2+0x74>
 8001828:	2900      	cmp	r1, #0
 800182a:	d0e5      	beq.n	80017f8 <__ledf2+0x80>
 800182c:	0008      	movs	r0, r1
 800182e:	e7dd      	b.n	80017ec <__ledf2+0x74>
 8001830:	45c4      	cmp	ip, r8
 8001832:	d8d5      	bhi.n	80017e0 <__ledf2+0x68>
 8001834:	2000      	movs	r0, #0
 8001836:	45c4      	cmp	ip, r8
 8001838:	d2d8      	bcs.n	80017ec <__ledf2+0x74>
 800183a:	e7f5      	b.n	8001828 <__ledf2+0xb0>
 800183c:	000007ff 	.word	0x000007ff

08001840 <__aeabi_dmul>:
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	4657      	mov	r7, sl
 8001844:	464e      	mov	r6, r9
 8001846:	4645      	mov	r5, r8
 8001848:	46de      	mov	lr, fp
 800184a:	b5e0      	push	{r5, r6, r7, lr}
 800184c:	4698      	mov	r8, r3
 800184e:	030c      	lsls	r4, r1, #12
 8001850:	004b      	lsls	r3, r1, #1
 8001852:	0006      	movs	r6, r0
 8001854:	4692      	mov	sl, r2
 8001856:	b087      	sub	sp, #28
 8001858:	0b24      	lsrs	r4, r4, #12
 800185a:	0d5b      	lsrs	r3, r3, #21
 800185c:	0fcf      	lsrs	r7, r1, #31
 800185e:	2b00      	cmp	r3, #0
 8001860:	d100      	bne.n	8001864 <__aeabi_dmul+0x24>
 8001862:	e15c      	b.n	8001b1e <__aeabi_dmul+0x2de>
 8001864:	4ad9      	ldr	r2, [pc, #868]	; (8001bcc <__aeabi_dmul+0x38c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d100      	bne.n	800186c <__aeabi_dmul+0x2c>
 800186a:	e175      	b.n	8001b58 <__aeabi_dmul+0x318>
 800186c:	0f42      	lsrs	r2, r0, #29
 800186e:	00e4      	lsls	r4, r4, #3
 8001870:	4314      	orrs	r4, r2
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	4314      	orrs	r4, r2
 8001878:	4ad5      	ldr	r2, [pc, #852]	; (8001bd0 <__aeabi_dmul+0x390>)
 800187a:	00c5      	lsls	r5, r0, #3
 800187c:	4694      	mov	ip, r2
 800187e:	4463      	add	r3, ip
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	4699      	mov	r9, r3
 8001886:	469b      	mov	fp, r3
 8001888:	4643      	mov	r3, r8
 800188a:	4642      	mov	r2, r8
 800188c:	031e      	lsls	r6, r3, #12
 800188e:	0fd2      	lsrs	r2, r2, #31
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4650      	mov	r0, sl
 8001894:	4690      	mov	r8, r2
 8001896:	0b36      	lsrs	r6, r6, #12
 8001898:	0d5b      	lsrs	r3, r3, #21
 800189a:	d100      	bne.n	800189e <__aeabi_dmul+0x5e>
 800189c:	e120      	b.n	8001ae0 <__aeabi_dmul+0x2a0>
 800189e:	4acb      	ldr	r2, [pc, #812]	; (8001bcc <__aeabi_dmul+0x38c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dmul+0x66>
 80018a4:	e162      	b.n	8001b6c <__aeabi_dmul+0x32c>
 80018a6:	49ca      	ldr	r1, [pc, #808]	; (8001bd0 <__aeabi_dmul+0x390>)
 80018a8:	0f42      	lsrs	r2, r0, #29
 80018aa:	468c      	mov	ip, r1
 80018ac:	9900      	ldr	r1, [sp, #0]
 80018ae:	4463      	add	r3, ip
 80018b0:	00f6      	lsls	r6, r6, #3
 80018b2:	468c      	mov	ip, r1
 80018b4:	4316      	orrs	r6, r2
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	449c      	add	ip, r3
 80018ba:	0412      	lsls	r2, r2, #16
 80018bc:	4663      	mov	r3, ip
 80018be:	4316      	orrs	r6, r2
 80018c0:	00c2      	lsls	r2, r0, #3
 80018c2:	2000      	movs	r0, #0
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	9900      	ldr	r1, [sp, #0]
 80018c8:	4643      	mov	r3, r8
 80018ca:	3101      	adds	r1, #1
 80018cc:	468c      	mov	ip, r1
 80018ce:	4649      	mov	r1, r9
 80018d0:	407b      	eors	r3, r7
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	290f      	cmp	r1, #15
 80018d6:	d826      	bhi.n	8001926 <__aeabi_dmul+0xe6>
 80018d8:	4bbe      	ldr	r3, [pc, #760]	; (8001bd4 <__aeabi_dmul+0x394>)
 80018da:	0089      	lsls	r1, r1, #2
 80018dc:	5859      	ldr	r1, [r3, r1]
 80018de:	468f      	mov	pc, r1
 80018e0:	4643      	mov	r3, r8
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	0034      	movs	r4, r6
 80018e6:	0015      	movs	r5, r2
 80018e8:	4683      	mov	fp, r0
 80018ea:	465b      	mov	r3, fp
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d016      	beq.n	800191e <__aeabi_dmul+0xde>
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dmul+0xb6>
 80018f4:	e203      	b.n	8001cfe <__aeabi_dmul+0x4be>
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d000      	beq.n	80018fc <__aeabi_dmul+0xbc>
 80018fa:	e0cd      	b.n	8001a98 <__aeabi_dmul+0x258>
 80018fc:	2200      	movs	r2, #0
 80018fe:	2400      	movs	r4, #0
 8001900:	2500      	movs	r5, #0
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	0512      	lsls	r2, r2, #20
 8001906:	4322      	orrs	r2, r4
 8001908:	07db      	lsls	r3, r3, #31
 800190a:	431a      	orrs	r2, r3
 800190c:	0028      	movs	r0, r5
 800190e:	0011      	movs	r1, r2
 8001910:	b007      	add	sp, #28
 8001912:	bcf0      	pop	{r4, r5, r6, r7}
 8001914:	46bb      	mov	fp, r7
 8001916:	46b2      	mov	sl, r6
 8001918:	46a9      	mov	r9, r5
 800191a:	46a0      	mov	r8, r4
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191e:	2400      	movs	r4, #0
 8001920:	2500      	movs	r5, #0
 8001922:	4aaa      	ldr	r2, [pc, #680]	; (8001bcc <__aeabi_dmul+0x38c>)
 8001924:	e7ed      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001926:	0c28      	lsrs	r0, r5, #16
 8001928:	042d      	lsls	r5, r5, #16
 800192a:	0c2d      	lsrs	r5, r5, #16
 800192c:	002b      	movs	r3, r5
 800192e:	0c11      	lsrs	r1, r2, #16
 8001930:	0412      	lsls	r2, r2, #16
 8001932:	0c12      	lsrs	r2, r2, #16
 8001934:	4353      	muls	r3, r2
 8001936:	4698      	mov	r8, r3
 8001938:	0013      	movs	r3, r2
 800193a:	002f      	movs	r7, r5
 800193c:	4343      	muls	r3, r0
 800193e:	4699      	mov	r9, r3
 8001940:	434f      	muls	r7, r1
 8001942:	444f      	add	r7, r9
 8001944:	46bb      	mov	fp, r7
 8001946:	4647      	mov	r7, r8
 8001948:	000b      	movs	r3, r1
 800194a:	0c3f      	lsrs	r7, r7, #16
 800194c:	46ba      	mov	sl, r7
 800194e:	4343      	muls	r3, r0
 8001950:	44da      	add	sl, fp
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	45d1      	cmp	r9, sl
 8001956:	d904      	bls.n	8001962 <__aeabi_dmul+0x122>
 8001958:	2780      	movs	r7, #128	; 0x80
 800195a:	027f      	lsls	r7, r7, #9
 800195c:	46b9      	mov	r9, r7
 800195e:	444b      	add	r3, r9
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	4653      	mov	r3, sl
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	469b      	mov	fp, r3
 8001968:	4653      	mov	r3, sl
 800196a:	041f      	lsls	r7, r3, #16
 800196c:	4643      	mov	r3, r8
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	4698      	mov	r8, r3
 8001974:	003b      	movs	r3, r7
 8001976:	4443      	add	r3, r8
 8001978:	9304      	str	r3, [sp, #16]
 800197a:	0c33      	lsrs	r3, r6, #16
 800197c:	0436      	lsls	r6, r6, #16
 800197e:	0c36      	lsrs	r6, r6, #16
 8001980:	4698      	mov	r8, r3
 8001982:	0033      	movs	r3, r6
 8001984:	4343      	muls	r3, r0
 8001986:	4699      	mov	r9, r3
 8001988:	4643      	mov	r3, r8
 800198a:	4343      	muls	r3, r0
 800198c:	002f      	movs	r7, r5
 800198e:	469a      	mov	sl, r3
 8001990:	4643      	mov	r3, r8
 8001992:	4377      	muls	r7, r6
 8001994:	435d      	muls	r5, r3
 8001996:	0c38      	lsrs	r0, r7, #16
 8001998:	444d      	add	r5, r9
 800199a:	1945      	adds	r5, r0, r5
 800199c:	45a9      	cmp	r9, r5
 800199e:	d903      	bls.n	80019a8 <__aeabi_dmul+0x168>
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	025b      	lsls	r3, r3, #9
 80019a4:	4699      	mov	r9, r3
 80019a6:	44ca      	add	sl, r9
 80019a8:	043f      	lsls	r7, r7, #16
 80019aa:	0c28      	lsrs	r0, r5, #16
 80019ac:	0c3f      	lsrs	r7, r7, #16
 80019ae:	042d      	lsls	r5, r5, #16
 80019b0:	19ed      	adds	r5, r5, r7
 80019b2:	0c27      	lsrs	r7, r4, #16
 80019b4:	0424      	lsls	r4, r4, #16
 80019b6:	0c24      	lsrs	r4, r4, #16
 80019b8:	0003      	movs	r3, r0
 80019ba:	0020      	movs	r0, r4
 80019bc:	4350      	muls	r0, r2
 80019be:	437a      	muls	r2, r7
 80019c0:	4691      	mov	r9, r2
 80019c2:	003a      	movs	r2, r7
 80019c4:	4453      	add	r3, sl
 80019c6:	9305      	str	r3, [sp, #20]
 80019c8:	0c03      	lsrs	r3, r0, #16
 80019ca:	469a      	mov	sl, r3
 80019cc:	434a      	muls	r2, r1
 80019ce:	4361      	muls	r1, r4
 80019d0:	4449      	add	r1, r9
 80019d2:	4451      	add	r1, sl
 80019d4:	44ab      	add	fp, r5
 80019d6:	4589      	cmp	r9, r1
 80019d8:	d903      	bls.n	80019e2 <__aeabi_dmul+0x1a2>
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	025b      	lsls	r3, r3, #9
 80019de:	4699      	mov	r9, r3
 80019e0:	444a      	add	r2, r9
 80019e2:	0400      	lsls	r0, r0, #16
 80019e4:	0c0b      	lsrs	r3, r1, #16
 80019e6:	0c00      	lsrs	r0, r0, #16
 80019e8:	0409      	lsls	r1, r1, #16
 80019ea:	1809      	adds	r1, r1, r0
 80019ec:	0020      	movs	r0, r4
 80019ee:	4699      	mov	r9, r3
 80019f0:	4643      	mov	r3, r8
 80019f2:	4370      	muls	r0, r6
 80019f4:	435c      	muls	r4, r3
 80019f6:	437e      	muls	r6, r7
 80019f8:	435f      	muls	r7, r3
 80019fa:	0c03      	lsrs	r3, r0, #16
 80019fc:	4698      	mov	r8, r3
 80019fe:	19a4      	adds	r4, r4, r6
 8001a00:	4444      	add	r4, r8
 8001a02:	444a      	add	r2, r9
 8001a04:	9703      	str	r7, [sp, #12]
 8001a06:	42a6      	cmp	r6, r4
 8001a08:	d904      	bls.n	8001a14 <__aeabi_dmul+0x1d4>
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	025b      	lsls	r3, r3, #9
 8001a0e:	4698      	mov	r8, r3
 8001a10:	4447      	add	r7, r8
 8001a12:	9703      	str	r7, [sp, #12]
 8001a14:	0423      	lsls	r3, r4, #16
 8001a16:	9e02      	ldr	r6, [sp, #8]
 8001a18:	469a      	mov	sl, r3
 8001a1a:	9b05      	ldr	r3, [sp, #20]
 8001a1c:	445e      	add	r6, fp
 8001a1e:	4698      	mov	r8, r3
 8001a20:	42ae      	cmp	r6, r5
 8001a22:	41ad      	sbcs	r5, r5
 8001a24:	1876      	adds	r6, r6, r1
 8001a26:	428e      	cmp	r6, r1
 8001a28:	4189      	sbcs	r1, r1
 8001a2a:	0400      	lsls	r0, r0, #16
 8001a2c:	0c00      	lsrs	r0, r0, #16
 8001a2e:	4450      	add	r0, sl
 8001a30:	4440      	add	r0, r8
 8001a32:	426d      	negs	r5, r5
 8001a34:	1947      	adds	r7, r0, r5
 8001a36:	46b8      	mov	r8, r7
 8001a38:	4693      	mov	fp, r2
 8001a3a:	4249      	negs	r1, r1
 8001a3c:	4689      	mov	r9, r1
 8001a3e:	44c3      	add	fp, r8
 8001a40:	44d9      	add	r9, fp
 8001a42:	4298      	cmp	r0, r3
 8001a44:	4180      	sbcs	r0, r0
 8001a46:	45a8      	cmp	r8, r5
 8001a48:	41ad      	sbcs	r5, r5
 8001a4a:	4593      	cmp	fp, r2
 8001a4c:	4192      	sbcs	r2, r2
 8001a4e:	4589      	cmp	r9, r1
 8001a50:	4189      	sbcs	r1, r1
 8001a52:	426d      	negs	r5, r5
 8001a54:	4240      	negs	r0, r0
 8001a56:	4328      	orrs	r0, r5
 8001a58:	0c24      	lsrs	r4, r4, #16
 8001a5a:	4252      	negs	r2, r2
 8001a5c:	4249      	negs	r1, r1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	9b03      	ldr	r3, [sp, #12]
 8001a62:	1900      	adds	r0, r0, r4
 8001a64:	1880      	adds	r0, r0, r2
 8001a66:	18c7      	adds	r7, r0, r3
 8001a68:	464b      	mov	r3, r9
 8001a6a:	0ddc      	lsrs	r4, r3, #23
 8001a6c:	9b04      	ldr	r3, [sp, #16]
 8001a6e:	0275      	lsls	r5, r6, #9
 8001a70:	431d      	orrs	r5, r3
 8001a72:	1e6a      	subs	r2, r5, #1
 8001a74:	4195      	sbcs	r5, r2
 8001a76:	464b      	mov	r3, r9
 8001a78:	0df6      	lsrs	r6, r6, #23
 8001a7a:	027f      	lsls	r7, r7, #9
 8001a7c:	4335      	orrs	r5, r6
 8001a7e:	025a      	lsls	r2, r3, #9
 8001a80:	433c      	orrs	r4, r7
 8001a82:	4315      	orrs	r5, r2
 8001a84:	01fb      	lsls	r3, r7, #7
 8001a86:	d400      	bmi.n	8001a8a <__aeabi_dmul+0x24a>
 8001a88:	e11c      	b.n	8001cc4 <__aeabi_dmul+0x484>
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	086a      	lsrs	r2, r5, #1
 8001a8e:	400d      	ands	r5, r1
 8001a90:	4315      	orrs	r5, r2
 8001a92:	07e2      	lsls	r2, r4, #31
 8001a94:	4315      	orrs	r5, r2
 8001a96:	0864      	lsrs	r4, r4, #1
 8001a98:	494f      	ldr	r1, [pc, #316]	; (8001bd8 <__aeabi_dmul+0x398>)
 8001a9a:	4461      	add	r1, ip
 8001a9c:	2900      	cmp	r1, #0
 8001a9e:	dc00      	bgt.n	8001aa2 <__aeabi_dmul+0x262>
 8001aa0:	e0b0      	b.n	8001c04 <__aeabi_dmul+0x3c4>
 8001aa2:	076b      	lsls	r3, r5, #29
 8001aa4:	d009      	beq.n	8001aba <__aeabi_dmul+0x27a>
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	402a      	ands	r2, r5
 8001aaa:	2a04      	cmp	r2, #4
 8001aac:	d005      	beq.n	8001aba <__aeabi_dmul+0x27a>
 8001aae:	1d2a      	adds	r2, r5, #4
 8001ab0:	42aa      	cmp	r2, r5
 8001ab2:	41ad      	sbcs	r5, r5
 8001ab4:	426d      	negs	r5, r5
 8001ab6:	1964      	adds	r4, r4, r5
 8001ab8:	0015      	movs	r5, r2
 8001aba:	01e3      	lsls	r3, r4, #7
 8001abc:	d504      	bpl.n	8001ac8 <__aeabi_dmul+0x288>
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <__aeabi_dmul+0x39c>)
 8001ac2:	00c9      	lsls	r1, r1, #3
 8001ac4:	4014      	ands	r4, r2
 8001ac6:	4461      	add	r1, ip
 8001ac8:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <__aeabi_dmul+0x3a0>)
 8001aca:	4291      	cmp	r1, r2
 8001acc:	dd00      	ble.n	8001ad0 <__aeabi_dmul+0x290>
 8001ace:	e726      	b.n	800191e <__aeabi_dmul+0xde>
 8001ad0:	0762      	lsls	r2, r4, #29
 8001ad2:	08ed      	lsrs	r5, r5, #3
 8001ad4:	0264      	lsls	r4, r4, #9
 8001ad6:	0549      	lsls	r1, r1, #21
 8001ad8:	4315      	orrs	r5, r2
 8001ada:	0b24      	lsrs	r4, r4, #12
 8001adc:	0d4a      	lsrs	r2, r1, #21
 8001ade:	e710      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001ae0:	4652      	mov	r2, sl
 8001ae2:	4332      	orrs	r2, r6
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dmul+0x2a8>
 8001ae6:	e07f      	b.n	8001be8 <__aeabi_dmul+0x3a8>
 8001ae8:	2e00      	cmp	r6, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dmul+0x2ae>
 8001aec:	e0dc      	b.n	8001ca8 <__aeabi_dmul+0x468>
 8001aee:	0030      	movs	r0, r6
 8001af0:	f000 fd96 	bl	8002620 <__clzsi2>
 8001af4:	0002      	movs	r2, r0
 8001af6:	3a0b      	subs	r2, #11
 8001af8:	231d      	movs	r3, #29
 8001afa:	0001      	movs	r1, r0
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	4652      	mov	r2, sl
 8001b00:	3908      	subs	r1, #8
 8001b02:	40da      	lsrs	r2, r3
 8001b04:	408e      	lsls	r6, r1
 8001b06:	4316      	orrs	r6, r2
 8001b08:	4652      	mov	r2, sl
 8001b0a:	408a      	lsls	r2, r1
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	4935      	ldr	r1, [pc, #212]	; (8001be4 <__aeabi_dmul+0x3a4>)
 8001b10:	1a18      	subs	r0, r3, r0
 8001b12:	0003      	movs	r3, r0
 8001b14:	468c      	mov	ip, r1
 8001b16:	4463      	add	r3, ip
 8001b18:	2000      	movs	r0, #0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	e6d3      	b.n	80018c6 <__aeabi_dmul+0x86>
 8001b1e:	0025      	movs	r5, r4
 8001b20:	4305      	orrs	r5, r0
 8001b22:	d04a      	beq.n	8001bba <__aeabi_dmul+0x37a>
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dmul+0x2ea>
 8001b28:	e0b0      	b.n	8001c8c <__aeabi_dmul+0x44c>
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	f000 fd78 	bl	8002620 <__clzsi2>
 8001b30:	0001      	movs	r1, r0
 8001b32:	0002      	movs	r2, r0
 8001b34:	390b      	subs	r1, #11
 8001b36:	231d      	movs	r3, #29
 8001b38:	0010      	movs	r0, r2
 8001b3a:	1a5b      	subs	r3, r3, r1
 8001b3c:	0031      	movs	r1, r6
 8001b3e:	0035      	movs	r5, r6
 8001b40:	3808      	subs	r0, #8
 8001b42:	4084      	lsls	r4, r0
 8001b44:	40d9      	lsrs	r1, r3
 8001b46:	4085      	lsls	r5, r0
 8001b48:	430c      	orrs	r4, r1
 8001b4a:	4826      	ldr	r0, [pc, #152]	; (8001be4 <__aeabi_dmul+0x3a4>)
 8001b4c:	1a83      	subs	r3, r0, r2
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2300      	movs	r3, #0
 8001b52:	4699      	mov	r9, r3
 8001b54:	469b      	mov	fp, r3
 8001b56:	e697      	b.n	8001888 <__aeabi_dmul+0x48>
 8001b58:	0005      	movs	r5, r0
 8001b5a:	4325      	orrs	r5, r4
 8001b5c:	d126      	bne.n	8001bac <__aeabi_dmul+0x36c>
 8001b5e:	2208      	movs	r2, #8
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2302      	movs	r3, #2
 8001b64:	2400      	movs	r4, #0
 8001b66:	4691      	mov	r9, r2
 8001b68:	469b      	mov	fp, r3
 8001b6a:	e68d      	b.n	8001888 <__aeabi_dmul+0x48>
 8001b6c:	4652      	mov	r2, sl
 8001b6e:	9b00      	ldr	r3, [sp, #0]
 8001b70:	4332      	orrs	r2, r6
 8001b72:	d110      	bne.n	8001b96 <__aeabi_dmul+0x356>
 8001b74:	4915      	ldr	r1, [pc, #84]	; (8001bcc <__aeabi_dmul+0x38c>)
 8001b76:	2600      	movs	r6, #0
 8001b78:	468c      	mov	ip, r1
 8001b7a:	4463      	add	r3, ip
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2302      	movs	r3, #2
 8001b82:	4319      	orrs	r1, r3
 8001b84:	4689      	mov	r9, r1
 8001b86:	2002      	movs	r0, #2
 8001b88:	e69d      	b.n	80018c6 <__aeabi_dmul+0x86>
 8001b8a:	465b      	mov	r3, fp
 8001b8c:	9701      	str	r7, [sp, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d000      	beq.n	8001b94 <__aeabi_dmul+0x354>
 8001b92:	e6ad      	b.n	80018f0 <__aeabi_dmul+0xb0>
 8001b94:	e6c3      	b.n	800191e <__aeabi_dmul+0xde>
 8001b96:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <__aeabi_dmul+0x38c>)
 8001b98:	2003      	movs	r0, #3
 8001b9a:	4694      	mov	ip, r2
 8001b9c:	4463      	add	r3, ip
 8001b9e:	464a      	mov	r2, r9
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	4691      	mov	r9, r2
 8001ba8:	4652      	mov	r2, sl
 8001baa:	e68c      	b.n	80018c6 <__aeabi_dmul+0x86>
 8001bac:	220c      	movs	r2, #12
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	0005      	movs	r5, r0
 8001bb4:	4691      	mov	r9, r2
 8001bb6:	469b      	mov	fp, r3
 8001bb8:	e666      	b.n	8001888 <__aeabi_dmul+0x48>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	469b      	mov	fp, r3
 8001bc8:	e65e      	b.n	8001888 <__aeabi_dmul+0x48>
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	000007ff 	.word	0x000007ff
 8001bd0:	fffffc01 	.word	0xfffffc01
 8001bd4:	08007b88 	.word	0x08007b88
 8001bd8:	000003ff 	.word	0x000003ff
 8001bdc:	feffffff 	.word	0xfeffffff
 8001be0:	000007fe 	.word	0x000007fe
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	4649      	mov	r1, r9
 8001bea:	2301      	movs	r3, #1
 8001bec:	4319      	orrs	r1, r3
 8001bee:	4689      	mov	r9, r1
 8001bf0:	2600      	movs	r6, #0
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	e667      	b.n	80018c6 <__aeabi_dmul+0x86>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2480      	movs	r4, #128	; 0x80
 8001bfa:	2500      	movs	r5, #0
 8001bfc:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <__aeabi_dmul+0x4cc>)
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	0324      	lsls	r4, r4, #12
 8001c02:	e67e      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001c04:	2001      	movs	r0, #1
 8001c06:	1a40      	subs	r0, r0, r1
 8001c08:	2838      	cmp	r0, #56	; 0x38
 8001c0a:	dd00      	ble.n	8001c0e <__aeabi_dmul+0x3ce>
 8001c0c:	e676      	b.n	80018fc <__aeabi_dmul+0xbc>
 8001c0e:	281f      	cmp	r0, #31
 8001c10:	dd5b      	ble.n	8001cca <__aeabi_dmul+0x48a>
 8001c12:	221f      	movs	r2, #31
 8001c14:	0023      	movs	r3, r4
 8001c16:	4252      	negs	r2, r2
 8001c18:	1a51      	subs	r1, r2, r1
 8001c1a:	40cb      	lsrs	r3, r1
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	2820      	cmp	r0, #32
 8001c20:	d003      	beq.n	8001c2a <__aeabi_dmul+0x3ea>
 8001c22:	4a3b      	ldr	r2, [pc, #236]	; (8001d10 <__aeabi_dmul+0x4d0>)
 8001c24:	4462      	add	r2, ip
 8001c26:	4094      	lsls	r4, r2
 8001c28:	4325      	orrs	r5, r4
 8001c2a:	1e6a      	subs	r2, r5, #1
 8001c2c:	4195      	sbcs	r5, r2
 8001c2e:	002a      	movs	r2, r5
 8001c30:	430a      	orrs	r2, r1
 8001c32:	2107      	movs	r1, #7
 8001c34:	000d      	movs	r5, r1
 8001c36:	2400      	movs	r4, #0
 8001c38:	4015      	ands	r5, r2
 8001c3a:	4211      	tst	r1, r2
 8001c3c:	d05b      	beq.n	8001cf6 <__aeabi_dmul+0x4b6>
 8001c3e:	210f      	movs	r1, #15
 8001c40:	2400      	movs	r4, #0
 8001c42:	4011      	ands	r1, r2
 8001c44:	2904      	cmp	r1, #4
 8001c46:	d053      	beq.n	8001cf0 <__aeabi_dmul+0x4b0>
 8001c48:	1d11      	adds	r1, r2, #4
 8001c4a:	4291      	cmp	r1, r2
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	4252      	negs	r2, r2
 8001c50:	18a4      	adds	r4, r4, r2
 8001c52:	000a      	movs	r2, r1
 8001c54:	0223      	lsls	r3, r4, #8
 8001c56:	d54b      	bpl.n	8001cf0 <__aeabi_dmul+0x4b0>
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	2500      	movs	r5, #0
 8001c5e:	e650      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	031b      	lsls	r3, r3, #12
 8001c64:	421c      	tst	r4, r3
 8001c66:	d009      	beq.n	8001c7c <__aeabi_dmul+0x43c>
 8001c68:	421e      	tst	r6, r3
 8001c6a:	d107      	bne.n	8001c7c <__aeabi_dmul+0x43c>
 8001c6c:	4333      	orrs	r3, r6
 8001c6e:	031c      	lsls	r4, r3, #12
 8001c70:	4643      	mov	r3, r8
 8001c72:	0015      	movs	r5, r2
 8001c74:	0b24      	lsrs	r4, r4, #12
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <__aeabi_dmul+0x4cc>)
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	e642      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	0312      	lsls	r2, r2, #12
 8001c80:	4314      	orrs	r4, r2
 8001c82:	0324      	lsls	r4, r4, #12
 8001c84:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <__aeabi_dmul+0x4cc>)
 8001c86:	0b24      	lsrs	r4, r4, #12
 8001c88:	9701      	str	r7, [sp, #4]
 8001c8a:	e63a      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001c8c:	f000 fcc8 	bl	8002620 <__clzsi2>
 8001c90:	0001      	movs	r1, r0
 8001c92:	0002      	movs	r2, r0
 8001c94:	3115      	adds	r1, #21
 8001c96:	3220      	adds	r2, #32
 8001c98:	291c      	cmp	r1, #28
 8001c9a:	dc00      	bgt.n	8001c9e <__aeabi_dmul+0x45e>
 8001c9c:	e74b      	b.n	8001b36 <__aeabi_dmul+0x2f6>
 8001c9e:	0034      	movs	r4, r6
 8001ca0:	3808      	subs	r0, #8
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	4084      	lsls	r4, r0
 8001ca6:	e750      	b.n	8001b4a <__aeabi_dmul+0x30a>
 8001ca8:	f000 fcba 	bl	8002620 <__clzsi2>
 8001cac:	0003      	movs	r3, r0
 8001cae:	001a      	movs	r2, r3
 8001cb0:	3215      	adds	r2, #21
 8001cb2:	3020      	adds	r0, #32
 8001cb4:	2a1c      	cmp	r2, #28
 8001cb6:	dc00      	bgt.n	8001cba <__aeabi_dmul+0x47a>
 8001cb8:	e71e      	b.n	8001af8 <__aeabi_dmul+0x2b8>
 8001cba:	4656      	mov	r6, sl
 8001cbc:	3b08      	subs	r3, #8
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	409e      	lsls	r6, r3
 8001cc2:	e723      	b.n	8001b0c <__aeabi_dmul+0x2cc>
 8001cc4:	9b00      	ldr	r3, [sp, #0]
 8001cc6:	469c      	mov	ip, r3
 8001cc8:	e6e6      	b.n	8001a98 <__aeabi_dmul+0x258>
 8001cca:	4912      	ldr	r1, [pc, #72]	; (8001d14 <__aeabi_dmul+0x4d4>)
 8001ccc:	0022      	movs	r2, r4
 8001cce:	4461      	add	r1, ip
 8001cd0:	002e      	movs	r6, r5
 8001cd2:	408d      	lsls	r5, r1
 8001cd4:	408a      	lsls	r2, r1
 8001cd6:	40c6      	lsrs	r6, r0
 8001cd8:	1e69      	subs	r1, r5, #1
 8001cda:	418d      	sbcs	r5, r1
 8001cdc:	4332      	orrs	r2, r6
 8001cde:	432a      	orrs	r2, r5
 8001ce0:	40c4      	lsrs	r4, r0
 8001ce2:	0753      	lsls	r3, r2, #29
 8001ce4:	d0b6      	beq.n	8001c54 <__aeabi_dmul+0x414>
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	4011      	ands	r1, r2
 8001cea:	2904      	cmp	r1, #4
 8001cec:	d1ac      	bne.n	8001c48 <__aeabi_dmul+0x408>
 8001cee:	e7b1      	b.n	8001c54 <__aeabi_dmul+0x414>
 8001cf0:	0765      	lsls	r5, r4, #29
 8001cf2:	0264      	lsls	r4, r4, #9
 8001cf4:	0b24      	lsrs	r4, r4, #12
 8001cf6:	08d2      	lsrs	r2, r2, #3
 8001cf8:	4315      	orrs	r5, r2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	e601      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	0312      	lsls	r2, r2, #12
 8001d02:	4314      	orrs	r4, r2
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	4a01      	ldr	r2, [pc, #4]	; (8001d0c <__aeabi_dmul+0x4cc>)
 8001d08:	0b24      	lsrs	r4, r4, #12
 8001d0a:	e5fa      	b.n	8001902 <__aeabi_dmul+0xc2>
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	0000043e 	.word	0x0000043e
 8001d14:	0000041e 	.word	0x0000041e

08001d18 <__aeabi_dsub>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	4657      	mov	r7, sl
 8001d1c:	464e      	mov	r6, r9
 8001d1e:	4645      	mov	r5, r8
 8001d20:	46de      	mov	lr, fp
 8001d22:	b5e0      	push	{r5, r6, r7, lr}
 8001d24:	001e      	movs	r6, r3
 8001d26:	0017      	movs	r7, r2
 8001d28:	004a      	lsls	r2, r1, #1
 8001d2a:	030b      	lsls	r3, r1, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	0a5b      	lsrs	r3, r3, #9
 8001d30:	4690      	mov	r8, r2
 8001d32:	0f42      	lsrs	r2, r0, #29
 8001d34:	431a      	orrs	r2, r3
 8001d36:	0fcd      	lsrs	r5, r1, #31
 8001d38:	4ccd      	ldr	r4, [pc, #820]	; (8002070 <__aeabi_dsub+0x358>)
 8001d3a:	0331      	lsls	r1, r6, #12
 8001d3c:	00c3      	lsls	r3, r0, #3
 8001d3e:	4694      	mov	ip, r2
 8001d40:	0070      	lsls	r0, r6, #1
 8001d42:	0f7a      	lsrs	r2, r7, #29
 8001d44:	0a49      	lsrs	r1, r1, #9
 8001d46:	00ff      	lsls	r7, r7, #3
 8001d48:	469a      	mov	sl, r3
 8001d4a:	46b9      	mov	r9, r7
 8001d4c:	0d40      	lsrs	r0, r0, #21
 8001d4e:	0ff6      	lsrs	r6, r6, #31
 8001d50:	4311      	orrs	r1, r2
 8001d52:	42a0      	cmp	r0, r4
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x40>
 8001d56:	e0b1      	b.n	8001ebc <__aeabi_dsub+0x1a4>
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4056      	eors	r6, r2
 8001d5c:	46b3      	mov	fp, r6
 8001d5e:	42b5      	cmp	r5, r6
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x4c>
 8001d62:	e088      	b.n	8001e76 <__aeabi_dsub+0x15e>
 8001d64:	4642      	mov	r2, r8
 8001d66:	1a12      	subs	r2, r2, r0
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	dc00      	bgt.n	8001d6e <__aeabi_dsub+0x56>
 8001d6c:	e0ae      	b.n	8001ecc <__aeabi_dsub+0x1b4>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x5c>
 8001d72:	e0c1      	b.n	8001ef8 <__aeabi_dsub+0x1e0>
 8001d74:	48be      	ldr	r0, [pc, #760]	; (8002070 <__aeabi_dsub+0x358>)
 8001d76:	4580      	cmp	r8, r0
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x64>
 8001d7a:	e151      	b.n	8002020 <__aeabi_dsub+0x308>
 8001d7c:	2080      	movs	r0, #128	; 0x80
 8001d7e:	0400      	lsls	r0, r0, #16
 8001d80:	4301      	orrs	r1, r0
 8001d82:	2a38      	cmp	r2, #56	; 0x38
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0x70>
 8001d86:	e17b      	b.n	8002080 <__aeabi_dsub+0x368>
 8001d88:	2a1f      	cmp	r2, #31
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dsub+0x76>
 8001d8c:	e1ee      	b.n	800216c <__aeabi_dsub+0x454>
 8001d8e:	2020      	movs	r0, #32
 8001d90:	003e      	movs	r6, r7
 8001d92:	1a80      	subs	r0, r0, r2
 8001d94:	000c      	movs	r4, r1
 8001d96:	40d6      	lsrs	r6, r2
 8001d98:	40d1      	lsrs	r1, r2
 8001d9a:	4087      	lsls	r7, r0
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	4084      	lsls	r4, r0
 8001da0:	1a52      	subs	r2, r2, r1
 8001da2:	1e78      	subs	r0, r7, #1
 8001da4:	4187      	sbcs	r7, r0
 8001da6:	4694      	mov	ip, r2
 8001da8:	4334      	orrs	r4, r6
 8001daa:	4327      	orrs	r7, r4
 8001dac:	1bdc      	subs	r4, r3, r7
 8001dae:	42a3      	cmp	r3, r4
 8001db0:	419b      	sbcs	r3, r3
 8001db2:	4662      	mov	r2, ip
 8001db4:	425b      	negs	r3, r3
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4699      	mov	r9, r3
 8001dba:	464b      	mov	r3, r9
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	d400      	bmi.n	8001dc2 <__aeabi_dsub+0xaa>
 8001dc0:	e118      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	0258      	lsls	r0, r3, #9
 8001dc6:	0a43      	lsrs	r3, r0, #9
 8001dc8:	4699      	mov	r9, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0xba>
 8001dd0:	e137      	b.n	8002042 <__aeabi_dsub+0x32a>
 8001dd2:	4648      	mov	r0, r9
 8001dd4:	f000 fc24 	bl	8002620 <__clzsi2>
 8001dd8:	0001      	movs	r1, r0
 8001dda:	3908      	subs	r1, #8
 8001ddc:	2320      	movs	r3, #32
 8001dde:	0022      	movs	r2, r4
 8001de0:	4648      	mov	r0, r9
 8001de2:	1a5b      	subs	r3, r3, r1
 8001de4:	40da      	lsrs	r2, r3
 8001de6:	4088      	lsls	r0, r1
 8001de8:	408c      	lsls	r4, r1
 8001dea:	4643      	mov	r3, r8
 8001dec:	4310      	orrs	r0, r2
 8001dee:	4588      	cmp	r8, r1
 8001df0:	dd00      	ble.n	8001df4 <__aeabi_dsub+0xdc>
 8001df2:	e136      	b.n	8002062 <__aeabi_dsub+0x34a>
 8001df4:	1ac9      	subs	r1, r1, r3
 8001df6:	1c4b      	adds	r3, r1, #1
 8001df8:	2b1f      	cmp	r3, #31
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dsub+0xe6>
 8001dfc:	e0ea      	b.n	8001fd4 <__aeabi_dsub+0x2bc>
 8001dfe:	2220      	movs	r2, #32
 8001e00:	0026      	movs	r6, r4
 8001e02:	1ad2      	subs	r2, r2, r3
 8001e04:	0001      	movs	r1, r0
 8001e06:	4094      	lsls	r4, r2
 8001e08:	40de      	lsrs	r6, r3
 8001e0a:	40d8      	lsrs	r0, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	4091      	lsls	r1, r2
 8001e10:	1e62      	subs	r2, r4, #1
 8001e12:	4194      	sbcs	r4, r2
 8001e14:	4681      	mov	r9, r0
 8001e16:	4698      	mov	r8, r3
 8001e18:	4331      	orrs	r1, r6
 8001e1a:	430c      	orrs	r4, r1
 8001e1c:	0763      	lsls	r3, r4, #29
 8001e1e:	d009      	beq.n	8001e34 <__aeabi_dsub+0x11c>
 8001e20:	230f      	movs	r3, #15
 8001e22:	4023      	ands	r3, r4
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d005      	beq.n	8001e34 <__aeabi_dsub+0x11c>
 8001e28:	1d23      	adds	r3, r4, #4
 8001e2a:	42a3      	cmp	r3, r4
 8001e2c:	41a4      	sbcs	r4, r4
 8001e2e:	4264      	negs	r4, r4
 8001e30:	44a1      	add	r9, r4
 8001e32:	001c      	movs	r4, r3
 8001e34:	464b      	mov	r3, r9
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	d400      	bmi.n	8001e3c <__aeabi_dsub+0x124>
 8001e3a:	e0de      	b.n	8001ffa <__aeabi_dsub+0x2e2>
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	4b8c      	ldr	r3, [pc, #560]	; (8002070 <__aeabi_dsub+0x358>)
 8001e40:	3101      	adds	r1, #1
 8001e42:	4299      	cmp	r1, r3
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x130>
 8001e46:	e0e7      	b.n	8002018 <__aeabi_dsub+0x300>
 8001e48:	464b      	mov	r3, r9
 8001e4a:	488a      	ldr	r0, [pc, #552]	; (8002074 <__aeabi_dsub+0x35c>)
 8001e4c:	08e4      	lsrs	r4, r4, #3
 8001e4e:	4003      	ands	r3, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0549      	lsls	r1, r1, #21
 8001e54:	075b      	lsls	r3, r3, #29
 8001e56:	0240      	lsls	r0, r0, #9
 8001e58:	4323      	orrs	r3, r4
 8001e5a:	0d4a      	lsrs	r2, r1, #21
 8001e5c:	0b04      	lsrs	r4, r0, #12
 8001e5e:	0512      	lsls	r2, r2, #20
 8001e60:	07ed      	lsls	r5, r5, #31
 8001e62:	4322      	orrs	r2, r4
 8001e64:	432a      	orrs	r2, r5
 8001e66:	0018      	movs	r0, r3
 8001e68:	0011      	movs	r1, r2
 8001e6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e6c:	46bb      	mov	fp, r7
 8001e6e:	46b2      	mov	sl, r6
 8001e70:	46a9      	mov	r9, r5
 8001e72:	46a0      	mov	r8, r4
 8001e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e76:	4642      	mov	r2, r8
 8001e78:	1a12      	subs	r2, r2, r0
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	dd52      	ble.n	8001f24 <__aeabi_dsub+0x20c>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x16c>
 8001e82:	e09c      	b.n	8001fbe <__aeabi_dsub+0x2a6>
 8001e84:	45a0      	cmp	r8, r4
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x172>
 8001e88:	e0ca      	b.n	8002020 <__aeabi_dsub+0x308>
 8001e8a:	2080      	movs	r0, #128	; 0x80
 8001e8c:	0400      	lsls	r0, r0, #16
 8001e8e:	4301      	orrs	r1, r0
 8001e90:	2a38      	cmp	r2, #56	; 0x38
 8001e92:	dd00      	ble.n	8001e96 <__aeabi_dsub+0x17e>
 8001e94:	e149      	b.n	800212a <__aeabi_dsub+0x412>
 8001e96:	2a1f      	cmp	r2, #31
 8001e98:	dc00      	bgt.n	8001e9c <__aeabi_dsub+0x184>
 8001e9a:	e197      	b.n	80021cc <__aeabi_dsub+0x4b4>
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	000e      	movs	r6, r1
 8001ea0:	3820      	subs	r0, #32
 8001ea2:	40c6      	lsrs	r6, r0
 8001ea4:	2a20      	cmp	r2, #32
 8001ea6:	d004      	beq.n	8001eb2 <__aeabi_dsub+0x19a>
 8001ea8:	2040      	movs	r0, #64	; 0x40
 8001eaa:	1a82      	subs	r2, r0, r2
 8001eac:	4091      	lsls	r1, r2
 8001eae:	430f      	orrs	r7, r1
 8001eb0:	46b9      	mov	r9, r7
 8001eb2:	464c      	mov	r4, r9
 8001eb4:	1e62      	subs	r2, r4, #1
 8001eb6:	4194      	sbcs	r4, r2
 8001eb8:	4334      	orrs	r4, r6
 8001eba:	e13a      	b.n	8002132 <__aeabi_dsub+0x41a>
 8001ebc:	000a      	movs	r2, r1
 8001ebe:	433a      	orrs	r2, r7
 8001ec0:	d028      	beq.n	8001f14 <__aeabi_dsub+0x1fc>
 8001ec2:	46b3      	mov	fp, r6
 8001ec4:	42b5      	cmp	r5, r6
 8001ec6:	d02b      	beq.n	8001f20 <__aeabi_dsub+0x208>
 8001ec8:	4a6b      	ldr	r2, [pc, #428]	; (8002078 <__aeabi_dsub+0x360>)
 8001eca:	4442      	add	r2, r8
 8001ecc:	2a00      	cmp	r2, #0
 8001ece:	d05d      	beq.n	8001f8c <__aeabi_dsub+0x274>
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	4644      	mov	r4, r8
 8001ed4:	1a82      	subs	r2, r0, r2
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dsub+0x1c4>
 8001eda:	e0f5      	b.n	80020c8 <__aeabi_dsub+0x3b0>
 8001edc:	4665      	mov	r5, ip
 8001ede:	431d      	orrs	r5, r3
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x1cc>
 8001ee2:	e19c      	b.n	800221e <__aeabi_dsub+0x506>
 8001ee4:	1e55      	subs	r5, r2, #1
 8001ee6:	2a01      	cmp	r2, #1
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x1d4>
 8001eea:	e1fb      	b.n	80022e4 <__aeabi_dsub+0x5cc>
 8001eec:	4c60      	ldr	r4, [pc, #384]	; (8002070 <__aeabi_dsub+0x358>)
 8001eee:	42a2      	cmp	r2, r4
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x1dc>
 8001ef2:	e1bd      	b.n	8002270 <__aeabi_dsub+0x558>
 8001ef4:	002a      	movs	r2, r5
 8001ef6:	e0f0      	b.n	80020da <__aeabi_dsub+0x3c2>
 8001ef8:	0008      	movs	r0, r1
 8001efa:	4338      	orrs	r0, r7
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x1e8>
 8001efe:	e0c3      	b.n	8002088 <__aeabi_dsub+0x370>
 8001f00:	1e50      	subs	r0, r2, #1
 8001f02:	2a01      	cmp	r2, #1
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x1f0>
 8001f06:	e1a8      	b.n	800225a <__aeabi_dsub+0x542>
 8001f08:	4c59      	ldr	r4, [pc, #356]	; (8002070 <__aeabi_dsub+0x358>)
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x1f8>
 8001f0e:	e087      	b.n	8002020 <__aeabi_dsub+0x308>
 8001f10:	0002      	movs	r2, r0
 8001f12:	e736      	b.n	8001d82 <__aeabi_dsub+0x6a>
 8001f14:	2201      	movs	r2, #1
 8001f16:	4056      	eors	r6, r2
 8001f18:	46b3      	mov	fp, r6
 8001f1a:	42b5      	cmp	r5, r6
 8001f1c:	d000      	beq.n	8001f20 <__aeabi_dsub+0x208>
 8001f1e:	e721      	b.n	8001d64 <__aeabi_dsub+0x4c>
 8001f20:	4a55      	ldr	r2, [pc, #340]	; (8002078 <__aeabi_dsub+0x360>)
 8001f22:	4442      	add	r2, r8
 8001f24:	2a00      	cmp	r2, #0
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x212>
 8001f28:	e0b5      	b.n	8002096 <__aeabi_dsub+0x37e>
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	4644      	mov	r4, r8
 8001f2e:	1a82      	subs	r2, r0, r2
 8001f30:	2c00      	cmp	r4, #0
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x21e>
 8001f34:	e138      	b.n	80021a8 <__aeabi_dsub+0x490>
 8001f36:	4e4e      	ldr	r6, [pc, #312]	; (8002070 <__aeabi_dsub+0x358>)
 8001f38:	42b0      	cmp	r0, r6
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x226>
 8001f3c:	e1de      	b.n	80022fc <__aeabi_dsub+0x5e4>
 8001f3e:	2680      	movs	r6, #128	; 0x80
 8001f40:	4664      	mov	r4, ip
 8001f42:	0436      	lsls	r6, r6, #16
 8001f44:	4334      	orrs	r4, r6
 8001f46:	46a4      	mov	ip, r4
 8001f48:	2a38      	cmp	r2, #56	; 0x38
 8001f4a:	dd00      	ble.n	8001f4e <__aeabi_dsub+0x236>
 8001f4c:	e196      	b.n	800227c <__aeabi_dsub+0x564>
 8001f4e:	2a1f      	cmp	r2, #31
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_dsub+0x23c>
 8001f52:	e224      	b.n	800239e <__aeabi_dsub+0x686>
 8001f54:	2620      	movs	r6, #32
 8001f56:	1ab4      	subs	r4, r6, r2
 8001f58:	46a2      	mov	sl, r4
 8001f5a:	4664      	mov	r4, ip
 8001f5c:	4656      	mov	r6, sl
 8001f5e:	40b4      	lsls	r4, r6
 8001f60:	46a1      	mov	r9, r4
 8001f62:	001c      	movs	r4, r3
 8001f64:	464e      	mov	r6, r9
 8001f66:	40d4      	lsrs	r4, r2
 8001f68:	4326      	orrs	r6, r4
 8001f6a:	0034      	movs	r4, r6
 8001f6c:	4656      	mov	r6, sl
 8001f6e:	40b3      	lsls	r3, r6
 8001f70:	1e5e      	subs	r6, r3, #1
 8001f72:	41b3      	sbcs	r3, r6
 8001f74:	431c      	orrs	r4, r3
 8001f76:	4663      	mov	r3, ip
 8001f78:	40d3      	lsrs	r3, r2
 8001f7a:	18c9      	adds	r1, r1, r3
 8001f7c:	19e4      	adds	r4, r4, r7
 8001f7e:	42bc      	cmp	r4, r7
 8001f80:	41bf      	sbcs	r7, r7
 8001f82:	427f      	negs	r7, r7
 8001f84:	46b9      	mov	r9, r7
 8001f86:	4680      	mov	r8, r0
 8001f88:	4489      	add	r9, r1
 8001f8a:	e0d8      	b.n	800213e <__aeabi_dsub+0x426>
 8001f8c:	4640      	mov	r0, r8
 8001f8e:	4c3b      	ldr	r4, [pc, #236]	; (800207c <__aeabi_dsub+0x364>)
 8001f90:	3001      	adds	r0, #1
 8001f92:	4220      	tst	r0, r4
 8001f94:	d000      	beq.n	8001f98 <__aeabi_dsub+0x280>
 8001f96:	e0b4      	b.n	8002102 <__aeabi_dsub+0x3ea>
 8001f98:	4640      	mov	r0, r8
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d000      	beq.n	8001fa0 <__aeabi_dsub+0x288>
 8001f9e:	e144      	b.n	800222a <__aeabi_dsub+0x512>
 8001fa0:	4660      	mov	r0, ip
 8001fa2:	4318      	orrs	r0, r3
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x290>
 8001fa6:	e190      	b.n	80022ca <__aeabi_dsub+0x5b2>
 8001fa8:	0008      	movs	r0, r1
 8001faa:	4338      	orrs	r0, r7
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x298>
 8001fae:	e1aa      	b.n	8002306 <__aeabi_dsub+0x5ee>
 8001fb0:	4661      	mov	r1, ip
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	0749      	lsls	r1, r1, #29
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	4661      	mov	r1, ip
 8001fba:	08cc      	lsrs	r4, r1, #3
 8001fbc:	e027      	b.n	800200e <__aeabi_dsub+0x2f6>
 8001fbe:	0008      	movs	r0, r1
 8001fc0:	4338      	orrs	r0, r7
 8001fc2:	d061      	beq.n	8002088 <__aeabi_dsub+0x370>
 8001fc4:	1e50      	subs	r0, r2, #1
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x2b4>
 8001fca:	e139      	b.n	8002240 <__aeabi_dsub+0x528>
 8001fcc:	42a2      	cmp	r2, r4
 8001fce:	d027      	beq.n	8002020 <__aeabi_dsub+0x308>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	e75d      	b.n	8001e90 <__aeabi_dsub+0x178>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	391f      	subs	r1, #31
 8001fd8:	40ca      	lsrs	r2, r1
 8001fda:	0011      	movs	r1, r2
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d003      	beq.n	8001fe8 <__aeabi_dsub+0x2d0>
 8001fe0:	2240      	movs	r2, #64	; 0x40
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4098      	lsls	r0, r3
 8001fe6:	4304      	orrs	r4, r0
 8001fe8:	1e63      	subs	r3, r4, #1
 8001fea:	419c      	sbcs	r4, r3
 8001fec:	2300      	movs	r3, #0
 8001fee:	4699      	mov	r9, r3
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	430c      	orrs	r4, r1
 8001ff4:	0763      	lsls	r3, r4, #29
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_dsub+0x2e2>
 8001ff8:	e712      	b.n	8001e20 <__aeabi_dsub+0x108>
 8001ffa:	464b      	mov	r3, r9
 8001ffc:	464a      	mov	r2, r9
 8001ffe:	08e4      	lsrs	r4, r4, #3
 8002000:	075b      	lsls	r3, r3, #29
 8002002:	4323      	orrs	r3, r4
 8002004:	08d4      	lsrs	r4, r2, #3
 8002006:	4642      	mov	r2, r8
 8002008:	4919      	ldr	r1, [pc, #100]	; (8002070 <__aeabi_dsub+0x358>)
 800200a:	428a      	cmp	r2, r1
 800200c:	d00e      	beq.n	800202c <__aeabi_dsub+0x314>
 800200e:	0324      	lsls	r4, r4, #12
 8002010:	0552      	lsls	r2, r2, #21
 8002012:	0b24      	lsrs	r4, r4, #12
 8002014:	0d52      	lsrs	r2, r2, #21
 8002016:	e722      	b.n	8001e5e <__aeabi_dsub+0x146>
 8002018:	000a      	movs	r2, r1
 800201a:	2400      	movs	r4, #0
 800201c:	2300      	movs	r3, #0
 800201e:	e71e      	b.n	8001e5e <__aeabi_dsub+0x146>
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	4662      	mov	r2, ip
 8002024:	0752      	lsls	r2, r2, #29
 8002026:	4313      	orrs	r3, r2
 8002028:	4662      	mov	r2, ip
 800202a:	08d4      	lsrs	r4, r2, #3
 800202c:	001a      	movs	r2, r3
 800202e:	4322      	orrs	r2, r4
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x31c>
 8002032:	e1fc      	b.n	800242e <__aeabi_dsub+0x716>
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	0312      	lsls	r2, r2, #12
 8002038:	4314      	orrs	r4, r2
 800203a:	0324      	lsls	r4, r4, #12
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <__aeabi_dsub+0x358>)
 800203e:	0b24      	lsrs	r4, r4, #12
 8002040:	e70d      	b.n	8001e5e <__aeabi_dsub+0x146>
 8002042:	0020      	movs	r0, r4
 8002044:	f000 faec 	bl	8002620 <__clzsi2>
 8002048:	0001      	movs	r1, r0
 800204a:	3118      	adds	r1, #24
 800204c:	291f      	cmp	r1, #31
 800204e:	dc00      	bgt.n	8002052 <__aeabi_dsub+0x33a>
 8002050:	e6c4      	b.n	8001ddc <__aeabi_dsub+0xc4>
 8002052:	3808      	subs	r0, #8
 8002054:	4084      	lsls	r4, r0
 8002056:	4643      	mov	r3, r8
 8002058:	0020      	movs	r0, r4
 800205a:	2400      	movs	r4, #0
 800205c:	4588      	cmp	r8, r1
 800205e:	dc00      	bgt.n	8002062 <__aeabi_dsub+0x34a>
 8002060:	e6c8      	b.n	8001df4 <__aeabi_dsub+0xdc>
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <__aeabi_dsub+0x35c>)
 8002064:	1a5b      	subs	r3, r3, r1
 8002066:	4010      	ands	r0, r2
 8002068:	4698      	mov	r8, r3
 800206a:	4681      	mov	r9, r0
 800206c:	e6d6      	b.n	8001e1c <__aeabi_dsub+0x104>
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	000007ff 	.word	0x000007ff
 8002074:	ff7fffff 	.word	0xff7fffff
 8002078:	fffff801 	.word	0xfffff801
 800207c:	000007fe 	.word	0x000007fe
 8002080:	430f      	orrs	r7, r1
 8002082:	1e7a      	subs	r2, r7, #1
 8002084:	4197      	sbcs	r7, r2
 8002086:	e691      	b.n	8001dac <__aeabi_dsub+0x94>
 8002088:	4661      	mov	r1, ip
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	0749      	lsls	r1, r1, #29
 800208e:	430b      	orrs	r3, r1
 8002090:	4661      	mov	r1, ip
 8002092:	08cc      	lsrs	r4, r1, #3
 8002094:	e7b8      	b.n	8002008 <__aeabi_dsub+0x2f0>
 8002096:	4640      	mov	r0, r8
 8002098:	4cd3      	ldr	r4, [pc, #844]	; (80023e8 <__aeabi_dsub+0x6d0>)
 800209a:	3001      	adds	r0, #1
 800209c:	4220      	tst	r0, r4
 800209e:	d000      	beq.n	80020a2 <__aeabi_dsub+0x38a>
 80020a0:	e0a2      	b.n	80021e8 <__aeabi_dsub+0x4d0>
 80020a2:	4640      	mov	r0, r8
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d000      	beq.n	80020aa <__aeabi_dsub+0x392>
 80020a8:	e101      	b.n	80022ae <__aeabi_dsub+0x596>
 80020aa:	4660      	mov	r0, ip
 80020ac:	4318      	orrs	r0, r3
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x39a>
 80020b0:	e15e      	b.n	8002370 <__aeabi_dsub+0x658>
 80020b2:	0008      	movs	r0, r1
 80020b4:	4338      	orrs	r0, r7
 80020b6:	d000      	beq.n	80020ba <__aeabi_dsub+0x3a2>
 80020b8:	e15f      	b.n	800237a <__aeabi_dsub+0x662>
 80020ba:	4661      	mov	r1, ip
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	0749      	lsls	r1, r1, #29
 80020c0:	430b      	orrs	r3, r1
 80020c2:	4661      	mov	r1, ip
 80020c4:	08cc      	lsrs	r4, r1, #3
 80020c6:	e7a2      	b.n	800200e <__aeabi_dsub+0x2f6>
 80020c8:	4dc8      	ldr	r5, [pc, #800]	; (80023ec <__aeabi_dsub+0x6d4>)
 80020ca:	42a8      	cmp	r0, r5
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x3b8>
 80020ce:	e0cf      	b.n	8002270 <__aeabi_dsub+0x558>
 80020d0:	2580      	movs	r5, #128	; 0x80
 80020d2:	4664      	mov	r4, ip
 80020d4:	042d      	lsls	r5, r5, #16
 80020d6:	432c      	orrs	r4, r5
 80020d8:	46a4      	mov	ip, r4
 80020da:	2a38      	cmp	r2, #56	; 0x38
 80020dc:	dc56      	bgt.n	800218c <__aeabi_dsub+0x474>
 80020de:	2a1f      	cmp	r2, #31
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dsub+0x3cc>
 80020e2:	e0d1      	b.n	8002288 <__aeabi_dsub+0x570>
 80020e4:	2520      	movs	r5, #32
 80020e6:	001e      	movs	r6, r3
 80020e8:	1aad      	subs	r5, r5, r2
 80020ea:	4664      	mov	r4, ip
 80020ec:	40ab      	lsls	r3, r5
 80020ee:	40ac      	lsls	r4, r5
 80020f0:	40d6      	lsrs	r6, r2
 80020f2:	1e5d      	subs	r5, r3, #1
 80020f4:	41ab      	sbcs	r3, r5
 80020f6:	4334      	orrs	r4, r6
 80020f8:	4323      	orrs	r3, r4
 80020fa:	4664      	mov	r4, ip
 80020fc:	40d4      	lsrs	r4, r2
 80020fe:	1b09      	subs	r1, r1, r4
 8002100:	e049      	b.n	8002196 <__aeabi_dsub+0x47e>
 8002102:	4660      	mov	r0, ip
 8002104:	1bdc      	subs	r4, r3, r7
 8002106:	1a46      	subs	r6, r0, r1
 8002108:	42a3      	cmp	r3, r4
 800210a:	4180      	sbcs	r0, r0
 800210c:	4240      	negs	r0, r0
 800210e:	4681      	mov	r9, r0
 8002110:	0030      	movs	r0, r6
 8002112:	464e      	mov	r6, r9
 8002114:	1b80      	subs	r0, r0, r6
 8002116:	4681      	mov	r9, r0
 8002118:	0200      	lsls	r0, r0, #8
 800211a:	d476      	bmi.n	800220a <__aeabi_dsub+0x4f2>
 800211c:	464b      	mov	r3, r9
 800211e:	4323      	orrs	r3, r4
 8002120:	d000      	beq.n	8002124 <__aeabi_dsub+0x40c>
 8002122:	e652      	b.n	8001dca <__aeabi_dsub+0xb2>
 8002124:	2400      	movs	r4, #0
 8002126:	2500      	movs	r5, #0
 8002128:	e771      	b.n	800200e <__aeabi_dsub+0x2f6>
 800212a:	4339      	orrs	r1, r7
 800212c:	000c      	movs	r4, r1
 800212e:	1e62      	subs	r2, r4, #1
 8002130:	4194      	sbcs	r4, r2
 8002132:	18e4      	adds	r4, r4, r3
 8002134:	429c      	cmp	r4, r3
 8002136:	419b      	sbcs	r3, r3
 8002138:	425b      	negs	r3, r3
 800213a:	4463      	add	r3, ip
 800213c:	4699      	mov	r9, r3
 800213e:	464b      	mov	r3, r9
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	d400      	bmi.n	8002146 <__aeabi_dsub+0x42e>
 8002144:	e756      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 8002146:	2301      	movs	r3, #1
 8002148:	469c      	mov	ip, r3
 800214a:	4ba8      	ldr	r3, [pc, #672]	; (80023ec <__aeabi_dsub+0x6d4>)
 800214c:	44e0      	add	r8, ip
 800214e:	4598      	cmp	r8, r3
 8002150:	d038      	beq.n	80021c4 <__aeabi_dsub+0x4ac>
 8002152:	464b      	mov	r3, r9
 8002154:	48a6      	ldr	r0, [pc, #664]	; (80023f0 <__aeabi_dsub+0x6d8>)
 8002156:	2201      	movs	r2, #1
 8002158:	4003      	ands	r3, r0
 800215a:	0018      	movs	r0, r3
 800215c:	0863      	lsrs	r3, r4, #1
 800215e:	4014      	ands	r4, r2
 8002160:	431c      	orrs	r4, r3
 8002162:	07c3      	lsls	r3, r0, #31
 8002164:	431c      	orrs	r4, r3
 8002166:	0843      	lsrs	r3, r0, #1
 8002168:	4699      	mov	r9, r3
 800216a:	e657      	b.n	8001e1c <__aeabi_dsub+0x104>
 800216c:	0010      	movs	r0, r2
 800216e:	000e      	movs	r6, r1
 8002170:	3820      	subs	r0, #32
 8002172:	40c6      	lsrs	r6, r0
 8002174:	2a20      	cmp	r2, #32
 8002176:	d004      	beq.n	8002182 <__aeabi_dsub+0x46a>
 8002178:	2040      	movs	r0, #64	; 0x40
 800217a:	1a82      	subs	r2, r0, r2
 800217c:	4091      	lsls	r1, r2
 800217e:	430f      	orrs	r7, r1
 8002180:	46b9      	mov	r9, r7
 8002182:	464f      	mov	r7, r9
 8002184:	1e7a      	subs	r2, r7, #1
 8002186:	4197      	sbcs	r7, r2
 8002188:	4337      	orrs	r7, r6
 800218a:	e60f      	b.n	8001dac <__aeabi_dsub+0x94>
 800218c:	4662      	mov	r2, ip
 800218e:	431a      	orrs	r2, r3
 8002190:	0013      	movs	r3, r2
 8002192:	1e5a      	subs	r2, r3, #1
 8002194:	4193      	sbcs	r3, r2
 8002196:	1afc      	subs	r4, r7, r3
 8002198:	42a7      	cmp	r7, r4
 800219a:	41bf      	sbcs	r7, r7
 800219c:	427f      	negs	r7, r7
 800219e:	1bcb      	subs	r3, r1, r7
 80021a0:	4699      	mov	r9, r3
 80021a2:	465d      	mov	r5, fp
 80021a4:	4680      	mov	r8, r0
 80021a6:	e608      	b.n	8001dba <__aeabi_dsub+0xa2>
 80021a8:	4666      	mov	r6, ip
 80021aa:	431e      	orrs	r6, r3
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x498>
 80021ae:	e0be      	b.n	800232e <__aeabi_dsub+0x616>
 80021b0:	1e56      	subs	r6, r2, #1
 80021b2:	2a01      	cmp	r2, #1
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x4a0>
 80021b6:	e109      	b.n	80023cc <__aeabi_dsub+0x6b4>
 80021b8:	4c8c      	ldr	r4, [pc, #560]	; (80023ec <__aeabi_dsub+0x6d4>)
 80021ba:	42a2      	cmp	r2, r4
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x4a8>
 80021be:	e119      	b.n	80023f4 <__aeabi_dsub+0x6dc>
 80021c0:	0032      	movs	r2, r6
 80021c2:	e6c1      	b.n	8001f48 <__aeabi_dsub+0x230>
 80021c4:	4642      	mov	r2, r8
 80021c6:	2400      	movs	r4, #0
 80021c8:	2300      	movs	r3, #0
 80021ca:	e648      	b.n	8001e5e <__aeabi_dsub+0x146>
 80021cc:	2020      	movs	r0, #32
 80021ce:	000c      	movs	r4, r1
 80021d0:	1a80      	subs	r0, r0, r2
 80021d2:	003e      	movs	r6, r7
 80021d4:	4087      	lsls	r7, r0
 80021d6:	4084      	lsls	r4, r0
 80021d8:	40d6      	lsrs	r6, r2
 80021da:	1e78      	subs	r0, r7, #1
 80021dc:	4187      	sbcs	r7, r0
 80021de:	40d1      	lsrs	r1, r2
 80021e0:	4334      	orrs	r4, r6
 80021e2:	433c      	orrs	r4, r7
 80021e4:	448c      	add	ip, r1
 80021e6:	e7a4      	b.n	8002132 <__aeabi_dsub+0x41a>
 80021e8:	4a80      	ldr	r2, [pc, #512]	; (80023ec <__aeabi_dsub+0x6d4>)
 80021ea:	4290      	cmp	r0, r2
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x4d8>
 80021ee:	e0e9      	b.n	80023c4 <__aeabi_dsub+0x6ac>
 80021f0:	19df      	adds	r7, r3, r7
 80021f2:	429f      	cmp	r7, r3
 80021f4:	419b      	sbcs	r3, r3
 80021f6:	4461      	add	r1, ip
 80021f8:	425b      	negs	r3, r3
 80021fa:	18c9      	adds	r1, r1, r3
 80021fc:	07cc      	lsls	r4, r1, #31
 80021fe:	087f      	lsrs	r7, r7, #1
 8002200:	084b      	lsrs	r3, r1, #1
 8002202:	4699      	mov	r9, r3
 8002204:	4680      	mov	r8, r0
 8002206:	433c      	orrs	r4, r7
 8002208:	e6f4      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 800220a:	1afc      	subs	r4, r7, r3
 800220c:	42a7      	cmp	r7, r4
 800220e:	41bf      	sbcs	r7, r7
 8002210:	4663      	mov	r3, ip
 8002212:	427f      	negs	r7, r7
 8002214:	1ac9      	subs	r1, r1, r3
 8002216:	1bcb      	subs	r3, r1, r7
 8002218:	4699      	mov	r9, r3
 800221a:	465d      	mov	r5, fp
 800221c:	e5d5      	b.n	8001dca <__aeabi_dsub+0xb2>
 800221e:	08ff      	lsrs	r7, r7, #3
 8002220:	074b      	lsls	r3, r1, #29
 8002222:	465d      	mov	r5, fp
 8002224:	433b      	orrs	r3, r7
 8002226:	08cc      	lsrs	r4, r1, #3
 8002228:	e6ee      	b.n	8002008 <__aeabi_dsub+0x2f0>
 800222a:	4662      	mov	r2, ip
 800222c:	431a      	orrs	r2, r3
 800222e:	d000      	beq.n	8002232 <__aeabi_dsub+0x51a>
 8002230:	e082      	b.n	8002338 <__aeabi_dsub+0x620>
 8002232:	000b      	movs	r3, r1
 8002234:	433b      	orrs	r3, r7
 8002236:	d11b      	bne.n	8002270 <__aeabi_dsub+0x558>
 8002238:	2480      	movs	r4, #128	; 0x80
 800223a:	2500      	movs	r5, #0
 800223c:	0324      	lsls	r4, r4, #12
 800223e:	e6f9      	b.n	8002034 <__aeabi_dsub+0x31c>
 8002240:	19dc      	adds	r4, r3, r7
 8002242:	429c      	cmp	r4, r3
 8002244:	419b      	sbcs	r3, r3
 8002246:	4461      	add	r1, ip
 8002248:	4689      	mov	r9, r1
 800224a:	425b      	negs	r3, r3
 800224c:	4499      	add	r9, r3
 800224e:	464b      	mov	r3, r9
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	d444      	bmi.n	80022de <__aeabi_dsub+0x5c6>
 8002254:	2301      	movs	r3, #1
 8002256:	4698      	mov	r8, r3
 8002258:	e6cc      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 800225a:	1bdc      	subs	r4, r3, r7
 800225c:	4662      	mov	r2, ip
 800225e:	42a3      	cmp	r3, r4
 8002260:	419b      	sbcs	r3, r3
 8002262:	1a51      	subs	r1, r2, r1
 8002264:	425b      	negs	r3, r3
 8002266:	1acb      	subs	r3, r1, r3
 8002268:	4699      	mov	r9, r3
 800226a:	2301      	movs	r3, #1
 800226c:	4698      	mov	r8, r3
 800226e:	e5a4      	b.n	8001dba <__aeabi_dsub+0xa2>
 8002270:	08ff      	lsrs	r7, r7, #3
 8002272:	074b      	lsls	r3, r1, #29
 8002274:	465d      	mov	r5, fp
 8002276:	433b      	orrs	r3, r7
 8002278:	08cc      	lsrs	r4, r1, #3
 800227a:	e6d7      	b.n	800202c <__aeabi_dsub+0x314>
 800227c:	4662      	mov	r2, ip
 800227e:	431a      	orrs	r2, r3
 8002280:	0014      	movs	r4, r2
 8002282:	1e63      	subs	r3, r4, #1
 8002284:	419c      	sbcs	r4, r3
 8002286:	e679      	b.n	8001f7c <__aeabi_dsub+0x264>
 8002288:	0015      	movs	r5, r2
 800228a:	4664      	mov	r4, ip
 800228c:	3d20      	subs	r5, #32
 800228e:	40ec      	lsrs	r4, r5
 8002290:	46a0      	mov	r8, r4
 8002292:	2a20      	cmp	r2, #32
 8002294:	d005      	beq.n	80022a2 <__aeabi_dsub+0x58a>
 8002296:	2540      	movs	r5, #64	; 0x40
 8002298:	4664      	mov	r4, ip
 800229a:	1aaa      	subs	r2, r5, r2
 800229c:	4094      	lsls	r4, r2
 800229e:	4323      	orrs	r3, r4
 80022a0:	469a      	mov	sl, r3
 80022a2:	4654      	mov	r4, sl
 80022a4:	1e63      	subs	r3, r4, #1
 80022a6:	419c      	sbcs	r4, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	4323      	orrs	r3, r4
 80022ac:	e773      	b.n	8002196 <__aeabi_dsub+0x47e>
 80022ae:	4662      	mov	r2, ip
 80022b0:	431a      	orrs	r2, r3
 80022b2:	d023      	beq.n	80022fc <__aeabi_dsub+0x5e4>
 80022b4:	000a      	movs	r2, r1
 80022b6:	433a      	orrs	r2, r7
 80022b8:	d000      	beq.n	80022bc <__aeabi_dsub+0x5a4>
 80022ba:	e0a0      	b.n	80023fe <__aeabi_dsub+0x6e6>
 80022bc:	4662      	mov	r2, ip
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	0752      	lsls	r2, r2, #29
 80022c2:	4313      	orrs	r3, r2
 80022c4:	4662      	mov	r2, ip
 80022c6:	08d4      	lsrs	r4, r2, #3
 80022c8:	e6b0      	b.n	800202c <__aeabi_dsub+0x314>
 80022ca:	000b      	movs	r3, r1
 80022cc:	433b      	orrs	r3, r7
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x5ba>
 80022d0:	e728      	b.n	8002124 <__aeabi_dsub+0x40c>
 80022d2:	08ff      	lsrs	r7, r7, #3
 80022d4:	074b      	lsls	r3, r1, #29
 80022d6:	465d      	mov	r5, fp
 80022d8:	433b      	orrs	r3, r7
 80022da:	08cc      	lsrs	r4, r1, #3
 80022dc:	e697      	b.n	800200e <__aeabi_dsub+0x2f6>
 80022de:	2302      	movs	r3, #2
 80022e0:	4698      	mov	r8, r3
 80022e2:	e736      	b.n	8002152 <__aeabi_dsub+0x43a>
 80022e4:	1afc      	subs	r4, r7, r3
 80022e6:	42a7      	cmp	r7, r4
 80022e8:	41bf      	sbcs	r7, r7
 80022ea:	4663      	mov	r3, ip
 80022ec:	427f      	negs	r7, r7
 80022ee:	1ac9      	subs	r1, r1, r3
 80022f0:	1bcb      	subs	r3, r1, r7
 80022f2:	4699      	mov	r9, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	465d      	mov	r5, fp
 80022f8:	4698      	mov	r8, r3
 80022fa:	e55e      	b.n	8001dba <__aeabi_dsub+0xa2>
 80022fc:	074b      	lsls	r3, r1, #29
 80022fe:	08ff      	lsrs	r7, r7, #3
 8002300:	433b      	orrs	r3, r7
 8002302:	08cc      	lsrs	r4, r1, #3
 8002304:	e692      	b.n	800202c <__aeabi_dsub+0x314>
 8002306:	1bdc      	subs	r4, r3, r7
 8002308:	4660      	mov	r0, ip
 800230a:	42a3      	cmp	r3, r4
 800230c:	41b6      	sbcs	r6, r6
 800230e:	1a40      	subs	r0, r0, r1
 8002310:	4276      	negs	r6, r6
 8002312:	1b80      	subs	r0, r0, r6
 8002314:	4681      	mov	r9, r0
 8002316:	0200      	lsls	r0, r0, #8
 8002318:	d560      	bpl.n	80023dc <__aeabi_dsub+0x6c4>
 800231a:	1afc      	subs	r4, r7, r3
 800231c:	42a7      	cmp	r7, r4
 800231e:	41bf      	sbcs	r7, r7
 8002320:	4663      	mov	r3, ip
 8002322:	427f      	negs	r7, r7
 8002324:	1ac9      	subs	r1, r1, r3
 8002326:	1bcb      	subs	r3, r1, r7
 8002328:	4699      	mov	r9, r3
 800232a:	465d      	mov	r5, fp
 800232c:	e576      	b.n	8001e1c <__aeabi_dsub+0x104>
 800232e:	08ff      	lsrs	r7, r7, #3
 8002330:	074b      	lsls	r3, r1, #29
 8002332:	433b      	orrs	r3, r7
 8002334:	08cc      	lsrs	r4, r1, #3
 8002336:	e667      	b.n	8002008 <__aeabi_dsub+0x2f0>
 8002338:	000a      	movs	r2, r1
 800233a:	08db      	lsrs	r3, r3, #3
 800233c:	433a      	orrs	r2, r7
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x62a>
 8002340:	e66f      	b.n	8002022 <__aeabi_dsub+0x30a>
 8002342:	4662      	mov	r2, ip
 8002344:	0752      	lsls	r2, r2, #29
 8002346:	4313      	orrs	r3, r2
 8002348:	4662      	mov	r2, ip
 800234a:	08d4      	lsrs	r4, r2, #3
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	0312      	lsls	r2, r2, #12
 8002350:	4214      	tst	r4, r2
 8002352:	d007      	beq.n	8002364 <__aeabi_dsub+0x64c>
 8002354:	08c8      	lsrs	r0, r1, #3
 8002356:	4210      	tst	r0, r2
 8002358:	d104      	bne.n	8002364 <__aeabi_dsub+0x64c>
 800235a:	465d      	mov	r5, fp
 800235c:	0004      	movs	r4, r0
 800235e:	08fb      	lsrs	r3, r7, #3
 8002360:	0749      	lsls	r1, r1, #29
 8002362:	430b      	orrs	r3, r1
 8002364:	0f5a      	lsrs	r2, r3, #29
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	08db      	lsrs	r3, r3, #3
 800236a:	0752      	lsls	r2, r2, #29
 800236c:	4313      	orrs	r3, r2
 800236e:	e65d      	b.n	800202c <__aeabi_dsub+0x314>
 8002370:	074b      	lsls	r3, r1, #29
 8002372:	08ff      	lsrs	r7, r7, #3
 8002374:	433b      	orrs	r3, r7
 8002376:	08cc      	lsrs	r4, r1, #3
 8002378:	e649      	b.n	800200e <__aeabi_dsub+0x2f6>
 800237a:	19dc      	adds	r4, r3, r7
 800237c:	429c      	cmp	r4, r3
 800237e:	419b      	sbcs	r3, r3
 8002380:	4461      	add	r1, ip
 8002382:	4689      	mov	r9, r1
 8002384:	425b      	negs	r3, r3
 8002386:	4499      	add	r9, r3
 8002388:	464b      	mov	r3, r9
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	d400      	bmi.n	8002390 <__aeabi_dsub+0x678>
 800238e:	e631      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 8002390:	464a      	mov	r2, r9
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <__aeabi_dsub+0x6d8>)
 8002394:	401a      	ands	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	4691      	mov	r9, r2
 800239a:	4698      	mov	r8, r3
 800239c:	e62a      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 800239e:	0016      	movs	r6, r2
 80023a0:	4664      	mov	r4, ip
 80023a2:	3e20      	subs	r6, #32
 80023a4:	40f4      	lsrs	r4, r6
 80023a6:	46a0      	mov	r8, r4
 80023a8:	2a20      	cmp	r2, #32
 80023aa:	d005      	beq.n	80023b8 <__aeabi_dsub+0x6a0>
 80023ac:	2640      	movs	r6, #64	; 0x40
 80023ae:	4664      	mov	r4, ip
 80023b0:	1ab2      	subs	r2, r6, r2
 80023b2:	4094      	lsls	r4, r2
 80023b4:	4323      	orrs	r3, r4
 80023b6:	469a      	mov	sl, r3
 80023b8:	4654      	mov	r4, sl
 80023ba:	1e63      	subs	r3, r4, #1
 80023bc:	419c      	sbcs	r4, r3
 80023be:	4643      	mov	r3, r8
 80023c0:	431c      	orrs	r4, r3
 80023c2:	e5db      	b.n	8001f7c <__aeabi_dsub+0x264>
 80023c4:	0002      	movs	r2, r0
 80023c6:	2400      	movs	r4, #0
 80023c8:	2300      	movs	r3, #0
 80023ca:	e548      	b.n	8001e5e <__aeabi_dsub+0x146>
 80023cc:	19dc      	adds	r4, r3, r7
 80023ce:	42bc      	cmp	r4, r7
 80023d0:	41bf      	sbcs	r7, r7
 80023d2:	4461      	add	r1, ip
 80023d4:	4689      	mov	r9, r1
 80023d6:	427f      	negs	r7, r7
 80023d8:	44b9      	add	r9, r7
 80023da:	e738      	b.n	800224e <__aeabi_dsub+0x536>
 80023dc:	464b      	mov	r3, r9
 80023de:	4323      	orrs	r3, r4
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x6cc>
 80023e2:	e69f      	b.n	8002124 <__aeabi_dsub+0x40c>
 80023e4:	e606      	b.n	8001ff4 <__aeabi_dsub+0x2dc>
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	000007fe 	.word	0x000007fe
 80023ec:	000007ff 	.word	0x000007ff
 80023f0:	ff7fffff 	.word	0xff7fffff
 80023f4:	08ff      	lsrs	r7, r7, #3
 80023f6:	074b      	lsls	r3, r1, #29
 80023f8:	433b      	orrs	r3, r7
 80023fa:	08cc      	lsrs	r4, r1, #3
 80023fc:	e616      	b.n	800202c <__aeabi_dsub+0x314>
 80023fe:	4662      	mov	r2, ip
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	0752      	lsls	r2, r2, #29
 8002404:	4313      	orrs	r3, r2
 8002406:	4662      	mov	r2, ip
 8002408:	08d4      	lsrs	r4, r2, #3
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	0312      	lsls	r2, r2, #12
 800240e:	4214      	tst	r4, r2
 8002410:	d007      	beq.n	8002422 <__aeabi_dsub+0x70a>
 8002412:	08c8      	lsrs	r0, r1, #3
 8002414:	4210      	tst	r0, r2
 8002416:	d104      	bne.n	8002422 <__aeabi_dsub+0x70a>
 8002418:	465d      	mov	r5, fp
 800241a:	0004      	movs	r4, r0
 800241c:	08fb      	lsrs	r3, r7, #3
 800241e:	0749      	lsls	r1, r1, #29
 8002420:	430b      	orrs	r3, r1
 8002422:	0f5a      	lsrs	r2, r3, #29
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	0752      	lsls	r2, r2, #29
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	4313      	orrs	r3, r2
 800242c:	e5fe      	b.n	800202c <__aeabi_dsub+0x314>
 800242e:	2300      	movs	r3, #0
 8002430:	4a01      	ldr	r2, [pc, #4]	; (8002438 <__aeabi_dsub+0x720>)
 8002432:	001c      	movs	r4, r3
 8002434:	e513      	b.n	8001e5e <__aeabi_dsub+0x146>
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	000007ff 	.word	0x000007ff

0800243c <__aeabi_dcmpun>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	0005      	movs	r5, r0
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <__aeabi_dcmpun+0x38>)
 8002442:	031c      	lsls	r4, r3, #12
 8002444:	0016      	movs	r6, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	030a      	lsls	r2, r1, #12
 800244a:	0049      	lsls	r1, r1, #1
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	0d49      	lsrs	r1, r1, #21
 8002450:	0b24      	lsrs	r4, r4, #12
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	4281      	cmp	r1, r0
 8002456:	d008      	beq.n	800246a <__aeabi_dcmpun+0x2e>
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <__aeabi_dcmpun+0x38>)
 800245a:	2000      	movs	r0, #0
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <__aeabi_dcmpun+0x2c>
 8002460:	0020      	movs	r0, r4
 8002462:	4330      	orrs	r0, r6
 8002464:	1e43      	subs	r3, r0, #1
 8002466:	4198      	sbcs	r0, r3
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	2001      	movs	r0, #1
 800246c:	432a      	orrs	r2, r5
 800246e:	d1fb      	bne.n	8002468 <__aeabi_dcmpun+0x2c>
 8002470:	e7f2      	b.n	8002458 <__aeabi_dcmpun+0x1c>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	000007ff 	.word	0x000007ff

08002478 <__aeabi_d2iz>:
 8002478:	000a      	movs	r2, r1
 800247a:	b530      	push	{r4, r5, lr}
 800247c:	4c13      	ldr	r4, [pc, #76]	; (80024cc <__aeabi_d2iz+0x54>)
 800247e:	0053      	lsls	r3, r2, #1
 8002480:	0309      	lsls	r1, r1, #12
 8002482:	0005      	movs	r5, r0
 8002484:	0b09      	lsrs	r1, r1, #12
 8002486:	2000      	movs	r0, #0
 8002488:	0d5b      	lsrs	r3, r3, #21
 800248a:	0fd2      	lsrs	r2, r2, #31
 800248c:	42a3      	cmp	r3, r4
 800248e:	dd04      	ble.n	800249a <__aeabi_d2iz+0x22>
 8002490:	480f      	ldr	r0, [pc, #60]	; (80024d0 <__aeabi_d2iz+0x58>)
 8002492:	4283      	cmp	r3, r0
 8002494:	dd02      	ble.n	800249c <__aeabi_d2iz+0x24>
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <__aeabi_d2iz+0x5c>)
 8002498:	18d0      	adds	r0, r2, r3
 800249a:	bd30      	pop	{r4, r5, pc}
 800249c:	2080      	movs	r0, #128	; 0x80
 800249e:	0340      	lsls	r0, r0, #13
 80024a0:	4301      	orrs	r1, r0
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <__aeabi_d2iz+0x60>)
 80024a4:	1ac0      	subs	r0, r0, r3
 80024a6:	281f      	cmp	r0, #31
 80024a8:	dd08      	ble.n	80024bc <__aeabi_d2iz+0x44>
 80024aa:	480c      	ldr	r0, [pc, #48]	; (80024dc <__aeabi_d2iz+0x64>)
 80024ac:	1ac3      	subs	r3, r0, r3
 80024ae:	40d9      	lsrs	r1, r3
 80024b0:	000b      	movs	r3, r1
 80024b2:	4258      	negs	r0, r3
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d1f0      	bne.n	800249a <__aeabi_d2iz+0x22>
 80024b8:	0018      	movs	r0, r3
 80024ba:	e7ee      	b.n	800249a <__aeabi_d2iz+0x22>
 80024bc:	4c08      	ldr	r4, [pc, #32]	; (80024e0 <__aeabi_d2iz+0x68>)
 80024be:	40c5      	lsrs	r5, r0
 80024c0:	46a4      	mov	ip, r4
 80024c2:	4463      	add	r3, ip
 80024c4:	4099      	lsls	r1, r3
 80024c6:	000b      	movs	r3, r1
 80024c8:	432b      	orrs	r3, r5
 80024ca:	e7f2      	b.n	80024b2 <__aeabi_d2iz+0x3a>
 80024cc:	000003fe 	.word	0x000003fe
 80024d0:	0000041d 	.word	0x0000041d
 80024d4:	7fffffff 	.word	0x7fffffff
 80024d8:	00000433 	.word	0x00000433
 80024dc:	00000413 	.word	0x00000413
 80024e0:	fffffbed 	.word	0xfffffbed

080024e4 <__aeabi_i2d>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d016      	beq.n	8002518 <__aeabi_i2d+0x34>
 80024ea:	17c3      	asrs	r3, r0, #31
 80024ec:	18c5      	adds	r5, r0, r3
 80024ee:	405d      	eors	r5, r3
 80024f0:	0fc4      	lsrs	r4, r0, #31
 80024f2:	0028      	movs	r0, r5
 80024f4:	f000 f894 	bl	8002620 <__clzsi2>
 80024f8:	4a11      	ldr	r2, [pc, #68]	; (8002540 <__aeabi_i2d+0x5c>)
 80024fa:	1a12      	subs	r2, r2, r0
 80024fc:	280a      	cmp	r0, #10
 80024fe:	dc16      	bgt.n	800252e <__aeabi_i2d+0x4a>
 8002500:	0003      	movs	r3, r0
 8002502:	002e      	movs	r6, r5
 8002504:	3315      	adds	r3, #21
 8002506:	409e      	lsls	r6, r3
 8002508:	230b      	movs	r3, #11
 800250a:	1a18      	subs	r0, r3, r0
 800250c:	40c5      	lsrs	r5, r0
 800250e:	0552      	lsls	r2, r2, #21
 8002510:	032d      	lsls	r5, r5, #12
 8002512:	0b2d      	lsrs	r5, r5, #12
 8002514:	0d53      	lsrs	r3, r2, #21
 8002516:	e003      	b.n	8002520 <__aeabi_i2d+0x3c>
 8002518:	2400      	movs	r4, #0
 800251a:	2300      	movs	r3, #0
 800251c:	2500      	movs	r5, #0
 800251e:	2600      	movs	r6, #0
 8002520:	051b      	lsls	r3, r3, #20
 8002522:	432b      	orrs	r3, r5
 8002524:	07e4      	lsls	r4, r4, #31
 8002526:	4323      	orrs	r3, r4
 8002528:	0030      	movs	r0, r6
 800252a:	0019      	movs	r1, r3
 800252c:	bd70      	pop	{r4, r5, r6, pc}
 800252e:	380b      	subs	r0, #11
 8002530:	4085      	lsls	r5, r0
 8002532:	0552      	lsls	r2, r2, #21
 8002534:	032d      	lsls	r5, r5, #12
 8002536:	2600      	movs	r6, #0
 8002538:	0b2d      	lsrs	r5, r5, #12
 800253a:	0d53      	lsrs	r3, r2, #21
 800253c:	e7f0      	b.n	8002520 <__aeabi_i2d+0x3c>
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	0000041e 	.word	0x0000041e

08002544 <__aeabi_ui2d>:
 8002544:	b510      	push	{r4, lr}
 8002546:	1e04      	subs	r4, r0, #0
 8002548:	d010      	beq.n	800256c <__aeabi_ui2d+0x28>
 800254a:	f000 f869 	bl	8002620 <__clzsi2>
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <__aeabi_ui2d+0x48>)
 8002550:	1a1b      	subs	r3, r3, r0
 8002552:	280a      	cmp	r0, #10
 8002554:	dc11      	bgt.n	800257a <__aeabi_ui2d+0x36>
 8002556:	220b      	movs	r2, #11
 8002558:	0021      	movs	r1, r4
 800255a:	1a12      	subs	r2, r2, r0
 800255c:	40d1      	lsrs	r1, r2
 800255e:	3015      	adds	r0, #21
 8002560:	030a      	lsls	r2, r1, #12
 8002562:	055b      	lsls	r3, r3, #21
 8002564:	4084      	lsls	r4, r0
 8002566:	0b12      	lsrs	r2, r2, #12
 8002568:	0d5b      	lsrs	r3, r3, #21
 800256a:	e001      	b.n	8002570 <__aeabi_ui2d+0x2c>
 800256c:	2300      	movs	r3, #0
 800256e:	2200      	movs	r2, #0
 8002570:	051b      	lsls	r3, r3, #20
 8002572:	4313      	orrs	r3, r2
 8002574:	0020      	movs	r0, r4
 8002576:	0019      	movs	r1, r3
 8002578:	bd10      	pop	{r4, pc}
 800257a:	0022      	movs	r2, r4
 800257c:	380b      	subs	r0, #11
 800257e:	4082      	lsls	r2, r0
 8002580:	055b      	lsls	r3, r3, #21
 8002582:	0312      	lsls	r2, r2, #12
 8002584:	2400      	movs	r4, #0
 8002586:	0b12      	lsrs	r2, r2, #12
 8002588:	0d5b      	lsrs	r3, r3, #21
 800258a:	e7f1      	b.n	8002570 <__aeabi_ui2d+0x2c>
 800258c:	0000041e 	.word	0x0000041e

08002590 <__aeabi_f2d>:
 8002590:	b570      	push	{r4, r5, r6, lr}
 8002592:	0043      	lsls	r3, r0, #1
 8002594:	0246      	lsls	r6, r0, #9
 8002596:	0fc4      	lsrs	r4, r0, #31
 8002598:	20fe      	movs	r0, #254	; 0xfe
 800259a:	0e1b      	lsrs	r3, r3, #24
 800259c:	1c59      	adds	r1, r3, #1
 800259e:	0a75      	lsrs	r5, r6, #9
 80025a0:	4208      	tst	r0, r1
 80025a2:	d00c      	beq.n	80025be <__aeabi_f2d+0x2e>
 80025a4:	22e0      	movs	r2, #224	; 0xe0
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4694      	mov	ip, r2
 80025aa:	076d      	lsls	r5, r5, #29
 80025ac:	0b36      	lsrs	r6, r6, #12
 80025ae:	4463      	add	r3, ip
 80025b0:	051b      	lsls	r3, r3, #20
 80025b2:	4333      	orrs	r3, r6
 80025b4:	07e4      	lsls	r4, r4, #31
 80025b6:	4323      	orrs	r3, r4
 80025b8:	0028      	movs	r0, r5
 80025ba:	0019      	movs	r1, r3
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d114      	bne.n	80025ec <__aeabi_f2d+0x5c>
 80025c2:	2d00      	cmp	r5, #0
 80025c4:	d01b      	beq.n	80025fe <__aeabi_f2d+0x6e>
 80025c6:	0028      	movs	r0, r5
 80025c8:	f000 f82a 	bl	8002620 <__clzsi2>
 80025cc:	280a      	cmp	r0, #10
 80025ce:	dc1c      	bgt.n	800260a <__aeabi_f2d+0x7a>
 80025d0:	230b      	movs	r3, #11
 80025d2:	002e      	movs	r6, r5
 80025d4:	1a1b      	subs	r3, r3, r0
 80025d6:	40de      	lsrs	r6, r3
 80025d8:	0003      	movs	r3, r0
 80025da:	3315      	adds	r3, #21
 80025dc:	409d      	lsls	r5, r3
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <__aeabi_f2d+0x88>)
 80025e0:	0336      	lsls	r6, r6, #12
 80025e2:	1a12      	subs	r2, r2, r0
 80025e4:	0552      	lsls	r2, r2, #21
 80025e6:	0b36      	lsrs	r6, r6, #12
 80025e8:	0d53      	lsrs	r3, r2, #21
 80025ea:	e7e1      	b.n	80025b0 <__aeabi_f2d+0x20>
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d009      	beq.n	8002604 <__aeabi_f2d+0x74>
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0b36      	lsrs	r6, r6, #12
 80025f4:	0312      	lsls	r2, r2, #12
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <__aeabi_f2d+0x8c>)
 80025f8:	076d      	lsls	r5, r5, #29
 80025fa:	4316      	orrs	r6, r2
 80025fc:	e7d8      	b.n	80025b0 <__aeabi_f2d+0x20>
 80025fe:	2300      	movs	r3, #0
 8002600:	2600      	movs	r6, #0
 8002602:	e7d5      	b.n	80025b0 <__aeabi_f2d+0x20>
 8002604:	2600      	movs	r6, #0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <__aeabi_f2d+0x8c>)
 8002608:	e7d2      	b.n	80025b0 <__aeabi_f2d+0x20>
 800260a:	0003      	movs	r3, r0
 800260c:	3b0b      	subs	r3, #11
 800260e:	409d      	lsls	r5, r3
 8002610:	002e      	movs	r6, r5
 8002612:	2500      	movs	r5, #0
 8002614:	e7e3      	b.n	80025de <__aeabi_f2d+0x4e>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	00000389 	.word	0x00000389
 800261c:	000007ff 	.word	0x000007ff

08002620 <__clzsi2>:
 8002620:	211c      	movs	r1, #28
 8002622:	2301      	movs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	4298      	cmp	r0, r3
 8002628:	d301      	bcc.n	800262e <__clzsi2+0xe>
 800262a:	0c00      	lsrs	r0, r0, #16
 800262c:	3910      	subs	r1, #16
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	4298      	cmp	r0, r3
 8002632:	d301      	bcc.n	8002638 <__clzsi2+0x18>
 8002634:	0a00      	lsrs	r0, r0, #8
 8002636:	3908      	subs	r1, #8
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	4298      	cmp	r0, r3
 800263c:	d301      	bcc.n	8002642 <__clzsi2+0x22>
 800263e:	0900      	lsrs	r0, r0, #4
 8002640:	3904      	subs	r1, #4
 8002642:	a202      	add	r2, pc, #8	; (adr r2, 800264c <__clzsi2+0x2c>)
 8002644:	5c10      	ldrb	r0, [r2, r0]
 8002646:	1840      	adds	r0, r0, r1
 8002648:	4770      	bx	lr
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	02020304 	.word	0x02020304
 8002650:	01010101 	.word	0x01010101
	...

0800265c <__clzdi2>:
 800265c:	b510      	push	{r4, lr}
 800265e:	2900      	cmp	r1, #0
 8002660:	d103      	bne.n	800266a <__clzdi2+0xe>
 8002662:	f7ff ffdd 	bl	8002620 <__clzsi2>
 8002666:	3020      	adds	r0, #32
 8002668:	e002      	b.n	8002670 <__clzdi2+0x14>
 800266a:	0008      	movs	r0, r1
 800266c:	f7ff ffd8 	bl	8002620 <__clzsi2>
 8002670:	bd10      	pop	{r4, pc}
 8002672:	46c0      	nop			; (mov r8, r8)

08002674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267a:	f000 fbdb 	bl	8002e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800267e:	f000 f927 	bl	80028d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002682:	f000 f9cf 	bl	8002a24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002686:	f000 f98f 	bl	80029a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_t [2];
  data_t[0] = 0x80;
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	701a      	strb	r2, [r3, #0]
  data_t[1] = 0x28;
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2228      	movs	r2, #40	; 0x28
 8002694:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 8002696:	1d3a      	adds	r2, r7, #4
 8002698:	4884      	ldr	r0, [pc, #528]	; (80028ac <main+0x238>)
 800269a:	2332      	movs	r3, #50	; 0x32
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2302      	movs	r3, #2
 80026a0:	217c      	movs	r1, #124	; 0x7c
 80026a2:	f000 ff1b 	bl	80034dc <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f000 fc34 	bl	8002f14 <HAL_Delay>

  data_t[0] = 0x80;
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	701a      	strb	r2, [r3, #0]
  data_t[1] = 0x0C;
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	220c      	movs	r2, #12
 80026b6:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 80026b8:	1d3a      	adds	r2, r7, #4
 80026ba:	487c      	ldr	r0, [pc, #496]	; (80028ac <main+0x238>)
 80026bc:	2332      	movs	r3, #50	; 0x32
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2302      	movs	r3, #2
 80026c2:	217c      	movs	r1, #124	; 0x7c
 80026c4:	f000 ff0a 	bl	80034dc <HAL_I2C_Master_Transmit>

  data_t[0] = 0x80;
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	701a      	strb	r2, [r3, #0]
  data_t[1] = 0x01;
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2201      	movs	r2, #1
 80026d2:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 80026d4:	1d3a      	adds	r2, r7, #4
 80026d6:	4875      	ldr	r0, [pc, #468]	; (80028ac <main+0x238>)
 80026d8:	2332      	movs	r3, #50	; 0x32
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2302      	movs	r3, #2
 80026de:	217c      	movs	r1, #124	; 0x7c
 80026e0:	f000 fefc 	bl	80034dc <HAL_I2C_Master_Transmit>

  data_t[0] = 0x80;
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	701a      	strb	r2, [r3, #0]
  data_t[1] = 0x06;
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2206      	movs	r2, #6
 80026ee:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 80026f0:	1d3a      	adds	r2, r7, #4
 80026f2:	486e      	ldr	r0, [pc, #440]	; (80028ac <main+0x238>)
 80026f4:	2332      	movs	r3, #50	; 0x32
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2302      	movs	r3, #2
 80026fa:	217c      	movs	r1, #124	; 0x7c
 80026fc:	f000 feee 	bl	80034dc <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8002700:	2001      	movs	r0, #1
 8002702:	f000 fc07 	bl	8002f14 <HAL_Delay>

  char *str = malloc (6);
 8002706:	2006      	movs	r0, #6
 8002708:	f002 fa42 	bl	8004b90 <malloc>
 800270c:	0003      	movs	r3, r0
 800270e:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  data_t[0] = 0x80;
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	701a      	strb	r2, [r3, #0]
	  data_t[1] = 0x03;
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2203      	movs	r2, #3
 800271a:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 800271c:	1d3a      	adds	r2, r7, #4
 800271e:	4863      	ldr	r0, [pc, #396]	; (80028ac <main+0x238>)
 8002720:	2332      	movs	r3, #50	; 0x32
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2302      	movs	r3, #2
 8002726:	217c      	movs	r1, #124	; 0x7c
 8002728:	f000 fed8 	bl	80034dc <HAL_I2C_Master_Transmit>
	  HAL_Delay(1);
 800272c:	2001      	movs	r0, #1
 800272e:	f000 fbf1 	bl	8002f14 <HAL_Delay>

	  Print(GROOVELCD_ADDR, "Q1:-");
 8002732:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <main+0x23c>)
 8002734:	0019      	movs	r1, r3
 8002736:	207c      	movs	r0, #124	; 0x7c
 8002738:	f000 f996 	bl	8002a68 <Print>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0; i<3; i++){
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e064      	b.n	800280c <main+0x198>
		  ADSwrite[0] = 0x01;
 8002742:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <main+0x240>)
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
		  switch(i) {
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d011      	beq.n	8002772 <main+0xfe>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b02      	cmp	r3, #2
 8002752:	dc12      	bgt.n	800277a <main+0x106>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <main+0xee>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d004      	beq.n	800276a <main+0xf6>
 8002760:	e00b      	b.n	800277a <main+0x106>
				  case(0):
				  	  ADSwrite[1] = 0xC1;
 8002762:	4b54      	ldr	r3, [pc, #336]	; (80028b4 <main+0x240>)
 8002764:	22c1      	movs	r2, #193	; 0xc1
 8002766:	705a      	strb	r2, [r3, #1]
				  break;
 8002768:	e007      	b.n	800277a <main+0x106>
				  case(1):
				  	  ADSwrite[1] = 0xD1;
 800276a:	4b52      	ldr	r3, [pc, #328]	; (80028b4 <main+0x240>)
 800276c:	22d1      	movs	r2, #209	; 0xd1
 800276e:	705a      	strb	r2, [r3, #1]
				  break;
 8002770:	e003      	b.n	800277a <main+0x106>
				  case(2):
					  ADSwrite[1] = 0xE1;
 8002772:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <main+0x240>)
 8002774:	22e1      	movs	r2, #225	; 0xe1
 8002776:	705a      	strb	r2, [r3, #1]
				  break;
 8002778:	46c0      	nop			; (mov r8, r8)
		  }
		  ADSwrite[2] = 0x83;
 800277a:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <main+0x240>)
 800277c:	2283      	movs	r2, #131	; 0x83
 800277e:	709a      	strb	r2, [r3, #2]
		  HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS, ADSwrite, 3, 100);
 8002780:	4a4c      	ldr	r2, [pc, #304]	; (80028b4 <main+0x240>)
 8002782:	484a      	ldr	r0, [pc, #296]	; (80028ac <main+0x238>)
 8002784:	2364      	movs	r3, #100	; 0x64
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2303      	movs	r3, #3
 800278a:	2190      	movs	r1, #144	; 0x90
 800278c:	f000 fea6 	bl	80034dc <HAL_I2C_Master_Transmit>
		  ADSwrite[0] = 0x00;
 8002790:	4b48      	ldr	r3, [pc, #288]	; (80028b4 <main+0x240>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS, ADSwrite, 1, 100);
 8002796:	4a47      	ldr	r2, [pc, #284]	; (80028b4 <main+0x240>)
 8002798:	4844      	ldr	r0, [pc, #272]	; (80028ac <main+0x238>)
 800279a:	2364      	movs	r3, #100	; 0x64
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2301      	movs	r3, #1
 80027a0:	2190      	movs	r1, #144	; 0x90
 80027a2:	f000 fe9b 	bl	80034dc <HAL_I2C_Master_Transmit>
		  HAL_Delay(20);
 80027a6:	2014      	movs	r0, #20
 80027a8:	f000 fbb4 	bl	8002f14 <HAL_Delay>
		  HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS, ADSwrite, 2, 100);
 80027ac:	4a41      	ldr	r2, [pc, #260]	; (80028b4 <main+0x240>)
 80027ae:	483f      	ldr	r0, [pc, #252]	; (80028ac <main+0x238>)
 80027b0:	2364      	movs	r3, #100	; 0x64
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2302      	movs	r3, #2
 80027b6:	2190      	movs	r1, #144	; 0x90
 80027b8:	f000 ff98 	bl	80036ec <HAL_I2C_Master_Receive>
		  reading = (ADSwrite[0] << 8 | ADSwrite[1]);
 80027bc:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <main+0x240>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <main+0x240>)
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <main+0x244>)
 80027d0:	801a      	strh	r2, [r3, #0]
		  if(reading < 0){
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <main+0x244>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	5e9b      	ldrsh	r3, [r3, r2]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da02      	bge.n	80027e2 <main+0x16e>
			  reading = 0;
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <main+0x244>)
 80027de:	2200      	movs	r2, #0
 80027e0:	801a      	strh	r2, [r3, #0]
		  }
		  voltage[i] = reading * voltageConv;
 80027e2:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <main+0x244>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	5e9b      	ldrsh	r3, [r3, r2]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fe f89d 	bl	8000928 <__aeabi_i2f>
 80027ee:	1c03      	adds	r3, r0, #0
 80027f0:	4a32      	ldr	r2, [pc, #200]	; (80028bc <main+0x248>)
 80027f2:	1c11      	adds	r1, r2, #0
 80027f4:	1c18      	adds	r0, r3, #0
 80027f6:	f7fd ff71 	bl	80006dc <__aeabi_fmul>
 80027fa:	1c03      	adds	r3, r0, #0
 80027fc:	1c19      	adds	r1, r3, #0
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <main+0x24c>)
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	50d1      	str	r1, [r2, r3]
	  for(int i = 0; i<3; i++){
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3301      	adds	r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b02      	cmp	r3, #2
 8002810:	dd97      	ble.n	8002742 <main+0xce>
	  }

	  sprintf (str, "%.2f", voltage[0]);
 8002812:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <main+0x24c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	1c18      	adds	r0, r3, #0
 8002818:	f7ff feba 	bl	8002590 <__aeabi_f2d>
 800281c:	0002      	movs	r2, r0
 800281e:	000b      	movs	r3, r1
 8002820:	4928      	ldr	r1, [pc, #160]	; (80028c4 <main+0x250>)
 8002822:	68b8      	ldr	r0, [r7, #8]
 8002824:	f002 ff28 	bl	8005678 <siprintf>
	  Print(GROOVELCD_ADDR, str);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	0019      	movs	r1, r3
 800282c:	207c      	movs	r0, #124	; 0x7c
 800282e:	f000 f91b 	bl	8002a68 <Print>

	  /*Shift to second line*/
	  data_t[0] = 0x80;
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	701a      	strb	r2, [r3, #0]
	  data_t[1] = 0xC0;
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	22c0      	movs	r2, #192	; 0xc0
 800283c:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 800283e:	1d3a      	adds	r2, r7, #4
 8002840:	481a      	ldr	r0, [pc, #104]	; (80028ac <main+0x238>)
 8002842:	2332      	movs	r3, #50	; 0x32
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2302      	movs	r3, #2
 8002848:	217c      	movs	r1, #124	; 0x7c
 800284a:	f000 fe47 	bl	80034dc <HAL_I2C_Master_Transmit>
	  /**/
	  Print(GROOVELCD_ADDR, "Q2:-");
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <main+0x254>)
 8002850:	0019      	movs	r1, r3
 8002852:	207c      	movs	r0, #124	; 0x7c
 8002854:	f000 f908 	bl	8002a68 <Print>
	  sprintf (str, "%.2f", voltage[1]);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <main+0x24c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	1c18      	adds	r0, r3, #0
 800285e:	f7ff fe97 	bl	8002590 <__aeabi_f2d>
 8002862:	0002      	movs	r2, r0
 8002864:	000b      	movs	r3, r1
 8002866:	4917      	ldr	r1, [pc, #92]	; (80028c4 <main+0x250>)
 8002868:	68b8      	ldr	r0, [r7, #8]
 800286a:	f002 ff05 	bl	8005678 <siprintf>
	  Print(GROOVELCD_ADDR, str);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	0019      	movs	r1, r3
 8002872:	207c      	movs	r0, #124	; 0x7c
 8002874:	f000 f8f8 	bl	8002a68 <Print>

	  Print(GROOVELCD_ADDR, " V:-");
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <main+0x258>)
 800287a:	0019      	movs	r1, r3
 800287c:	207c      	movs	r0, #124	; 0x7c
 800287e:	f000 f8f3 	bl	8002a68 <Print>
	  sprintf (str, "%.2f", voltage[2]);
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <main+0x24c>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	1c18      	adds	r0, r3, #0
 8002888:	f7ff fe82 	bl	8002590 <__aeabi_f2d>
 800288c:	0002      	movs	r2, r0
 800288e:	000b      	movs	r3, r1
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <main+0x250>)
 8002892:	68b8      	ldr	r0, [r7, #8]
 8002894:	f002 fef0 	bl	8005678 <siprintf>
	  Print(GROOVELCD_ADDR, str);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	0019      	movs	r1, r3
 800289c:	207c      	movs	r0, #124	; 0x7c
 800289e:	f000 f8e3 	bl	8002a68 <Print>
	  HAL_Delay(20);
 80028a2:	2014      	movs	r0, #20
 80028a4:	f000 fb36 	bl	8002f14 <HAL_Delay>
  {
 80028a8:	e732      	b.n	8002710 <main+0x9c>
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	200001f8 	.word	0x200001f8
 80028b0:	08007ae8 	.word	0x08007ae8
 80028b4:	20000244 	.word	0x20000244
 80028b8:	2000024a 	.word	0x2000024a
 80028bc:	39449ba6 	.word	0x39449ba6
 80028c0:	2000024c 	.word	0x2000024c
 80028c4:	08007af0 	.word	0x08007af0
 80028c8:	08007af8 	.word	0x08007af8
 80028cc:	08007b00 	.word	0x08007b00

080028d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b099      	sub	sp, #100	; 0x64
 80028d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028d6:	242c      	movs	r4, #44	; 0x2c
 80028d8:	193b      	adds	r3, r7, r4
 80028da:	0018      	movs	r0, r3
 80028dc:	2334      	movs	r3, #52	; 0x34
 80028de:	001a      	movs	r2, r3
 80028e0:	2100      	movs	r1, #0
 80028e2:	f002 f95f 	bl	8004ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e6:	2318      	movs	r3, #24
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	0018      	movs	r0, r3
 80028ec:	2314      	movs	r3, #20
 80028ee:	001a      	movs	r2, r3
 80028f0:	2100      	movs	r1, #0
 80028f2:	f002 f957 	bl	8004ba4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028f6:	003b      	movs	r3, r7
 80028f8:	0018      	movs	r0, r3
 80028fa:	2318      	movs	r3, #24
 80028fc:	001a      	movs	r2, r3
 80028fe:	2100      	movs	r1, #0
 8002900:	f002 f950 	bl	8004ba4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <SystemClock_Config+0xd0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <SystemClock_Config+0xd4>)
 800290a:	401a      	ands	r2, r3
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <SystemClock_Config+0xd0>)
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	0109      	lsls	r1, r1, #4
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002916:	0021      	movs	r1, r4
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2210      	movs	r2, #16
 800291c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2201      	movs	r2, #1
 8002922:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	22a0      	movs	r2, #160	; 0xa0
 800292e:	0212      	lsls	r2, r2, #8
 8002930:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002932:	187b      	adds	r3, r7, r1
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002938:	187b      	adds	r3, r7, r1
 800293a:	0018      	movs	r0, r3
 800293c:	f001 fa6e 	bl	8003e1c <HAL_RCC_OscConfig>
 8002940:	1e03      	subs	r3, r0, #0
 8002942:	d001      	beq.n	8002948 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002944:	f000 f8fc 	bl	8002b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002948:	2118      	movs	r1, #24
 800294a:	187b      	adds	r3, r7, r1
 800294c:	220f      	movs	r2, #15
 800294e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2200      	movs	r2, #0
 8002954:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	22e0      	movs	r2, #224	; 0xe0
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002964:	187b      	adds	r3, r7, r1
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2100      	movs	r1, #0
 800296e:	0018      	movs	r0, r3
 8002970:	f001 fdd0 	bl	8004514 <HAL_RCC_ClockConfig>
 8002974:	1e03      	subs	r3, r0, #0
 8002976:	d001      	beq.n	800297c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002978:	f000 f8e2 	bl	8002b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800297c:	003b      	movs	r3, r7
 800297e:	2208      	movs	r2, #8
 8002980:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002982:	003b      	movs	r3, r7
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002988:	003b      	movs	r3, r7
 800298a:	0018      	movs	r0, r3
 800298c:	f001 ffb0 	bl	80048f0 <HAL_RCCEx_PeriphCLKConfig>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002994:	f000 f8d4 	bl	8002b40 <Error_Handler>
  }
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b019      	add	sp, #100	; 0x64
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	40007000 	.word	0x40007000
 80029a4:	ffffe7ff 	.word	0xffffe7ff

080029a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029ae:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <MX_I2C1_Init+0x78>)
 80029b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029ca:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029d8:	2200      	movs	r2, #0
 80029da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029de:	2200      	movs	r2, #0
 80029e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 fce3 	bl	80033b0 <HAL_I2C_Init>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029ee:	f000 f8a7 	bl	8002b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <MX_I2C1_Init+0x74>)
 80029f4:	2100      	movs	r1, #0
 80029f6:	0018      	movs	r0, r3
 80029f8:	f001 f978 	bl	8003cec <HAL_I2CEx_ConfigAnalogFilter>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d001      	beq.n	8002a04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a00:	f000 f89e 	bl	8002b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <MX_I2C1_Init+0x74>)
 8002a06:	2100      	movs	r1, #0
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f001 f9bb 	bl	8003d84 <HAL_I2CEx_ConfigDigitalFilter>
 8002a0e:	1e03      	subs	r3, r0, #0
 8002a10:	d001      	beq.n	8002a16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a12:	f000 f895 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200001f8 	.word	0x200001f8
 8002a20:	40005400 	.word	0x40005400

08002a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_GPIO_Init+0x40>)
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <MX_GPIO_Init+0x40>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MX_GPIO_Init+0x40>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <MX_GPIO_Init+0x40>)
 8002a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <MX_GPIO_Init+0x40>)
 8002a48:	2102      	movs	r1, #2
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <MX_GPIO_Init+0x40>)
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]

}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	40021000 	.word	0x40021000

08002a68 <Print>:

/* USER CODE BEGIN 4 */
void Print(uint16_t addre, uint8_t *str)
{
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	46c6      	mov	lr, r8
 8002a6c:	b500      	push	{lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	0002      	movs	r2, r0
 8002a74:	61b9      	str	r1, [r7, #24]
 8002a76:	231e      	movs	r3, #30
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	466b      	mov	r3, sp
 8002a7e:	4698      	mov	r8, r3
	uint8_t data_a[strlen(str)];
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7fd fb40 	bl	8000108 <strlen>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	3a01      	subs	r2, #1
 8002a8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	60fa      	str	r2, [r7, #12]
 8002a96:	68b8      	ldr	r0, [r7, #8]
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	0f52      	lsrs	r2, r2, #29
 8002a9e:	000e      	movs	r6, r1
 8002aa0:	00f6      	lsls	r6, r6, #3
 8002aa2:	617e      	str	r6, [r7, #20]
 8002aa4:	697e      	ldr	r6, [r7, #20]
 8002aa6:	4316      	orrs	r6, r2
 8002aa8:	617e      	str	r6, [r7, #20]
 8002aaa:	0002      	movs	r2, r0
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	613a      	str	r2, [r7, #16]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	6838      	ldr	r0, [r7, #0]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	0002      	movs	r2, r0
 8002abc:	0f52      	lsrs	r2, r2, #29
 8002abe:	000e      	movs	r6, r1
 8002ac0:	00f5      	lsls	r5, r6, #3
 8002ac2:	4315      	orrs	r5, r2
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	00d4      	lsls	r4, r2, #3
 8002ac8:	3307      	adds	r3, #7
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	466a      	mov	r2, sp
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	469d      	mov	sp, r3
 8002ad4:	ab02      	add	r3, sp, #8
 8002ad6:	3300      	adds	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
	data_a[0] = 0x40;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2240      	movs	r2, #64	; 0x40
 8002ade:	701a      	strb	r2, [r3, #0]
	int i;
	for(i=0; str[i]!=0; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae4:	e00a      	b.n	8002afc <Print+0x94>
	{
		data_a[1+i] = str[i];
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	18d2      	adds	r2, r2, r3
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	3301      	adds	r3, #1
 8002af0:	7811      	ldrb	r1, [r2, #0]
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	54d1      	strb	r1, [r2, r3]
	for(i=0; str[i]!=0; i++)
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	3301      	adds	r3, #1
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	18d3      	adds	r3, r2, r3
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <Print+0x7e>
	}
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)addre, (uint8_t*)data_a, 1+strlen(str), 50);
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7fd fafc 	bl	8000108 <strlen>
 8002b10:	0003      	movs	r3, r0
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	b29c      	uxth	r4, r3
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	231e      	movs	r3, #30
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	8819      	ldrh	r1, [r3, #0]
 8002b20:	4806      	ldr	r0, [pc, #24]	; (8002b3c <Print+0xd4>)
 8002b22:	2332      	movs	r3, #50	; 0x32
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	0023      	movs	r3, r4
 8002b28:	f000 fcd8 	bl	80034dc <HAL_I2C_Master_Transmit>
 8002b2c:	46c5      	mov	sp, r8
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b00c      	add	sp, #48	; 0x30
 8002b34:	bc80      	pop	{r7}
 8002b36:	46b8      	mov	r8, r7
 8002b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	200001f8 	.word	0x200001f8

08002b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b44:	b672      	cpsid	i
}
 8002b46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <Error_Handler+0x8>
	...

08002b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_MspInit+0x24>)
 8002b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_MspInit+0x24>)
 8002b56:	2101      	movs	r1, #1
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_MspInit+0x24>)
 8002b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_MspInit+0x24>)
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	0549      	lsls	r1, r1, #21
 8002b66:	430a      	orrs	r2, r1
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	240c      	movs	r4, #12
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	0018      	movs	r0, r3
 8002b82:	2314      	movs	r3, #20
 8002b84:	001a      	movs	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	f002 f80c 	bl	8004ba4 <memset>
  if(hi2c->Instance==I2C1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_I2C_MspInit+0x7c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d128      	bne.n	8002be8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_I2C_MspInit+0x80>)
 8002b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_I2C_MspInit+0x80>)
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_I2C_MspInit+0x80>)
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bae:	0021      	movs	r1, r4
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	22c0      	movs	r2, #192	; 0xc0
 8002bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	2212      	movs	r2, #18
 8002bba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	2201      	movs	r2, #1
 8002bcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_I2C_MspInit+0x84>)
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	0010      	movs	r0, r2
 8002bd6:	f000 fa75 	bl	80030c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_I2C_MspInit+0x80>)
 8002bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_I2C_MspInit+0x80>)
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	0389      	lsls	r1, r1, #14
 8002be4:	430a      	orrs	r2, r1
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b009      	add	sp, #36	; 0x24
 8002bee:	bd90      	pop	{r4, r7, pc}
 8002bf0:	40005400 	.word	0x40005400
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	50000400 	.word	0x50000400

08002bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <NMI_Handler+0x4>

08002c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c06:	e7fe      	b.n	8002c06 <HardFault_Handler+0x4>

08002c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c20:	f000 f95c 	bl	8002edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	af00      	add	r7, sp, #0
	return 1;
 8002c2e:	2301      	movs	r3, #1
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_kill>:

int _kill(int pid, int sig)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c40:	f001 ff7c 	bl	8004b3c <__errno>
 8002c44:	0003      	movs	r3, r0
 8002c46:	2216      	movs	r2, #22
 8002c48:	601a      	str	r2, [r3, #0]
	return -1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	425b      	negs	r3, r3
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b002      	add	sp, #8
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_exit>:

void _exit (int status)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c5e:	2301      	movs	r3, #1
 8002c60:	425a      	negs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0011      	movs	r1, r2
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff ffe5 	bl	8002c36 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c6c:	e7fe      	b.n	8002c6c <_exit+0x16>

08002c6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e00a      	b.n	8002c96 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c80:	e000      	b.n	8002c84 <_read+0x16>
 8002c82:	bf00      	nop
 8002c84:	0001      	movs	r1, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	60ba      	str	r2, [r7, #8]
 8002c8c:	b2ca      	uxtb	r2, r1
 8002c8e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3301      	adds	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	dbf0      	blt.n	8002c80 <_read+0x12>
	}

return len;
 8002c9e:	687b      	ldr	r3, [r7, #4]
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b006      	add	sp, #24
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e009      	b.n	8002cce <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	60ba      	str	r2, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	e000      	b.n	8002cc8 <_write+0x20>
 8002cc6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	dbf1      	blt.n	8002cba <_write+0x12>
	}
	return len;
 8002cd6:	687b      	ldr	r3, [r7, #4]
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b006      	add	sp, #24
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_close>:

int _close(int file)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	return -1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	425b      	negs	r3, r3
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	0192      	lsls	r2, r2, #6
 8002d04:	605a      	str	r2, [r3, #4]
	return 0;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_isatty>:

int _isatty(int file)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	return 1;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b002      	add	sp, #8
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
	return 0;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b004      	add	sp, #16
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d40:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <_sbrk+0x5c>)
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <_sbrk+0x60>)
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <_sbrk+0x64>)
 8002d56:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <_sbrk+0x68>)
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <_sbrk+0x64>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	18d3      	adds	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d207      	bcs.n	8002d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d68:	f001 fee8 	bl	8004b3c <__errno>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	220c      	movs	r2, #12
 8002d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	425b      	negs	r3, r3
 8002d76:	e009      	b.n	8002d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <_sbrk+0x64>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <_sbrk+0x64>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	18d2      	adds	r2, r2, r3
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <_sbrk+0x64>)
 8002d88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b006      	add	sp, #24
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20002000 	.word	0x20002000
 8002d98:	00000400 	.word	0x00000400
 8002d9c:	20000258 	.word	0x20000258
 8002da0:	20000270 	.word	0x20000270

08002da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002db0:	4813      	ldr	r0, [pc, #76]	; (8002e00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002db2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002db4:	4813      	ldr	r0, [pc, #76]	; (8002e04 <LoopForever+0x6>)
    LDR R1, [R0]
 8002db6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002db8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <LoopForever+0xa>)
    CMP R1, R2
 8002dbc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002dbe:	d105      	bne.n	8002dcc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002dc0:	4812      	ldr	r0, [pc, #72]	; (8002e0c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002dc2:	4913      	ldr	r1, [pc, #76]	; (8002e10 <LoopForever+0x12>)
    STR R1, [R0]
 8002dc4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002dc6:	4813      	ldr	r0, [pc, #76]	; (8002e14 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002dc8:	4913      	ldr	r1, [pc, #76]	; (8002e18 <LoopForever+0x1a>)
    STR R1, [R0]
 8002dca:	6001      	str	r1, [r0, #0]

08002dcc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dcc:	4813      	ldr	r0, [pc, #76]	; (8002e1c <LoopForever+0x1e>)
  ldr r1, =_edata
 8002dce:	4914      	ldr	r1, [pc, #80]	; (8002e20 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <LoopForever+0x26>)
  movs r3, #0
 8002dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd4:	e002      	b.n	8002ddc <LoopCopyDataInit>

08002dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dda:	3304      	adds	r3, #4

08002ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de0:	d3f9      	bcc.n	8002dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de2:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002de4:	4c11      	ldr	r4, [pc, #68]	; (8002e2c <LoopForever+0x2e>)
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de8:	e001      	b.n	8002dee <LoopFillZerobss>

08002dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dec:	3204      	adds	r2, #4

08002dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df0:	d3fb      	bcc.n	8002dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002df2:	f7ff ffd7 	bl	8002da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df6:	f001 fea7 	bl	8004b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfa:	f7ff fc3b 	bl	8002674 <main>

08002dfe <LoopForever>:

LoopForever:
    b LoopForever
 8002dfe:	e7fe      	b.n	8002dfe <LoopForever>
   ldr   r0, =_estack
 8002e00:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002e04:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002e08:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002e0c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002e10:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002e14:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002e18:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e20:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e24:	08007fcc 	.word	0x08007fcc
  ldr r2, =_sbss
 8002e28:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e2c:	20000270 	.word	0x20000270

08002e30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e30:	e7fe      	b.n	8002e30 <ADC1_IRQHandler>
	...

08002e34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e3a:	1dfb      	adds	r3, r7, #7
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_Init+0x3c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_Init+0x3c>)
 8002e46:	2140      	movs	r1, #64	; 0x40
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	f000 f811 	bl	8002e74 <HAL_InitTick>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e001      	b.n	8002e62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e5e:	f7ff fe75 	bl	8002b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	781b      	ldrb	r3, [r3, #0]
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	40022000 	.word	0x40022000

08002e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_InitTick+0x5c>)
 8002e7e:	681c      	ldr	r4, [r3, #0]
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_InitTick+0x60>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	0019      	movs	r1, r3
 8002e86:	23fa      	movs	r3, #250	; 0xfa
 8002e88:	0098      	lsls	r0, r3, #2
 8002e8a:	f7fd f959 	bl	8000140 <__udivsi3>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	0019      	movs	r1, r3
 8002e92:	0020      	movs	r0, r4
 8002e94:	f7fd f954 	bl	8000140 <__udivsi3>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f000 f905 	bl	80030aa <HAL_SYSTICK_Config>
 8002ea0:	1e03      	subs	r3, r0, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e00f      	b.n	8002ec8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d80b      	bhi.n	8002ec6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	425b      	negs	r3, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 f8e2 	bl	8003080 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_InitTick+0x64>)
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e000      	b.n	8002ec8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b003      	add	sp, #12
 8002ece:	bd90      	pop	{r4, r7, pc}
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	20000008 	.word	0x20000008
 8002ed8:	20000004 	.word	0x20000004

08002edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_IncTick+0x1c>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_IncTick+0x20>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	18d2      	adds	r2, r2, r3
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <HAL_IncTick+0x20>)
 8002eee:	601a      	str	r2, [r3, #0]
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	2000025c 	.word	0x2000025c

08002f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  return uwTick;
 8002f04:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <HAL_GetTick+0x10>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	2000025c 	.word	0x2000025c

08002f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff fff0 	bl	8002f00 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	d005      	beq.n	8002f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_Delay+0x44>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	001a      	movs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	f7ff ffe0 	bl	8002f00 <HAL_GetTick>
 8002f40:	0002      	movs	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d8f7      	bhi.n	8002f3c <HAL_Delay+0x28>
  {
  }
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000008 	.word	0x20000008

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	0002      	movs	r2, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	1dfb      	adds	r3, r7, #7
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f70:	d828      	bhi.n	8002fc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f72:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <__NVIC_SetPriority+0xd4>)
 8002f74:	1dfb      	adds	r3, r7, #7
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	33c0      	adds	r3, #192	; 0xc0
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	589b      	ldr	r3, [r3, r2]
 8002f82:	1dfa      	adds	r2, r7, #7
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	0011      	movs	r1, r2
 8002f88:	2203      	movs	r2, #3
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	00d2      	lsls	r2, r2, #3
 8002f8e:	21ff      	movs	r1, #255	; 0xff
 8002f90:	4091      	lsls	r1, r2
 8002f92:	000a      	movs	r2, r1
 8002f94:	43d2      	mvns	r2, r2
 8002f96:	401a      	ands	r2, r3
 8002f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	2303      	movs	r3, #3
 8002faa:	4003      	ands	r3, r0
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb0:	481f      	ldr	r0, [pc, #124]	; (8003030 <__NVIC_SetPriority+0xd4>)
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	33c0      	adds	r3, #192	; 0xc0
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fc2:	e031      	b.n	8003028 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <__NVIC_SetPriority+0xd8>)
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	0019      	movs	r1, r3
 8002fcc:	230f      	movs	r3, #15
 8002fce:	400b      	ands	r3, r1
 8002fd0:	3b08      	subs	r3, #8
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3306      	adds	r3, #6
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	18d3      	adds	r3, r2, r3
 8002fda:	3304      	adds	r3, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	1dfa      	adds	r2, r7, #7
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	0011      	movs	r1, r2
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	00d2      	lsls	r2, r2, #3
 8002fea:	21ff      	movs	r1, #255	; 0xff
 8002fec:	4091      	lsls	r1, r2
 8002fee:	000a      	movs	r2, r1
 8002ff0:	43d2      	mvns	r2, r2
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	019b      	lsls	r3, r3, #6
 8002ffa:	22ff      	movs	r2, #255	; 0xff
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	1dfb      	adds	r3, r7, #7
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	0018      	movs	r0, r3
 8003004:	2303      	movs	r3, #3
 8003006:	4003      	ands	r3, r0
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800300c:	4809      	ldr	r0, [pc, #36]	; (8003034 <__NVIC_SetPriority+0xd8>)
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	001c      	movs	r4, r3
 8003014:	230f      	movs	r3, #15
 8003016:	4023      	ands	r3, r4
 8003018:	3b08      	subs	r3, #8
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	430a      	orrs	r2, r1
 800301e:	3306      	adds	r3, #6
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	18c3      	adds	r3, r0, r3
 8003024:	3304      	adds	r3, #4
 8003026:	601a      	str	r2, [r3, #0]
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b003      	add	sp, #12
 800302e:	bd90      	pop	{r4, r7, pc}
 8003030:	e000e100 	.word	0xe000e100
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1e5a      	subs	r2, r3, #1
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	045b      	lsls	r3, r3, #17
 8003048:	429a      	cmp	r2, r3
 800304a:	d301      	bcc.n	8003050 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304c:	2301      	movs	r3, #1
 800304e:	e010      	b.n	8003072 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <SysTick_Config+0x44>)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	3a01      	subs	r2, #1
 8003056:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003058:	2301      	movs	r3, #1
 800305a:	425b      	negs	r3, r3
 800305c:	2103      	movs	r1, #3
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff ff7c 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <SysTick_Config+0x44>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306a:	4b04      	ldr	r3, [pc, #16]	; (800307c <SysTick_Config+0x44>)
 800306c:	2207      	movs	r2, #7
 800306e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003070:	2300      	movs	r3, #0
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	210f      	movs	r1, #15
 800308c:	187b      	adds	r3, r7, r1
 800308e:	1c02      	adds	r2, r0, #0
 8003090:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	187b      	adds	r3, r7, r1
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b25b      	sxtb	r3, r3
 800309a:	0011      	movs	r1, r2
 800309c:	0018      	movs	r0, r3
 800309e:	f7ff ff5d 	bl	8002f5c <__NVIC_SetPriority>
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b004      	add	sp, #16
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff ffbf 	bl	8003038 <SysTick_Config>
 80030ba:	0003      	movs	r3, r0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80030da:	e14f      	b.n	800337c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4091      	lsls	r1, r2
 80030e6:	000a      	movs	r2, r1
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d100      	bne.n	80030f4 <HAL_GPIO_Init+0x30>
 80030f2:	e140      	b.n	8003376 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2203      	movs	r2, #3
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d005      	beq.n	800310c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003108:	2b02      	cmp	r3, #2
 800310a:	d130      	bne.n	800316e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	409a      	lsls	r2, r3
 800311a:	0013      	movs	r3, r2
 800311c:	43da      	mvns	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	409a      	lsls	r2, r3
 800312e:	0013      	movs	r3, r2
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003142:	2201      	movs	r2, #1
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
 8003148:	0013      	movs	r3, r2
 800314a:	43da      	mvns	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	2201      	movs	r2, #1
 800315a:	401a      	ands	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	409a      	lsls	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	4013      	ands	r3, r2
 8003176:	2b03      	cmp	r3, #3
 8003178:	d017      	beq.n	80031aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	409a      	lsls	r2, r3
 8003188:	0013      	movs	r3, r2
 800318a:	43da      	mvns	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2203      	movs	r2, #3
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d123      	bne.n	80031fe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	08da      	lsrs	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3208      	adds	r2, #8
 80031be:	0092      	lsls	r2, r2, #2
 80031c0:	58d3      	ldr	r3, [r2, r3]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2207      	movs	r2, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	409a      	lsls	r2, r3
 80031d0:	0013      	movs	r3, r2
 80031d2:	43da      	mvns	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2107      	movs	r1, #7
 80031e2:	400b      	ands	r3, r1
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	08da      	lsrs	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3208      	adds	r2, #8
 80031f8:	0092      	lsls	r2, r2, #2
 80031fa:	6939      	ldr	r1, [r7, #16]
 80031fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2203      	movs	r2, #3
 800320a:	409a      	lsls	r2, r3
 800320c:	0013      	movs	r3, r2
 800320e:	43da      	mvns	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2203      	movs	r2, #3
 800321c:	401a      	ands	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	0013      	movs	r3, r2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	23c0      	movs	r3, #192	; 0xc0
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	4013      	ands	r3, r2
 800323c:	d100      	bne.n	8003240 <HAL_GPIO_Init+0x17c>
 800323e:	e09a      	b.n	8003376 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003240:	4b54      	ldr	r3, [pc, #336]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 8003242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003244:	4b53      	ldr	r3, [pc, #332]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 8003246:	2101      	movs	r1, #1
 8003248:	430a      	orrs	r2, r1
 800324a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_GPIO_Init+0x2d4>)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	589b      	ldr	r3, [r3, r2]
 8003258:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2203      	movs	r2, #3
 800325e:	4013      	ands	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	220f      	movs	r2, #15
 8003264:	409a      	lsls	r2, r3
 8003266:	0013      	movs	r3, r2
 8003268:	43da      	mvns	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	23a0      	movs	r3, #160	; 0xa0
 8003274:	05db      	lsls	r3, r3, #23
 8003276:	429a      	cmp	r2, r3
 8003278:	d019      	beq.n	80032ae <HAL_GPIO_Init+0x1ea>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a47      	ldr	r2, [pc, #284]	; (800339c <HAL_GPIO_Init+0x2d8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_Init+0x1e6>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a46      	ldr	r2, [pc, #280]	; (80033a0 <HAL_GPIO_Init+0x2dc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00d      	beq.n	80032a6 <HAL_GPIO_Init+0x1e2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a45      	ldr	r2, [pc, #276]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <HAL_GPIO_Init+0x1de>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a44      	ldr	r2, [pc, #272]	; (80033a8 <HAL_GPIO_Init+0x2e4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_GPIO_Init+0x1da>
 800329a:	2305      	movs	r3, #5
 800329c:	e008      	b.n	80032b0 <HAL_GPIO_Init+0x1ec>
 800329e:	2306      	movs	r3, #6
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x1ec>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_Init+0x1ec>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_Init+0x1ec>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_Init+0x1ec>
 80032ae:	2300      	movs	r3, #0
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	2103      	movs	r1, #3
 80032b4:	400a      	ands	r2, r1
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	4093      	lsls	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c0:	4935      	ldr	r1, [pc, #212]	; (8003398 <HAL_GPIO_Init+0x2d4>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3302      	adds	r3, #2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43da      	mvns	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	025b      	lsls	r3, r3, #9
 80032e6:	4013      	ands	r3, r2
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032f8:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43da      	mvns	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	029b      	lsls	r3, r3, #10
 8003310:	4013      	ands	r3, r2
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800331c:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43da      	mvns	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	035b      	lsls	r3, r3, #13
 800333a:	4013      	ands	r3, r2
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	43da      	mvns	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	039b      	lsls	r3, r3, #14
 8003364:	4013      	ands	r3, r2
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3301      	adds	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	40da      	lsrs	r2, r3
 8003384:	1e13      	subs	r3, r2, #0
 8003386:	d000      	beq.n	800338a <HAL_GPIO_Init+0x2c6>
 8003388:	e6a8      	b.n	80030dc <HAL_GPIO_Init+0x18>
  }
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b006      	add	sp, #24
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	40010000 	.word	0x40010000
 800339c:	50000400 	.word	0x50000400
 80033a0:	50000800 	.word	0x50000800
 80033a4:	50000c00 	.word	0x50000c00
 80033a8:	50001c00 	.word	0x50001c00
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e082      	b.n	80034c8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2241      	movs	r2, #65	; 0x41
 80033c6:	5c9b      	ldrb	r3, [r3, r2]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2240      	movs	r2, #64	; 0x40
 80033d2:	2100      	movs	r1, #0
 80033d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f7ff fbcb 	bl	8002b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2241      	movs	r2, #65	; 0x41
 80033e2:	2124      	movs	r1, #36	; 0x24
 80033e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	438a      	bics	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4934      	ldr	r1, [pc, #208]	; (80034d0 <HAL_I2C_Init+0x120>)
 8003400:	400a      	ands	r2, r1
 8003402:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4931      	ldr	r1, [pc, #196]	; (80034d4 <HAL_I2C_Init+0x124>)
 8003410:	400a      	ands	r2, r1
 8003412:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d108      	bne.n	800342e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	0209      	lsls	r1, r1, #8
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	e007      	b.n	800343e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2184      	movs	r1, #132	; 0x84
 8003438:	0209      	lsls	r1, r1, #8
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d104      	bne.n	8003450 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	491f      	ldr	r1, [pc, #124]	; (80034d8 <HAL_I2C_Init+0x128>)
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	491a      	ldr	r1, [pc, #104]	; (80034d4 <HAL_I2C_Init+0x124>)
 800346c:	400a      	ands	r2, r1
 800346e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	431a      	orrs	r2, r3
 800347a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69d9      	ldr	r1, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	430a      	orrs	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2241      	movs	r2, #65	; 0x41
 80034b4:	2120      	movs	r1, #32
 80034b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2242      	movs	r2, #66	; 0x42
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	f0ffffff 	.word	0xf0ffffff
 80034d4:	ffff7fff 	.word	0xffff7fff
 80034d8:	02008000 	.word	0x02008000

080034dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	0008      	movs	r0, r1
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	0019      	movs	r1, r3
 80034ea:	230a      	movs	r3, #10
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	1c02      	adds	r2, r0, #0
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	2308      	movs	r3, #8
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	1c0a      	adds	r2, r1, #0
 80034f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2241      	movs	r2, #65	; 0x41
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	d000      	beq.n	8003508 <HAL_I2C_Master_Transmit+0x2c>
 8003506:	e0e7      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Master_Transmit+0x3a>
 8003512:	2302      	movs	r3, #2
 8003514:	e0e1      	b.n	80036da <HAL_I2C_Master_Transmit+0x1fe>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2240      	movs	r2, #64	; 0x40
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800351e:	f7ff fcef 	bl	8002f00 <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	0219      	lsls	r1, r3, #8
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2319      	movs	r3, #25
 8003532:	2201      	movs	r2, #1
 8003534:	f000 fa04 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0cc      	b.n	80036da <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2241      	movs	r2, #65	; 0x41
 8003544:	2121      	movs	r1, #33	; 0x21
 8003546:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2242      	movs	r2, #66	; 0x42
 800354c:	2110      	movs	r1, #16
 800354e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2208      	movs	r2, #8
 8003560:	18ba      	adds	r2, r7, r2
 8003562:	8812      	ldrh	r2, [r2, #0]
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d911      	bls.n	800359a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	b2da      	uxtb	r2, r3
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	045c      	lsls	r4, r3, #17
 8003586:	230a      	movs	r3, #10
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	8819      	ldrh	r1, [r3, #0]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	4b55      	ldr	r3, [pc, #340]	; (80036e4 <HAL_I2C_Master_Transmit+0x208>)
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	0023      	movs	r3, r4
 8003594:	f000 fb74 	bl	8003c80 <I2C_TransferConfig>
 8003598:	e075      	b.n	8003686 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	049c      	lsls	r4, r3, #18
 80035ae:	230a      	movs	r3, #10
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	8819      	ldrh	r1, [r3, #0]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_I2C_Master_Transmit+0x208>)
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	0023      	movs	r3, r4
 80035bc:	f000 fb60 	bl	8003c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035c0:	e061      	b.n	8003686 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 f9f8 	bl	80039be <I2C_WaitOnTXISFlagUntilTimeout>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e081      	b.n	80036da <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	781a      	ldrb	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03a      	beq.n	8003686 <HAL_I2C_Master_Transmit+0x1aa>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d136      	bne.n	8003686 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	0013      	movs	r3, r2
 8003622:	2200      	movs	r2, #0
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	f000 f98b 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800362a:	1e03      	subs	r3, r0, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e053      	b.n	80036da <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	2bff      	cmp	r3, #255	; 0xff
 800363a:	d911      	bls.n	8003660 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	22ff      	movs	r2, #255	; 0xff
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	b2da      	uxtb	r2, r3
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	045c      	lsls	r4, r3, #17
 800364c:	230a      	movs	r3, #10
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	8819      	ldrh	r1, [r3, #0]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	2300      	movs	r3, #0
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	0023      	movs	r3, r4
 800365a:	f000 fb11 	bl	8003c80 <I2C_TransferConfig>
 800365e:	e012      	b.n	8003686 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	b2da      	uxtb	r2, r3
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	049c      	lsls	r4, r3, #18
 8003674:	230a      	movs	r3, #10
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	8819      	ldrh	r1, [r3, #0]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	0023      	movs	r3, r4
 8003682:	f000 fafd 	bl	8003c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d198      	bne.n	80035c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f9d0 	bl	8003a3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01a      	b.n	80036da <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2220      	movs	r2, #32
 80036aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	490c      	ldr	r1, [pc, #48]	; (80036e8 <HAL_I2C_Master_Transmit+0x20c>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2241      	movs	r2, #65	; 0x41
 80036c0:	2120      	movs	r1, #32
 80036c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2242      	movs	r2, #66	; 0x42
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	2100      	movs	r1, #0
 80036d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80036d8:	2302      	movs	r3, #2
  }
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b007      	add	sp, #28
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	80002000 	.word	0x80002000
 80036e8:	fe00e800 	.word	0xfe00e800

080036ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	0008      	movs	r0, r1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	0019      	movs	r1, r3
 80036fa:	230a      	movs	r3, #10
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	1c02      	adds	r2, r0, #0
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	2308      	movs	r3, #8
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	1c0a      	adds	r2, r1, #0
 8003708:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2241      	movs	r2, #65	; 0x41
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	d000      	beq.n	8003718 <HAL_I2C_Master_Receive+0x2c>
 8003716:	e0e8      	b.n	80038ea <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	5c9b      	ldrb	r3, [r3, r2]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_I2C_Master_Receive+0x3a>
 8003722:	2302      	movs	r3, #2
 8003724:	e0e2      	b.n	80038ec <HAL_I2C_Master_Receive+0x200>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2240      	movs	r2, #64	; 0x40
 800372a:	2101      	movs	r1, #1
 800372c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800372e:	f7ff fbe7 	bl	8002f00 <HAL_GetTick>
 8003732:	0003      	movs	r3, r0
 8003734:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	0219      	lsls	r1, r3, #8
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2319      	movs	r3, #25
 8003742:	2201      	movs	r2, #1
 8003744:	f000 f8fc 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003748:	1e03      	subs	r3, r0, #0
 800374a:	d001      	beq.n	8003750 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0cd      	b.n	80038ec <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2241      	movs	r2, #65	; 0x41
 8003754:	2122      	movs	r1, #34	; 0x22
 8003756:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2242      	movs	r2, #66	; 0x42
 800375c:	2110      	movs	r1, #16
 800375e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2208      	movs	r2, #8
 8003770:	18ba      	adds	r2, r7, r2
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2bff      	cmp	r3, #255	; 0xff
 8003784:	d911      	bls.n	80037aa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003790:	b2da      	uxtb	r2, r3
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	045c      	lsls	r4, r3, #17
 8003796:	230a      	movs	r3, #10
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	8819      	ldrh	r1, [r3, #0]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	4b55      	ldr	r3, [pc, #340]	; (80038f4 <HAL_I2C_Master_Receive+0x208>)
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	0023      	movs	r3, r4
 80037a4:	f000 fa6c 	bl	8003c80 <I2C_TransferConfig>
 80037a8:	e076      	b.n	8003898 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	049c      	lsls	r4, r3, #18
 80037be:	230a      	movs	r3, #10
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	8819      	ldrh	r1, [r3, #0]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <HAL_I2C_Master_Receive+0x208>)
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	0023      	movs	r3, r4
 80037cc:	f000 fa58 	bl	8003c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037d0:	e062      	b.n	8003898 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f96b 	bl	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e082      	b.n	80038ec <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03a      	beq.n	8003898 <HAL_I2C_Master_Receive+0x1ac>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d136      	bne.n	8003898 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800382a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	0013      	movs	r3, r2
 8003834:	2200      	movs	r2, #0
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	f000 f882 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800383c:	1e03      	subs	r3, r0, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e053      	b.n	80038ec <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2bff      	cmp	r3, #255	; 0xff
 800384c:	d911      	bls.n	8003872 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	b2da      	uxtb	r2, r3
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	045c      	lsls	r4, r3, #17
 800385e:	230a      	movs	r3, #10
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	8819      	ldrh	r1, [r3, #0]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	0023      	movs	r3, r4
 800386c:	f000 fa08 	bl	8003c80 <I2C_TransferConfig>
 8003870:	e012      	b.n	8003898 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	b2da      	uxtb	r2, r3
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	049c      	lsls	r4, r3, #18
 8003886:	230a      	movs	r3, #10
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	8819      	ldrh	r1, [r3, #0]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	2300      	movs	r3, #0
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	0023      	movs	r3, r4
 8003894:	f000 f9f4 	bl	8003c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d197      	bne.n	80037d2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 f8c7 	bl	8003a3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e01a      	b.n	80038ec <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2220      	movs	r2, #32
 80038bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	490b      	ldr	r1, [pc, #44]	; (80038f8 <HAL_I2C_Master_Receive+0x20c>)
 80038ca:	400a      	ands	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2241      	movs	r2, #65	; 0x41
 80038d2:	2120      	movs	r1, #32
 80038d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2242      	movs	r2, #66	; 0x42
 80038da:	2100      	movs	r1, #0
 80038dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2240      	movs	r2, #64	; 0x40
 80038e2:	2100      	movs	r1, #0
 80038e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b007      	add	sp, #28
 80038f2:	bd90      	pop	{r4, r7, pc}
 80038f4:	80002400 	.word	0x80002400
 80038f8:	fe00e800 	.word	0xfe00e800

080038fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2202      	movs	r2, #2
 800390c:	4013      	ands	r3, r2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d103      	bne.n	800391a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2201      	movs	r2, #1
 8003922:	4013      	ands	r3, r2
 8003924:	2b01      	cmp	r3, #1
 8003926:	d007      	beq.n	8003938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2101      	movs	r1, #1
 8003934:	430a      	orrs	r2, r1
 8003936:	619a      	str	r2, [r3, #24]
  }
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003950:	e021      	b.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	3301      	adds	r3, #1
 8003956:	d01e      	beq.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003958:	f7ff fad2 	bl	8002f00 <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d113      	bne.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	2220      	movs	r2, #32
 8003974:	431a      	orrs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2241      	movs	r2, #65	; 0x41
 800397e:	2120      	movs	r1, #32
 8003980:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2242      	movs	r2, #66	; 0x42
 8003986:	2100      	movs	r1, #0
 8003988:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2240      	movs	r2, #64	; 0x40
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	425a      	negs	r2, r3
 80039a6:	4153      	adcs	r3, r2
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	001a      	movs	r2, r3
 80039ac:	1dfb      	adds	r3, r7, #7
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d0ce      	beq.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b004      	add	sp, #16
 80039bc:	bd80      	pop	{r7, pc}

080039be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039ca:	e02b      	b.n	8003a24 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f8da 	bl	8003b8c <I2C_IsAcknowledgeFailed>
 80039d8:	1e03      	subs	r3, r0, #0
 80039da:	d001      	beq.n	80039e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e029      	b.n	8003a34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3301      	adds	r3, #1
 80039e4:	d01e      	beq.n	8003a24 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e6:	f7ff fa8b 	bl	8002f00 <HAL_GetTick>
 80039ea:	0002      	movs	r2, r0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d113      	bne.n	8003a24 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	2220      	movs	r2, #32
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2241      	movs	r2, #65	; 0x41
 8003a0c:	2120      	movs	r1, #32
 8003a0e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2242      	movs	r2, #66	; 0x42
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2240      	movs	r2, #64	; 0x40
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e007      	b.n	8003a34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d1cc      	bne.n	80039cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b004      	add	sp, #16
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a48:	e028      	b.n	8003a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 f89b 	bl	8003b8c <I2C_IsAcknowledgeFailed>
 8003a56:	1e03      	subs	r3, r0, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e026      	b.n	8003aac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	f7ff fa4f 	bl	8002f00 <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d302      	bcc.n	8003a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d113      	bne.n	8003a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	2220      	movs	r2, #32
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2241      	movs	r2, #65	; 0x41
 8003a84:	2120      	movs	r1, #32
 8003a86:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2242      	movs	r2, #66	; 0x42
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	2100      	movs	r1, #0
 8003a96:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e007      	b.n	8003aac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d1cf      	bne.n	8003a4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	0018      	movs	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b004      	add	sp, #16
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac0:	e055      	b.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 f85f 	bl	8003b8c <I2C_IsAcknowledgeFailed>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e053      	b.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2220      	movs	r2, #32
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d129      	bne.n	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2204      	movs	r2, #4
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d105      	bne.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e03f      	b.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2220      	movs	r2, #32
 8003b04:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	491d      	ldr	r1, [pc, #116]	; (8003b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2241      	movs	r2, #65	; 0x41
 8003b20:	2120      	movs	r1, #32
 8003b22:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2242      	movs	r2, #66	; 0x42
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e022      	b.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b38:	f7ff f9e2 	bl	8002f00 <HAL_GetTick>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d302      	bcc.n	8003b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	2220      	movs	r2, #32
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2241      	movs	r2, #65	; 0x41
 8003b5e:	2120      	movs	r1, #32
 8003b60:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2240      	movs	r2, #64	; 0x40
 8003b66:	2100      	movs	r1, #0
 8003b68:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2204      	movs	r2, #4
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d1a2      	bne.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b004      	add	sp, #16
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	fe00e800 	.word	0xfe00e800

08003b8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d164      	bne.n	8003c70 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	049b      	lsls	r3, r3, #18
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	049b      	lsls	r3, r3, #18
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d02b      	beq.n	8003c12 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	01c9      	lsls	r1, r1, #7
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bcc:	e021      	b.n	8003c12 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	d01e      	beq.n	8003c12 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd4:	f7ff f994 	bl	8002f00 <HAL_GetTick>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d302      	bcc.n	8003bea <I2C_IsAcknowledgeFailed+0x5e>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d113      	bne.n	8003c12 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	2220      	movs	r2, #32
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2241      	movs	r2, #65	; 0x41
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2242      	movs	r2, #66	; 0x42
 8003c02:	2100      	movs	r1, #0
 8003c04:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2240      	movs	r2, #64	; 0x40
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e02f      	b.n	8003c72 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d1d6      	bne.n	8003bce <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7ff fe62 	bl	80038fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	490e      	ldr	r1, [pc, #56]	; (8003c7c <I2C_IsAcknowledgeFailed+0xf0>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2241      	movs	r2, #65	; 0x41
 8003c58:	2120      	movs	r1, #32
 8003c5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2242      	movs	r2, #66	; 0x42
 8003c60:	2100      	movs	r1, #0
 8003c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2240      	movs	r2, #64	; 0x40
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b004      	add	sp, #16
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	fe00e800 	.word	0xfe00e800

08003c80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	0008      	movs	r0, r1
 8003c8a:	0011      	movs	r1, r2
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	240a      	movs	r4, #10
 8003c90:	193b      	adds	r3, r7, r4
 8003c92:	1c02      	adds	r2, r0, #0
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	2009      	movs	r0, #9
 8003c98:	183b      	adds	r3, r7, r0
 8003c9a:	1c0a      	adds	r2, r1, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	0d51      	lsrs	r1, r2, #21
 8003ca8:	2280      	movs	r2, #128	; 0x80
 8003caa:	00d2      	lsls	r2, r2, #3
 8003cac:	400a      	ands	r2, r1
 8003cae:	490e      	ldr	r1, [pc, #56]	; (8003ce8 <I2C_TransferConfig+0x68>)
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	43d2      	mvns	r2, r2
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	059b      	lsls	r3, r3, #22
 8003cbe:	0d9a      	lsrs	r2, r3, #22
 8003cc0:	183b      	adds	r3, r7, r0
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	0418      	lsls	r0, r3, #16
 8003cc6:	23ff      	movs	r3, #255	; 0xff
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	4003      	ands	r3, r0
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b005      	add	sp, #20
 8003ce4:	bd90      	pop	{r4, r7, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	03ff63ff 	.word	0x03ff63ff

08003cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2241      	movs	r2, #65	; 0x41
 8003cfa:	5c9b      	ldrb	r3, [r3, r2]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d138      	bne.n	8003d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2240      	movs	r2, #64	; 0x40
 8003d06:	5c9b      	ldrb	r3, [r3, r2]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e032      	b.n	8003d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2240      	movs	r2, #64	; 0x40
 8003d14:	2101      	movs	r1, #1
 8003d16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2241      	movs	r2, #65	; 0x41
 8003d1c:	2124      	movs	r1, #36	; 0x24
 8003d1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	438a      	bics	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4911      	ldr	r1, [pc, #68]	; (8003d80 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2241      	movs	r2, #65	; 0x41
 8003d64:	2120      	movs	r1, #32
 8003d66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2240      	movs	r2, #64	; 0x40
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b002      	add	sp, #8
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	ffffefff 	.word	0xffffefff

08003d84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2241      	movs	r2, #65	; 0x41
 8003d92:	5c9b      	ldrb	r3, [r3, r2]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d139      	bne.n	8003e0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2240      	movs	r2, #64	; 0x40
 8003d9e:	5c9b      	ldrb	r3, [r3, r2]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e033      	b.n	8003e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	2101      	movs	r1, #1
 8003dae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2241      	movs	r2, #65	; 0x41
 8003db4:	2124      	movs	r1, #36	; 0x24
 8003db6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2241      	movs	r2, #65	; 0x41
 8003dfe:	2120      	movs	r1, #32
 8003e00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e000      	b.n	8003e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
  }
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	fffff0ff 	.word	0xfffff0ff

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b5b0      	push	{r4, r5, r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f000 fb6c 	bl	8004508 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e30:	4bc8      	ldr	r3, [pc, #800]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	220c      	movs	r2, #12
 8003e36:	4013      	ands	r3, r2
 8003e38:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e3a:	4bc6      	ldr	r3, [pc, #792]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	025b      	lsls	r3, r3, #9
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <HAL_RCC_OscConfig+0x36>
 8003e50:	e07d      	b.n	8003f4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d007      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d112      	bne.n	8003e84 <HAL_RCC_OscConfig+0x68>
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	025b      	lsls	r3, r3, #9
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	4bba      	ldr	r3, [pc, #744]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	4013      	ands	r3, r2
 8003e72:	d100      	bne.n	8003e76 <HAL_RCC_OscConfig+0x5a>
 8003e74:	e06a      	b.n	8003f4c <HAL_RCC_OscConfig+0x130>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d166      	bne.n	8003f4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f000 fb42 	bl	8004508 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	025b      	lsls	r3, r3, #9
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x84>
 8003e90:	4bb0      	ldr	r3, [pc, #704]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4baf      	ldr	r3, [pc, #700]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	0249      	lsls	r1, r1, #9
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e027      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	23a0      	movs	r3, #160	; 0xa0
 8003ea6:	02db      	lsls	r3, r3, #11
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d10e      	bne.n	8003eca <HAL_RCC_OscConfig+0xae>
 8003eac:	4ba9      	ldr	r3, [pc, #676]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4ba8      	ldr	r3, [pc, #672]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	02c9      	lsls	r1, r1, #11
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	4ba6      	ldr	r3, [pc, #664]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4ba5      	ldr	r3, [pc, #660]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	0249      	lsls	r1, r1, #9
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e012      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003eca:	4ba2      	ldr	r3, [pc, #648]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4ba1      	ldr	r3, [pc, #644]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003ed0:	49a1      	ldr	r1, [pc, #644]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	4b9f      	ldr	r3, [pc, #636]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	4013      	ands	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4b9b      	ldr	r3, [pc, #620]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b9a      	ldr	r3, [pc, #616]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003eea:	499c      	ldr	r1, [pc, #624]	; (800415c <HAL_RCC_OscConfig+0x340>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d014      	beq.n	8003f22 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7ff f802 	bl	8002f00 <HAL_GetTick>
 8003efc:	0003      	movs	r3, r0
 8003efe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f02:	f7fe fffd 	bl	8002f00 <HAL_GetTick>
 8003f06:	0002      	movs	r2, r0
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b64      	cmp	r3, #100	; 0x64
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e2f9      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f14:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	029b      	lsls	r3, r3, #10
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0xe6>
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fe ffed 	bl	8002f00 <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fe ffe8 	bl	8002f00 <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e2e4      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f3e:	4b85      	ldr	r3, [pc, #532]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	4013      	ands	r3, r2
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x110>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2202      	movs	r2, #2
 8003f54:	4013      	ands	r3, r2
 8003f56:	d100      	bne.n	8003f5a <HAL_RCC_OscConfig+0x13e>
 8003f58:	e099      	b.n	800408e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	2220      	movs	r2, #32
 8003f64:	4013      	ands	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003f68:	4b7a      	ldr	r3, [pc, #488]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b79      	ldr	r3, [pc, #484]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003f6e:	2120      	movs	r1, #32
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	2220      	movs	r2, #32
 8003f78:	4393      	bics	r3, r2
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d005      	beq.n	8003f8e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d13e      	bne.n	8004006 <HAL_RCC_OscConfig+0x1ea>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d13b      	bne.n	8004006 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f8e:	4b71      	ldr	r3, [pc, #452]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2204      	movs	r2, #4
 8003f94:	4013      	ands	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x186>
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e2b2      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a6e      	ldr	r2, [pc, #440]	; (8004160 <HAL_RCC_OscConfig+0x344>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	021a      	lsls	r2, r3, #8
 8003fb2:	4b68      	ldr	r3, [pc, #416]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003fb8:	4b66      	ldr	r3, [pc, #408]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2209      	movs	r2, #9
 8003fbe:	4393      	bics	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	4b64      	ldr	r3, [pc, #400]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 fbeb 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8003fce:	0001      	movs	r1, r0
 8003fd0:	4b60      	ldr	r3, [pc, #384]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	220f      	movs	r2, #15
 8003fd8:	4013      	ands	r3, r2
 8003fda:	4a62      	ldr	r2, [pc, #392]	; (8004164 <HAL_RCC_OscConfig+0x348>)
 8003fdc:	5cd3      	ldrb	r3, [r2, r3]
 8003fde:	000a      	movs	r2, r1
 8003fe0:	40da      	lsrs	r2, r3
 8003fe2:	4b61      	ldr	r3, [pc, #388]	; (8004168 <HAL_RCC_OscConfig+0x34c>)
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003fe6:	4b61      	ldr	r3, [pc, #388]	; (800416c <HAL_RCC_OscConfig+0x350>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2513      	movs	r5, #19
 8003fec:	197c      	adds	r4, r7, r5
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7fe ff40 	bl	8002e74 <HAL_InitTick>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003ff8:	197b      	adds	r3, r7, r5
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d046      	beq.n	800408e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004000:	197b      	adds	r3, r7, r5
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	e280      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d027      	beq.n	800405c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800400c:	4b51      	ldr	r3, [pc, #324]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2209      	movs	r2, #9
 8004012:	4393      	bics	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	4b4f      	ldr	r3, [pc, #316]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8004018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fe ff6f 	bl	8002f00 <HAL_GetTick>
 8004022:	0003      	movs	r3, r0
 8004024:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004028:	f7fe ff6a 	bl	8002f00 <HAL_GetTick>
 800402c:	0002      	movs	r2, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e266      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800403a:	4b46      	ldr	r3, [pc, #280]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2204      	movs	r2, #4
 8004040:	4013      	ands	r3, r2
 8004042:	d0f1      	beq.n	8004028 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004044:	4b43      	ldr	r3, [pc, #268]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a45      	ldr	r2, [pc, #276]	; (8004160 <HAL_RCC_OscConfig+0x344>)
 800404a:	4013      	ands	r3, r2
 800404c:	0019      	movs	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	e018      	b.n	800408e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405c:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b3c      	ldr	r3, [pc, #240]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8004062:	2101      	movs	r1, #1
 8004064:	438a      	bics	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fe ff4a 	bl	8002f00 <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004072:	f7fe ff45 	bl	8002f00 <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e241      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004084:	4b33      	ldr	r3, [pc, #204]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2204      	movs	r2, #4
 800408a:	4013      	ands	r3, r2
 800408c:	d1f1      	bne.n	8004072 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2210      	movs	r2, #16
 8004094:	4013      	ands	r3, r2
 8004096:	d100      	bne.n	800409a <HAL_RCC_OscConfig+0x27e>
 8004098:	e0a1      	b.n	80041de <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d140      	bne.n	8004122 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4013      	ands	r3, r2
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_OscConfig+0x29c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e227      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040b8:	4b26      	ldr	r3, [pc, #152]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_RCC_OscConfig+0x354>)
 80040be:	4013      	ands	r3, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040cc:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	0a19      	lsrs	r1, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	061a      	lsls	r2, r3, #24
 80040da:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	0b5b      	lsrs	r3, r3, #13
 80040e6:	3301      	adds	r3, #1
 80040e8:	2280      	movs	r2, #128	; 0x80
 80040ea:	0212      	lsls	r2, r2, #8
 80040ec:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80040ee:	4b19      	ldr	r3, [pc, #100]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	210f      	movs	r1, #15
 80040f6:	400b      	ands	r3, r1
 80040f8:	491a      	ldr	r1, [pc, #104]	; (8004164 <HAL_RCC_OscConfig+0x348>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80040fe:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_RCC_OscConfig+0x34c>)
 8004100:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCC_OscConfig+0x350>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2513      	movs	r5, #19
 8004108:	197c      	adds	r4, r7, r5
 800410a:	0018      	movs	r0, r3
 800410c:	f7fe feb2 	bl	8002e74 <HAL_InitTick>
 8004110:	0003      	movs	r3, r0
 8004112:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004114:	197b      	adds	r3, r7, r5
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d060      	beq.n	80041de <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800411c:	197b      	adds	r3, r7, r5
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	e1f2      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03f      	beq.n	80041aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800412a:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_OscConfig+0x338>)
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	0049      	lsls	r1, r1, #1
 8004134:	430a      	orrs	r2, r1
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe fee2 	bl	8002f00 <HAL_GetTick>
 800413c:	0003      	movs	r3, r0
 800413e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004140:	e018      	b.n	8004174 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004142:	f7fe fedd 	bl	8002f00 <HAL_GetTick>
 8004146:	0002      	movs	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d911      	bls.n	8004174 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e1d9      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
 8004154:	40021000 	.word	0x40021000
 8004158:	fffeffff 	.word	0xfffeffff
 800415c:	fffbffff 	.word	0xfffbffff
 8004160:	ffffe0ff 	.word	0xffffe0ff
 8004164:	08007bc8 	.word	0x08007bc8
 8004168:	20000000 	.word	0x20000000
 800416c:	20000004 	.word	0x20000004
 8004170:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004174:	4bc9      	ldr	r3, [pc, #804]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4013      	ands	r3, r2
 800417e:	d0e0      	beq.n	8004142 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004180:	4bc6      	ldr	r3, [pc, #792]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4ac6      	ldr	r2, [pc, #792]	; (80044a0 <HAL_RCC_OscConfig+0x684>)
 8004186:	4013      	ands	r3, r2
 8004188:	0019      	movs	r1, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	4bc3      	ldr	r3, [pc, #780]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004194:	4bc1      	ldr	r3, [pc, #772]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	0a19      	lsrs	r1, r3, #8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	061a      	lsls	r2, r3, #24
 80041a2:	4bbe      	ldr	r3, [pc, #760]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	e019      	b.n	80041de <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041aa:	4bbc      	ldr	r3, [pc, #752]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4bbb      	ldr	r3, [pc, #748]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80041b0:	49bc      	ldr	r1, [pc, #752]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80041b2:	400a      	ands	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b6:	f7fe fea3 	bl	8002f00 <HAL_GetTick>
 80041ba:	0003      	movs	r3, r0
 80041bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c0:	f7fe fe9e 	bl	8002f00 <HAL_GetTick>
 80041c4:	0002      	movs	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e19a      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80041d2:	4bb2      	ldr	r3, [pc, #712]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2208      	movs	r2, #8
 80041e4:	4013      	ands	r3, r2
 80041e6:	d036      	beq.n	8004256 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d019      	beq.n	8004224 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f0:	4baa      	ldr	r3, [pc, #680]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80041f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041f4:	4ba9      	ldr	r3, [pc, #676]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80041f6:	2101      	movs	r1, #1
 80041f8:	430a      	orrs	r2, r1
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fc:	f7fe fe80 	bl	8002f00 <HAL_GetTick>
 8004200:	0003      	movs	r3, r0
 8004202:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004206:	f7fe fe7b 	bl	8002f00 <HAL_GetTick>
 800420a:	0002      	movs	r2, r0
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e177      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004218:	4ba0      	ldr	r3, [pc, #640]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	2202      	movs	r2, #2
 800421e:	4013      	ands	r3, r2
 8004220:	d0f1      	beq.n	8004206 <HAL_RCC_OscConfig+0x3ea>
 8004222:	e018      	b.n	8004256 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004224:	4b9d      	ldr	r3, [pc, #628]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004228:	4b9c      	ldr	r3, [pc, #624]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800422a:	2101      	movs	r1, #1
 800422c:	438a      	bics	r2, r1
 800422e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004230:	f7fe fe66 	bl	8002f00 <HAL_GetTick>
 8004234:	0003      	movs	r3, r0
 8004236:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423a:	f7fe fe61 	bl	8002f00 <HAL_GetTick>
 800423e:	0002      	movs	r2, r0
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e15d      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800424c:	4b93      	ldr	r3, [pc, #588]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	2202      	movs	r2, #2
 8004252:	4013      	ands	r3, r2
 8004254:	d1f1      	bne.n	800423a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2204      	movs	r2, #4
 800425c:	4013      	ands	r3, r2
 800425e:	d100      	bne.n	8004262 <HAL_RCC_OscConfig+0x446>
 8004260:	e0ae      	b.n	80043c0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004262:	2023      	movs	r0, #35	; 0x23
 8004264:	183b      	adds	r3, r7, r0
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426a:	4b8c      	ldr	r3, [pc, #560]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800426c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	055b      	lsls	r3, r3, #21
 8004272:	4013      	ands	r3, r2
 8004274:	d109      	bne.n	800428a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	4b89      	ldr	r3, [pc, #548]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427a:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800427c:	2180      	movs	r1, #128	; 0x80
 800427e:	0549      	lsls	r1, r1, #21
 8004280:	430a      	orrs	r2, r1
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004284:	183b      	adds	r3, r7, r0
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b87      	ldr	r3, [pc, #540]	; (80044a8 <HAL_RCC_OscConfig+0x68c>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	4013      	ands	r3, r2
 8004294:	d11a      	bne.n	80042cc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004296:	4b84      	ldr	r3, [pc, #528]	; (80044a8 <HAL_RCC_OscConfig+0x68c>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b83      	ldr	r3, [pc, #524]	; (80044a8 <HAL_RCC_OscConfig+0x68c>)
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	0049      	lsls	r1, r1, #1
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a4:	f7fe fe2c 	bl	8002f00 <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ae:	f7fe fe27 	bl	8002f00 <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b64      	cmp	r3, #100	; 0x64
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e123      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c0:	4b79      	ldr	r3, [pc, #484]	; (80044a8 <HAL_RCC_OscConfig+0x68c>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4013      	ands	r3, r2
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4cc>
 80042d8:	4b70      	ldr	r3, [pc, #448]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80042da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80042de:	2180      	movs	r1, #128	; 0x80
 80042e0:	0049      	lsls	r1, r1, #1
 80042e2:	430a      	orrs	r2, r1
 80042e4:	651a      	str	r2, [r3, #80]	; 0x50
 80042e6:	e031      	b.n	800434c <HAL_RCC_OscConfig+0x530>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10c      	bne.n	800430a <HAL_RCC_OscConfig+0x4ee>
 80042f0:	4b6a      	ldr	r3, [pc, #424]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80042f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042f4:	4b69      	ldr	r3, [pc, #420]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80042f6:	496b      	ldr	r1, [pc, #428]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80042f8:	400a      	ands	r2, r1
 80042fa:	651a      	str	r2, [r3, #80]	; 0x50
 80042fc:	4b67      	ldr	r3, [pc, #412]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80042fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004300:	4b66      	ldr	r3, [pc, #408]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004302:	496a      	ldr	r1, [pc, #424]	; (80044ac <HAL_RCC_OscConfig+0x690>)
 8004304:	400a      	ands	r2, r1
 8004306:	651a      	str	r2, [r3, #80]	; 0x50
 8004308:	e020      	b.n	800434c <HAL_RCC_OscConfig+0x530>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	23a0      	movs	r3, #160	; 0xa0
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	429a      	cmp	r2, r3
 8004314:	d10e      	bne.n	8004334 <HAL_RCC_OscConfig+0x518>
 8004316:	4b61      	ldr	r3, [pc, #388]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800431a:	4b60      	ldr	r3, [pc, #384]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800431c:	2180      	movs	r1, #128	; 0x80
 800431e:	00c9      	lsls	r1, r1, #3
 8004320:	430a      	orrs	r2, r1
 8004322:	651a      	str	r2, [r3, #80]	; 0x50
 8004324:	4b5d      	ldr	r3, [pc, #372]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004326:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004328:	4b5c      	ldr	r3, [pc, #368]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	0049      	lsls	r1, r1, #1
 800432e:	430a      	orrs	r2, r1
 8004330:	651a      	str	r2, [r3, #80]	; 0x50
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0x530>
 8004334:	4b59      	ldr	r3, [pc, #356]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004338:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800433a:	495a      	ldr	r1, [pc, #360]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800433c:	400a      	ands	r2, r1
 800433e:	651a      	str	r2, [r3, #80]	; 0x50
 8004340:	4b56      	ldr	r3, [pc, #344]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004344:	4b55      	ldr	r3, [pc, #340]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004346:	4959      	ldr	r1, [pc, #356]	; (80044ac <HAL_RCC_OscConfig+0x690>)
 8004348:	400a      	ands	r2, r1
 800434a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d015      	beq.n	8004380 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fe fdd4 	bl	8002f00 <HAL_GetTick>
 8004358:	0003      	movs	r3, r0
 800435a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800435c:	e009      	b.n	8004372 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435e:	f7fe fdcf 	bl	8002f00 <HAL_GetTick>
 8004362:	0002      	movs	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	4a51      	ldr	r2, [pc, #324]	; (80044b0 <HAL_RCC_OscConfig+0x694>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0ca      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004372:	4b4a      	ldr	r3, [pc, #296]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4013      	ands	r3, r2
 800437c:	d0ef      	beq.n	800435e <HAL_RCC_OscConfig+0x542>
 800437e:	e014      	b.n	80043aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004380:	f7fe fdbe 	bl	8002f00 <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004388:	e009      	b.n	800439e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fe fdb9 	bl	8002f00 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	4a46      	ldr	r2, [pc, #280]	; (80044b0 <HAL_RCC_OscConfig+0x694>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e0b4      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800439e:	4b3f      	ldr	r3, [pc, #252]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80043a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4013      	ands	r3, r2
 80043a8:	d1ef      	bne.n	800438a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043aa:	2323      	movs	r3, #35	; 0x23
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b4:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80043b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b8:	4b38      	ldr	r3, [pc, #224]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80043ba:	493e      	ldr	r1, [pc, #248]	; (80044b4 <HAL_RCC_OscConfig+0x698>)
 80043bc:	400a      	ands	r2, r1
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d100      	bne.n	80043ca <HAL_RCC_OscConfig+0x5ae>
 80043c8:	e09d      	b.n	8004506 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d100      	bne.n	80043d2 <HAL_RCC_OscConfig+0x5b6>
 80043d0:	e076      	b.n	80044c0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d145      	bne.n	8004466 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043da:	4b30      	ldr	r3, [pc, #192]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b2f      	ldr	r3, [pc, #188]	; (800449c <HAL_RCC_OscConfig+0x680>)
 80043e0:	4935      	ldr	r1, [pc, #212]	; (80044b8 <HAL_RCC_OscConfig+0x69c>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fe fd8b 	bl	8002f00 <HAL_GetTick>
 80043ea:	0003      	movs	r3, r0
 80043ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe fd86 	bl	8002f00 <HAL_GetTick>
 80043f4:	0002      	movs	r2, r0
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e082      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	049b      	lsls	r3, r3, #18
 800440a:	4013      	ands	r3, r2
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <HAL_RCC_OscConfig+0x6a0>)
 8004414:	4013      	ands	r3, r2
 8004416:	0019      	movs	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	431a      	orrs	r2, r3
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800442a:	430a      	orrs	r2, r1
 800442c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b1a      	ldr	r3, [pc, #104]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004434:	2180      	movs	r1, #128	; 0x80
 8004436:	0449      	lsls	r1, r1, #17
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fe fd60 	bl	8002f00 <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004446:	f7fe fd5b 	bl	8002f00 <HAL_GetTick>
 800444a:	0002      	movs	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e057      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	049b      	lsls	r3, r3, #18
 8004460:	4013      	ands	r3, r2
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x62a>
 8004464:	e04f      	b.n	8004506 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_RCC_OscConfig+0x680>)
 800446c:	4912      	ldr	r1, [pc, #72]	; (80044b8 <HAL_RCC_OscConfig+0x69c>)
 800446e:	400a      	ands	r2, r1
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004472:	f7fe fd45 	bl	8002f00 <HAL_GetTick>
 8004476:	0003      	movs	r3, r0
 8004478:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447c:	f7fe fd40 	bl	8002f00 <HAL_GetTick>
 8004480:	0002      	movs	r2, r0
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e03c      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_OscConfig+0x680>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	049b      	lsls	r3, r3, #18
 8004496:	4013      	ands	r3, r2
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x660>
 800449a:	e034      	b.n	8004506 <HAL_RCC_OscConfig+0x6ea>
 800449c:	40021000 	.word	0x40021000
 80044a0:	ffff1fff 	.word	0xffff1fff
 80044a4:	fffffeff 	.word	0xfffffeff
 80044a8:	40007000 	.word	0x40007000
 80044ac:	fffffbff 	.word	0xfffffbff
 80044b0:	00001388 	.word	0x00001388
 80044b4:	efffffff 	.word	0xefffffff
 80044b8:	feffffff 	.word	0xfeffffff
 80044bc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e01d      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044cc:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCC_OscConfig+0x6f4>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	025b      	lsls	r3, r3, #9
 80044d8:	401a      	ands	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	429a      	cmp	r2, r3
 80044e0:	d10f      	bne.n	8004502 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	23f0      	movs	r3, #240	; 0xf0
 80044e6:	039b      	lsls	r3, r3, #14
 80044e8:	401a      	ands	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	23c0      	movs	r3, #192	; 0xc0
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	401a      	ands	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b00a      	add	sp, #40	; 0x28
 800450e:	bdb0      	pop	{r4, r5, r7, pc}
 8004510:	40021000 	.word	0x40021000

08004514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004514:	b5b0      	push	{r4, r5, r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e128      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004528:	4b96      	ldr	r3, [pc, #600]	; (8004784 <HAL_RCC_ClockConfig+0x270>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2201      	movs	r2, #1
 800452e:	4013      	ands	r3, r2
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d91e      	bls.n	8004574 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004536:	4b93      	ldr	r3, [pc, #588]	; (8004784 <HAL_RCC_ClockConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2201      	movs	r2, #1
 800453c:	4393      	bics	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	4b90      	ldr	r3, [pc, #576]	; (8004784 <HAL_RCC_ClockConfig+0x270>)
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004548:	f7fe fcda 	bl	8002f00 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004550:	e009      	b.n	8004566 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004552:	f7fe fcd5 	bl	8002f00 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	4a8a      	ldr	r2, [pc, #552]	; (8004788 <HAL_RCC_ClockConfig+0x274>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e109      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b87      	ldr	r3, [pc, #540]	; (8004784 <HAL_RCC_ClockConfig+0x270>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2201      	movs	r2, #1
 800456c:	4013      	ands	r3, r2
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d1ee      	bne.n	8004552 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2202      	movs	r2, #2
 800457a:	4013      	ands	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457e:	4b83      	ldr	r3, [pc, #524]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	22f0      	movs	r2, #240	; 0xf0
 8004584:	4393      	bics	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	4b7f      	ldr	r3, [pc, #508]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 800458e:	430a      	orrs	r2, r1
 8004590:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	d100      	bne.n	800459e <HAL_RCC_ClockConfig+0x8a>
 800459c:	e089      	b.n	80046b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045a6:	4b79      	ldr	r3, [pc, #484]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	2380      	movs	r3, #128	; 0x80
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	4013      	ands	r3, r2
 80045b0:	d120      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0e1      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045be:	4b73      	ldr	r3, [pc, #460]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	049b      	lsls	r3, r3, #18
 80045c6:	4013      	ands	r3, r2
 80045c8:	d114      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0d5      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d6:	4b6d      	ldr	r3, [pc, #436]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2204      	movs	r2, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	d109      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0ca      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045e4:	4b69      	ldr	r3, [pc, #420]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4013      	ands	r3, r2
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0c2      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045f4:	4b65      	ldr	r3, [pc, #404]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2203      	movs	r2, #3
 80045fa:	4393      	bics	r3, r2
 80045fc:	0019      	movs	r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	4b62      	ldr	r3, [pc, #392]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 8004604:	430a      	orrs	r2, r1
 8004606:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004608:	f7fe fc7a 	bl	8002f00 <HAL_GetTick>
 800460c:	0003      	movs	r3, r0
 800460e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d111      	bne.n	800463c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004618:	e009      	b.n	800462e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461a:	f7fe fc71 	bl	8002f00 <HAL_GetTick>
 800461e:	0002      	movs	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	4a58      	ldr	r2, [pc, #352]	; (8004788 <HAL_RCC_ClockConfig+0x274>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e0a5      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800462e:	4b57      	ldr	r3, [pc, #348]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	220c      	movs	r2, #12
 8004634:	4013      	ands	r3, r2
 8004636:	2b08      	cmp	r3, #8
 8004638:	d1ef      	bne.n	800461a <HAL_RCC_ClockConfig+0x106>
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d111      	bne.n	8004668 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004644:	e009      	b.n	800465a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004646:	f7fe fc5b 	bl	8002f00 <HAL_GetTick>
 800464a:	0002      	movs	r2, r0
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	4a4d      	ldr	r2, [pc, #308]	; (8004788 <HAL_RCC_ClockConfig+0x274>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e08f      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465a:	4b4c      	ldr	r3, [pc, #304]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	220c      	movs	r2, #12
 8004660:	4013      	ands	r3, r2
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d1ef      	bne.n	8004646 <HAL_RCC_ClockConfig+0x132>
 8004666:	e024      	b.n	80046b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d11b      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004670:	e009      	b.n	8004686 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004672:	f7fe fc45 	bl	8002f00 <HAL_GetTick>
 8004676:	0002      	movs	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	4a42      	ldr	r2, [pc, #264]	; (8004788 <HAL_RCC_ClockConfig+0x274>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e079      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004686:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	220c      	movs	r2, #12
 800468c:	4013      	ands	r3, r2
 800468e:	2b04      	cmp	r3, #4
 8004690:	d1ef      	bne.n	8004672 <HAL_RCC_ClockConfig+0x15e>
 8004692:	e00e      	b.n	80046b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fe fc34 	bl	8002f00 <HAL_GetTick>
 8004698:	0002      	movs	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <HAL_RCC_ClockConfig+0x274>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e068      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	220c      	movs	r2, #12
 80046ae:	4013      	ands	r3, r2
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b2:	4b34      	ldr	r3, [pc, #208]	; (8004784 <HAL_RCC_ClockConfig+0x270>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2201      	movs	r2, #1
 80046b8:	4013      	ands	r3, r2
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d21e      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c0:	4b30      	ldr	r3, [pc, #192]	; (8004784 <HAL_RCC_ClockConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4393      	bics	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <HAL_RCC_ClockConfig+0x270>)
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046d2:	f7fe fc15 	bl	8002f00 <HAL_GetTick>
 80046d6:	0003      	movs	r3, r0
 80046d8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	e009      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046dc:	f7fe fc10 	bl	8002f00 <HAL_GetTick>
 80046e0:	0002      	movs	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	4a28      	ldr	r2, [pc, #160]	; (8004788 <HAL_RCC_ClockConfig+0x274>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e044      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <HAL_RCC_ClockConfig+0x270>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d1ee      	bne.n	80046dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2204      	movs	r2, #4
 8004704:	4013      	ands	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b20      	ldr	r3, [pc, #128]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a20      	ldr	r2, [pc, #128]	; (8004790 <HAL_RCC_ClockConfig+0x27c>)
 800470e:	4013      	ands	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	4013      	ands	r3, r2
 8004724:	d00a      	beq.n	800473c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004726:	4b19      	ldr	r3, [pc, #100]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <HAL_RCC_ClockConfig+0x280>)
 800472c:	4013      	ands	r3, r2
 800472e:	0019      	movs	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	00da      	lsls	r2, r3, #3
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800473c:	f000 f832 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8004740:	0001      	movs	r1, r0
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <HAL_RCC_ClockConfig+0x278>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	220f      	movs	r2, #15
 800474a:	4013      	ands	r3, r2
 800474c:	4a12      	ldr	r2, [pc, #72]	; (8004798 <HAL_RCC_ClockConfig+0x284>)
 800474e:	5cd3      	ldrb	r3, [r2, r3]
 8004750:	000a      	movs	r2, r1
 8004752:	40da      	lsrs	r2, r3
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <HAL_RCC_ClockConfig+0x288>)
 8004756:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004758:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <HAL_RCC_ClockConfig+0x28c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	250b      	movs	r5, #11
 800475e:	197c      	adds	r4, r7, r5
 8004760:	0018      	movs	r0, r3
 8004762:	f7fe fb87 	bl	8002e74 <HAL_InitTick>
 8004766:	0003      	movs	r3, r0
 8004768:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800476a:	197b      	adds	r3, r7, r5
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004772:	197b      	adds	r3, r7, r5
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	e000      	b.n	800477a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b004      	add	sp, #16
 8004780:	bdb0      	pop	{r4, r5, r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	40022000 	.word	0x40022000
 8004788:	00001388 	.word	0x00001388
 800478c:	40021000 	.word	0x40021000
 8004790:	fffff8ff 	.word	0xfffff8ff
 8004794:	ffffc7ff 	.word	0xffffc7ff
 8004798:	08007bc8 	.word	0x08007bc8
 800479c:	20000000 	.word	0x20000000
 80047a0:	20000004 	.word	0x20000004

080047a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a4:	b5b0      	push	{r4, r5, r7, lr}
 80047a6:	b08e      	sub	sp, #56	; 0x38
 80047a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <HAL_RCC_GetSysClockFreq+0x138>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b2:	230c      	movs	r3, #12
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d014      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x40>
 80047ba:	d900      	bls.n	80047be <HAL_RCC_GetSysClockFreq+0x1a>
 80047bc:	e07b      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x112>
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d002      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x24>
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d00b      	beq.n	80047de <HAL_RCC_GetSysClockFreq+0x3a>
 80047c6:	e076      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047c8:	4b44      	ldr	r3, [pc, #272]	; (80048dc <HAL_RCC_GetSysClockFreq+0x138>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2210      	movs	r2, #16
 80047ce:	4013      	ands	r3, r2
 80047d0:	d002      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80047d2:	4b43      	ldr	r3, [pc, #268]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80047d6:	e07c      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80047d8:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x140>)
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047dc:	e079      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047de:	4b42      	ldr	r3, [pc, #264]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x144>)
 80047e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047e2:	e076      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	0c9a      	lsrs	r2, r3, #18
 80047e8:	230f      	movs	r3, #15
 80047ea:	401a      	ands	r2, r3
 80047ec:	4b3f      	ldr	r3, [pc, #252]	; (80048ec <HAL_RCC_GetSysClockFreq+0x148>)
 80047ee:	5c9b      	ldrb	r3, [r3, r2]
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	0d9a      	lsrs	r2, r3, #22
 80047f6:	2303      	movs	r3, #3
 80047f8:	4013      	ands	r3, r2
 80047fa:	3301      	adds	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_GetSysClockFreq+0x138>)
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	025b      	lsls	r3, r3, #9
 8004806:	4013      	ands	r3, r2
 8004808:	d01a      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	4a35      	ldr	r2, [pc, #212]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x144>)
 8004814:	2300      	movs	r3, #0
 8004816:	69b8      	ldr	r0, [r7, #24]
 8004818:	69f9      	ldr	r1, [r7, #28]
 800481a:	f7fb fe65 	bl	80004e8 <__aeabi_lmul>
 800481e:	0002      	movs	r2, r0
 8004820:	000b      	movs	r3, r1
 8004822:	0010      	movs	r0, r2
 8004824:	0019      	movs	r1, r3
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f7fb fe39 	bl	80004a8 <__aeabi_uldivmod>
 8004836:	0002      	movs	r2, r0
 8004838:	000b      	movs	r3, r1
 800483a:	0013      	movs	r3, r2
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
 800483e:	e037      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <HAL_RCC_GetSysClockFreq+0x138>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	4013      	ands	r3, r2
 8004848:	d01a      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004854:	2300      	movs	r3, #0
 8004856:	68b8      	ldr	r0, [r7, #8]
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	f7fb fe45 	bl	80004e8 <__aeabi_lmul>
 800485e:	0002      	movs	r2, r0
 8004860:	000b      	movs	r3, r1
 8004862:	0010      	movs	r0, r2
 8004864:	0019      	movs	r1, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f7fb fe19 	bl	80004a8 <__aeabi_uldivmod>
 8004876:	0002      	movs	r2, r0
 8004878:	000b      	movs	r3, r1
 800487a:	0013      	movs	r3, r2
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
 800487e:	e017      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	0018      	movs	r0, r3
 8004884:	2300      	movs	r3, #0
 8004886:	0019      	movs	r1, r3
 8004888:	4a16      	ldr	r2, [pc, #88]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x140>)
 800488a:	2300      	movs	r3, #0
 800488c:	f7fb fe2c 	bl	80004e8 <__aeabi_lmul>
 8004890:	0002      	movs	r2, r0
 8004892:	000b      	movs	r3, r1
 8004894:	0010      	movs	r0, r2
 8004896:	0019      	movs	r1, r3
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	001c      	movs	r4, r3
 800489c:	2300      	movs	r3, #0
 800489e:	001d      	movs	r5, r3
 80048a0:	0022      	movs	r2, r4
 80048a2:	002b      	movs	r3, r5
 80048a4:	f7fb fe00 	bl	80004a8 <__aeabi_uldivmod>
 80048a8:	0002      	movs	r2, r0
 80048aa:	000b      	movs	r3, r1
 80048ac:	0013      	movs	r3, r2
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048b4:	e00d      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_GetSysClockFreq+0x138>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	0b5b      	lsrs	r3, r3, #13
 80048bc:	2207      	movs	r2, #7
 80048be:	4013      	ands	r3, r2
 80048c0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	3301      	adds	r3, #1
 80048c6:	2280      	movs	r2, #128	; 0x80
 80048c8:	0212      	lsls	r2, r2, #8
 80048ca:	409a      	lsls	r2, r3
 80048cc:	0013      	movs	r3, r2
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b00e      	add	sp, #56	; 0x38
 80048da:	bdb0      	pop	{r4, r5, r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	003d0900 	.word	0x003d0900
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	007a1200 	.word	0x007a1200
 80048ec:	08007bd8 	.word	0x08007bd8

080048f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80048f8:	2017      	movs	r0, #23
 80048fa:	183b      	adds	r3, r7, r0
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2220      	movs	r2, #32
 8004906:	4013      	ands	r3, r2
 8004908:	d100      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800490a:	e0c2      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490c:	4b81      	ldr	r3, [pc, #516]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800490e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	055b      	lsls	r3, r3, #21
 8004914:	4013      	ands	r3, r2
 8004916:	d109      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004918:	4b7e      	ldr	r3, [pc, #504]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800491a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491c:	4b7d      	ldr	r3, [pc, #500]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	0549      	lsls	r1, r1, #21
 8004922:	430a      	orrs	r2, r1
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004926:	183b      	adds	r3, r7, r0
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492c:	4b7a      	ldr	r3, [pc, #488]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4013      	ands	r3, r2
 8004936:	d11a      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004938:	4b77      	ldr	r3, [pc, #476]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b76      	ldr	r3, [pc, #472]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800493e:	2180      	movs	r1, #128	; 0x80
 8004940:	0049      	lsls	r1, r1, #1
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004946:	f7fe fadb 	bl	8002f00 <HAL_GetTick>
 800494a:	0003      	movs	r3, r0
 800494c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	e008      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004950:	f7fe fad6 	bl	8002f00 <HAL_GetTick>
 8004954:	0002      	movs	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0d4      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4013      	ands	r3, r2
 800496c:	d0f0      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800496e:	4b69      	ldr	r3, [pc, #420]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	23c0      	movs	r3, #192	; 0xc0
 8004974:	039b      	lsls	r3, r3, #14
 8004976:	4013      	ands	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	23c0      	movs	r3, #192	; 0xc0
 8004980:	039b      	lsls	r3, r3, #14
 8004982:	4013      	ands	r3, r2
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	429a      	cmp	r2, r3
 8004988:	d013      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	23c0      	movs	r3, #192	; 0xc0
 8004990:	029b      	lsls	r3, r3, #10
 8004992:	401a      	ands	r2, r3
 8004994:	23c0      	movs	r3, #192	; 0xc0
 8004996:	029b      	lsls	r3, r3, #10
 8004998:	429a      	cmp	r2, r3
 800499a:	d10a      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800499c:	4b5d      	ldr	r3, [pc, #372]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	401a      	ands	r2, r3
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	029b      	lsls	r3, r3, #10
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d101      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0ac      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80049b2:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80049b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049b6:	23c0      	movs	r3, #192	; 0xc0
 80049b8:	029b      	lsls	r3, r3, #10
 80049ba:	4013      	ands	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d03b      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	23c0      	movs	r3, #192	; 0xc0
 80049ca:	029b      	lsls	r3, r3, #10
 80049cc:	4013      	ands	r3, r2
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d033      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2220      	movs	r2, #32
 80049da:	4013      	ands	r3, r2
 80049dc:	d02e      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049de:	4b4d      	ldr	r3, [pc, #308]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80049e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e2:	4a4e      	ldr	r2, [pc, #312]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049e8:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80049ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049ec:	4b49      	ldr	r3, [pc, #292]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80049ee:	2180      	movs	r1, #128	; 0x80
 80049f0:	0309      	lsls	r1, r1, #12
 80049f2:	430a      	orrs	r2, r1
 80049f4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80049f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049fa:	4b46      	ldr	r3, [pc, #280]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80049fc:	4948      	ldr	r1, [pc, #288]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80049fe:	400a      	ands	r2, r1
 8004a00:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a02:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	2380      	movs	r3, #128	; 0x80
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d014      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7fe fa75 	bl	8002f00 <HAL_GetTick>
 8004a16:	0003      	movs	r3, r0
 8004a18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a1a:	e009      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fe fa70 	bl	8002f00 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	4a3f      	ldr	r2, [pc, #252]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e06d      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a30:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d0ef      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	23c0      	movs	r3, #192	; 0xc0
 8004a42:	029b      	lsls	r3, r3, #10
 8004a44:	401a      	ands	r2, r3
 8004a46:	23c0      	movs	r3, #192	; 0xc0
 8004a48:	029b      	lsls	r3, r3, #10
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004a4e:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a35      	ldr	r2, [pc, #212]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	23c0      	movs	r3, #192	; 0xc0
 8004a5e:	039b      	lsls	r3, r3, #14
 8004a60:	401a      	ands	r2, r3
 8004a62:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	4b2a      	ldr	r3, [pc, #168]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a6a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	23c0      	movs	r3, #192	; 0xc0
 8004a72:	029b      	lsls	r3, r3, #10
 8004a74:	401a      	ands	r2, r3
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a7c:	2317      	movs	r3, #23
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d105      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a86:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a8c:	4927      	ldr	r1, [pc, #156]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2202      	movs	r2, #2
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	220c      	movs	r2, #12
 8004aa2:	4393      	bics	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004aac:	430a      	orrs	r2, r1
 8004aae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004aca:	430a      	orrs	r2, r1
 8004acc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004adc:	4a15      	ldr	r2, [pc, #84]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2280      	movs	r2, #128	; 0x80
 8004af2:	4013      	ands	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	4a0f      	ldr	r2, [pc, #60]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	0019      	movs	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004b06:	430a      	orrs	r2, r1
 8004b08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b006      	add	sp, #24
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40007000 	.word	0x40007000
 8004b1c:	fffcffff 	.word	0xfffcffff
 8004b20:	fff7ffff 	.word	0xfff7ffff
 8004b24:	00001388 	.word	0x00001388
 8004b28:	ffcfffff 	.word	0xffcfffff
 8004b2c:	efffffff 	.word	0xefffffff
 8004b30:	fffff3ff 	.word	0xfffff3ff
 8004b34:	ffffcfff 	.word	0xffffcfff
 8004b38:	fff3ffff 	.word	0xfff3ffff

08004b3c <__errno>:
 8004b3c:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <__errno+0x8>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	4770      	bx	lr
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	2000000c 	.word	0x2000000c

08004b48 <__libc_init_array>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	2600      	movs	r6, #0
 8004b4c:	4d0c      	ldr	r5, [pc, #48]	; (8004b80 <__libc_init_array+0x38>)
 8004b4e:	4c0d      	ldr	r4, [pc, #52]	; (8004b84 <__libc_init_array+0x3c>)
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	42a6      	cmp	r6, r4
 8004b56:	d109      	bne.n	8004b6c <__libc_init_array+0x24>
 8004b58:	2600      	movs	r6, #0
 8004b5a:	f002 ffb9 	bl	8007ad0 <_init>
 8004b5e:	4d0a      	ldr	r5, [pc, #40]	; (8004b88 <__libc_init_array+0x40>)
 8004b60:	4c0a      	ldr	r4, [pc, #40]	; (8004b8c <__libc_init_array+0x44>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	42a6      	cmp	r6, r4
 8004b68:	d105      	bne.n	8004b76 <__libc_init_array+0x2e>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	00b3      	lsls	r3, r6, #2
 8004b6e:	58eb      	ldr	r3, [r5, r3]
 8004b70:	4798      	blx	r3
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7ee      	b.n	8004b54 <__libc_init_array+0xc>
 8004b76:	00b3      	lsls	r3, r6, #2
 8004b78:	58eb      	ldr	r3, [r5, r3]
 8004b7a:	4798      	blx	r3
 8004b7c:	3601      	adds	r6, #1
 8004b7e:	e7f2      	b.n	8004b66 <__libc_init_array+0x1e>
 8004b80:	08007fc4 	.word	0x08007fc4
 8004b84:	08007fc4 	.word	0x08007fc4
 8004b88:	08007fc4 	.word	0x08007fc4
 8004b8c:	08007fc8 	.word	0x08007fc8

08004b90 <malloc>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <malloc+0x10>)
 8004b94:	0001      	movs	r1, r0
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	f000 f878 	bl	8004c8c <_malloc_r>
 8004b9c:	bd10      	pop	{r4, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	2000000c 	.word	0x2000000c

08004ba4 <memset>:
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	1882      	adds	r2, r0, r2
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d100      	bne.n	8004bae <memset+0xa>
 8004bac:	4770      	bx	lr
 8004bae:	7019      	strb	r1, [r3, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	e7f9      	b.n	8004ba8 <memset+0x4>

08004bb4 <_free_r>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	0005      	movs	r5, r0
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d010      	beq.n	8004bde <_free_r+0x2a>
 8004bbc:	1f0c      	subs	r4, r1, #4
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	da00      	bge.n	8004bc6 <_free_r+0x12>
 8004bc4:	18e4      	adds	r4, r4, r3
 8004bc6:	0028      	movs	r0, r5
 8004bc8:	f001 fc34 	bl	8006434 <__malloc_lock>
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <_free_r+0x90>)
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <_free_r+0x2c>
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	6014      	str	r4, [r2, #0]
 8004bd8:	0028      	movs	r0, r5
 8004bda:	f001 fc33 	bl	8006444 <__malloc_unlock>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d908      	bls.n	8004bf6 <_free_r+0x42>
 8004be4:	6821      	ldr	r1, [r4, #0]
 8004be6:	1860      	adds	r0, r4, r1
 8004be8:	4283      	cmp	r3, r0
 8004bea:	d1f3      	bne.n	8004bd4 <_free_r+0x20>
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	1841      	adds	r1, r0, r1
 8004bf2:	6021      	str	r1, [r4, #0]
 8004bf4:	e7ee      	b.n	8004bd4 <_free_r+0x20>
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <_free_r+0x4e>
 8004bfe:	42a3      	cmp	r3, r4
 8004c00:	d9f9      	bls.n	8004bf6 <_free_r+0x42>
 8004c02:	6811      	ldr	r1, [r2, #0]
 8004c04:	1850      	adds	r0, r2, r1
 8004c06:	42a0      	cmp	r0, r4
 8004c08:	d10b      	bne.n	8004c22 <_free_r+0x6e>
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	1809      	adds	r1, r1, r0
 8004c0e:	1850      	adds	r0, r2, r1
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	4283      	cmp	r3, r0
 8004c14:	d1e0      	bne.n	8004bd8 <_free_r+0x24>
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	1841      	adds	r1, r0, r1
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	6053      	str	r3, [r2, #4]
 8004c20:	e7da      	b.n	8004bd8 <_free_r+0x24>
 8004c22:	42a0      	cmp	r0, r4
 8004c24:	d902      	bls.n	8004c2c <_free_r+0x78>
 8004c26:	230c      	movs	r3, #12
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	e7d5      	b.n	8004bd8 <_free_r+0x24>
 8004c2c:	6821      	ldr	r1, [r4, #0]
 8004c2e:	1860      	adds	r0, r4, r1
 8004c30:	4283      	cmp	r3, r0
 8004c32:	d103      	bne.n	8004c3c <_free_r+0x88>
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	1841      	adds	r1, r0, r1
 8004c3a:	6021      	str	r1, [r4, #0]
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	6054      	str	r4, [r2, #4]
 8004c40:	e7ca      	b.n	8004bd8 <_free_r+0x24>
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	20000260 	.word	0x20000260

08004c48 <sbrk_aligned>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4e0f      	ldr	r6, [pc, #60]	; (8004c88 <sbrk_aligned+0x40>)
 8004c4c:	000d      	movs	r5, r1
 8004c4e:	6831      	ldr	r1, [r6, #0]
 8004c50:	0004      	movs	r4, r0
 8004c52:	2900      	cmp	r1, #0
 8004c54:	d102      	bne.n	8004c5c <sbrk_aligned+0x14>
 8004c56:	f000 fcfd 	bl	8005654 <_sbrk_r>
 8004c5a:	6030      	str	r0, [r6, #0]
 8004c5c:	0029      	movs	r1, r5
 8004c5e:	0020      	movs	r0, r4
 8004c60:	f000 fcf8 	bl	8005654 <_sbrk_r>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d00a      	beq.n	8004c7e <sbrk_aligned+0x36>
 8004c68:	2303      	movs	r3, #3
 8004c6a:	1cc5      	adds	r5, r0, #3
 8004c6c:	439d      	bics	r5, r3
 8004c6e:	42a8      	cmp	r0, r5
 8004c70:	d007      	beq.n	8004c82 <sbrk_aligned+0x3a>
 8004c72:	1a29      	subs	r1, r5, r0
 8004c74:	0020      	movs	r0, r4
 8004c76:	f000 fced 	bl	8005654 <_sbrk_r>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d101      	bne.n	8004c82 <sbrk_aligned+0x3a>
 8004c7e:	2501      	movs	r5, #1
 8004c80:	426d      	negs	r5, r5
 8004c82:	0028      	movs	r0, r5
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	20000264 	.word	0x20000264

08004c8c <_malloc_r>:
 8004c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c8e:	2203      	movs	r2, #3
 8004c90:	1ccb      	adds	r3, r1, #3
 8004c92:	4393      	bics	r3, r2
 8004c94:	3308      	adds	r3, #8
 8004c96:	0006      	movs	r6, r0
 8004c98:	001f      	movs	r7, r3
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d232      	bcs.n	8004d04 <_malloc_r+0x78>
 8004c9e:	270c      	movs	r7, #12
 8004ca0:	42b9      	cmp	r1, r7
 8004ca2:	d831      	bhi.n	8004d08 <_malloc_r+0x7c>
 8004ca4:	0030      	movs	r0, r6
 8004ca6:	f001 fbc5 	bl	8006434 <__malloc_lock>
 8004caa:	4d32      	ldr	r5, [pc, #200]	; (8004d74 <_malloc_r+0xe8>)
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	001c      	movs	r4, r3
 8004cb0:	2c00      	cmp	r4, #0
 8004cb2:	d12e      	bne.n	8004d12 <_malloc_r+0x86>
 8004cb4:	0039      	movs	r1, r7
 8004cb6:	0030      	movs	r0, r6
 8004cb8:	f7ff ffc6 	bl	8004c48 <sbrk_aligned>
 8004cbc:	0004      	movs	r4, r0
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	d11e      	bne.n	8004d00 <_malloc_r+0x74>
 8004cc2:	682c      	ldr	r4, [r5, #0]
 8004cc4:	0025      	movs	r5, r4
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	d14a      	bne.n	8004d60 <_malloc_r+0xd4>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	0029      	movs	r1, r5
 8004cce:	18e3      	adds	r3, r4, r3
 8004cd0:	0030      	movs	r0, r6
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	f000 fcbe 	bl	8005654 <_sbrk_r>
 8004cd8:	9b01      	ldr	r3, [sp, #4]
 8004cda:	4283      	cmp	r3, r0
 8004cdc:	d143      	bne.n	8004d66 <_malloc_r+0xda>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	3703      	adds	r7, #3
 8004ce2:	1aff      	subs	r7, r7, r3
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	439f      	bics	r7, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	2f0c      	cmp	r7, #12
 8004cec:	d200      	bcs.n	8004cf0 <_malloc_r+0x64>
 8004cee:	270c      	movs	r7, #12
 8004cf0:	0039      	movs	r1, r7
 8004cf2:	0030      	movs	r0, r6
 8004cf4:	f7ff ffa8 	bl	8004c48 <sbrk_aligned>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d034      	beq.n	8004d66 <_malloc_r+0xda>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	19df      	adds	r7, r3, r7
 8004d00:	6027      	str	r7, [r4, #0]
 8004d02:	e013      	b.n	8004d2c <_malloc_r+0xa0>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dacb      	bge.n	8004ca0 <_malloc_r+0x14>
 8004d08:	230c      	movs	r3, #12
 8004d0a:	2500      	movs	r5, #0
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	0028      	movs	r0, r5
 8004d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	1bd1      	subs	r1, r2, r7
 8004d16:	d420      	bmi.n	8004d5a <_malloc_r+0xce>
 8004d18:	290b      	cmp	r1, #11
 8004d1a:	d917      	bls.n	8004d4c <_malloc_r+0xc0>
 8004d1c:	19e2      	adds	r2, r4, r7
 8004d1e:	6027      	str	r7, [r4, #0]
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	d111      	bne.n	8004d48 <_malloc_r+0xbc>
 8004d24:	602a      	str	r2, [r5, #0]
 8004d26:	6863      	ldr	r3, [r4, #4]
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	6053      	str	r3, [r2, #4]
 8004d2c:	0030      	movs	r0, r6
 8004d2e:	0025      	movs	r5, r4
 8004d30:	f001 fb88 	bl	8006444 <__malloc_unlock>
 8004d34:	2207      	movs	r2, #7
 8004d36:	350b      	adds	r5, #11
 8004d38:	1d23      	adds	r3, r4, #4
 8004d3a:	4395      	bics	r5, r2
 8004d3c:	1aea      	subs	r2, r5, r3
 8004d3e:	429d      	cmp	r5, r3
 8004d40:	d0e5      	beq.n	8004d0e <_malloc_r+0x82>
 8004d42:	1b5b      	subs	r3, r3, r5
 8004d44:	50a3      	str	r3, [r4, r2]
 8004d46:	e7e2      	b.n	8004d0e <_malloc_r+0x82>
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	e7ec      	b.n	8004d26 <_malloc_r+0x9a>
 8004d4c:	6862      	ldr	r2, [r4, #4]
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	d101      	bne.n	8004d56 <_malloc_r+0xca>
 8004d52:	602a      	str	r2, [r5, #0]
 8004d54:	e7ea      	b.n	8004d2c <_malloc_r+0xa0>
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	e7e8      	b.n	8004d2c <_malloc_r+0xa0>
 8004d5a:	0023      	movs	r3, r4
 8004d5c:	6864      	ldr	r4, [r4, #4]
 8004d5e:	e7a7      	b.n	8004cb0 <_malloc_r+0x24>
 8004d60:	002c      	movs	r4, r5
 8004d62:	686d      	ldr	r5, [r5, #4]
 8004d64:	e7af      	b.n	8004cc6 <_malloc_r+0x3a>
 8004d66:	230c      	movs	r3, #12
 8004d68:	0030      	movs	r0, r6
 8004d6a:	6033      	str	r3, [r6, #0]
 8004d6c:	f001 fb6a 	bl	8006444 <__malloc_unlock>
 8004d70:	e7cd      	b.n	8004d0e <_malloc_r+0x82>
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	20000260 	.word	0x20000260

08004d78 <__cvt>:
 8004d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7a:	001e      	movs	r6, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	0014      	movs	r4, r2
 8004d80:	b08b      	sub	sp, #44	; 0x2c
 8004d82:	429e      	cmp	r6, r3
 8004d84:	da04      	bge.n	8004d90 <__cvt+0x18>
 8004d86:	2180      	movs	r1, #128	; 0x80
 8004d88:	0609      	lsls	r1, r1, #24
 8004d8a:	1873      	adds	r3, r6, r1
 8004d8c:	001e      	movs	r6, r3
 8004d8e:	232d      	movs	r3, #45	; 0x2d
 8004d90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d94:	7013      	strb	r3, [r2, #0]
 8004d96:	2320      	movs	r3, #32
 8004d98:	2203      	movs	r2, #3
 8004d9a:	439f      	bics	r7, r3
 8004d9c:	2f46      	cmp	r7, #70	; 0x46
 8004d9e:	d007      	beq.n	8004db0 <__cvt+0x38>
 8004da0:	003b      	movs	r3, r7
 8004da2:	3b45      	subs	r3, #69	; 0x45
 8004da4:	4259      	negs	r1, r3
 8004da6:	414b      	adcs	r3, r1
 8004da8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004daa:	3a01      	subs	r2, #1
 8004dac:	18cb      	adds	r3, r1, r3
 8004dae:	9310      	str	r3, [sp, #64]	; 0x40
 8004db0:	ab09      	add	r3, sp, #36	; 0x24
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	ab08      	add	r3, sp, #32
 8004db6:	9303      	str	r3, [sp, #12]
 8004db8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004dba:	9200      	str	r2, [sp, #0]
 8004dbc:	9302      	str	r3, [sp, #8]
 8004dbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dc0:	0022      	movs	r2, r4
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	0033      	movs	r3, r6
 8004dc6:	f000 fd03 	bl	80057d0 <_dtoa_r>
 8004dca:	0005      	movs	r5, r0
 8004dcc:	2f47      	cmp	r7, #71	; 0x47
 8004dce:	d102      	bne.n	8004dd6 <__cvt+0x5e>
 8004dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004dd2:	07db      	lsls	r3, r3, #31
 8004dd4:	d528      	bpl.n	8004e28 <__cvt+0xb0>
 8004dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dd8:	18eb      	adds	r3, r5, r3
 8004dda:	9307      	str	r3, [sp, #28]
 8004ddc:	2f46      	cmp	r7, #70	; 0x46
 8004dde:	d114      	bne.n	8004e0a <__cvt+0x92>
 8004de0:	782b      	ldrb	r3, [r5, #0]
 8004de2:	2b30      	cmp	r3, #48	; 0x30
 8004de4:	d10c      	bne.n	8004e00 <__cvt+0x88>
 8004de6:	2200      	movs	r2, #0
 8004de8:	2300      	movs	r3, #0
 8004dea:	0020      	movs	r0, r4
 8004dec:	0031      	movs	r1, r6
 8004dee:	f7fb fb2d 	bl	800044c <__aeabi_dcmpeq>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d104      	bne.n	8004e00 <__cvt+0x88>
 8004df6:	2301      	movs	r3, #1
 8004df8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e02:	9a07      	ldr	r2, [sp, #28]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	18d3      	adds	r3, r2, r3
 8004e08:	9307      	str	r3, [sp, #28]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	0020      	movs	r0, r4
 8004e10:	0031      	movs	r1, r6
 8004e12:	f7fb fb1b 	bl	800044c <__aeabi_dcmpeq>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d001      	beq.n	8004e1e <__cvt+0xa6>
 8004e1a:	9b07      	ldr	r3, [sp, #28]
 8004e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1e:	2230      	movs	r2, #48	; 0x30
 8004e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e22:	9907      	ldr	r1, [sp, #28]
 8004e24:	428b      	cmp	r3, r1
 8004e26:	d306      	bcc.n	8004e36 <__cvt+0xbe>
 8004e28:	0028      	movs	r0, r5
 8004e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e2e:	1b5b      	subs	r3, r3, r5
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	b00b      	add	sp, #44	; 0x2c
 8004e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e36:	1c59      	adds	r1, r3, #1
 8004e38:	9109      	str	r1, [sp, #36]	; 0x24
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e7f0      	b.n	8004e20 <__cvt+0xa8>

08004e3e <__exponent>:
 8004e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e40:	1c83      	adds	r3, r0, #2
 8004e42:	b087      	sub	sp, #28
 8004e44:	9303      	str	r3, [sp, #12]
 8004e46:	0005      	movs	r5, r0
 8004e48:	000c      	movs	r4, r1
 8004e4a:	232b      	movs	r3, #43	; 0x2b
 8004e4c:	7002      	strb	r2, [r0, #0]
 8004e4e:	2900      	cmp	r1, #0
 8004e50:	da01      	bge.n	8004e56 <__exponent+0x18>
 8004e52:	424c      	negs	r4, r1
 8004e54:	3302      	adds	r3, #2
 8004e56:	706b      	strb	r3, [r5, #1]
 8004e58:	2c09      	cmp	r4, #9
 8004e5a:	dd31      	ble.n	8004ec0 <__exponent+0x82>
 8004e5c:	270a      	movs	r7, #10
 8004e5e:	ab04      	add	r3, sp, #16
 8004e60:	1dde      	adds	r6, r3, #7
 8004e62:	0020      	movs	r0, r4
 8004e64:	0039      	movs	r1, r7
 8004e66:	9601      	str	r6, [sp, #4]
 8004e68:	f7fb fada 	bl	8000420 <__aeabi_idivmod>
 8004e6c:	3e01      	subs	r6, #1
 8004e6e:	3130      	adds	r1, #48	; 0x30
 8004e70:	0020      	movs	r0, r4
 8004e72:	7031      	strb	r1, [r6, #0]
 8004e74:	0039      	movs	r1, r7
 8004e76:	9402      	str	r4, [sp, #8]
 8004e78:	f7fb f9ec 	bl	8000254 <__divsi3>
 8004e7c:	9b02      	ldr	r3, [sp, #8]
 8004e7e:	0004      	movs	r4, r0
 8004e80:	2b63      	cmp	r3, #99	; 0x63
 8004e82:	dcee      	bgt.n	8004e62 <__exponent+0x24>
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	3430      	adds	r4, #48	; 0x30
 8004e88:	1e9a      	subs	r2, r3, #2
 8004e8a:	0013      	movs	r3, r2
 8004e8c:	9903      	ldr	r1, [sp, #12]
 8004e8e:	7014      	strb	r4, [r2, #0]
 8004e90:	a804      	add	r0, sp, #16
 8004e92:	3007      	adds	r0, #7
 8004e94:	4298      	cmp	r0, r3
 8004e96:	d80e      	bhi.n	8004eb6 <__exponent+0x78>
 8004e98:	ab04      	add	r3, sp, #16
 8004e9a:	3307      	adds	r3, #7
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d804      	bhi.n	8004eac <__exponent+0x6e>
 8004ea2:	ab04      	add	r3, sp, #16
 8004ea4:	3009      	adds	r0, #9
 8004ea6:	18c0      	adds	r0, r0, r3
 8004ea8:	9b01      	ldr	r3, [sp, #4]
 8004eaa:	1ac0      	subs	r0, r0, r3
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	1818      	adds	r0, r3, r0
 8004eb0:	1b40      	subs	r0, r0, r5
 8004eb2:	b007      	add	sp, #28
 8004eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb6:	7818      	ldrb	r0, [r3, #0]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	7008      	strb	r0, [r1, #0]
 8004ebc:	3101      	adds	r1, #1
 8004ebe:	e7e7      	b.n	8004e90 <__exponent+0x52>
 8004ec0:	2330      	movs	r3, #48	; 0x30
 8004ec2:	18e4      	adds	r4, r4, r3
 8004ec4:	70ab      	strb	r3, [r5, #2]
 8004ec6:	1d28      	adds	r0, r5, #4
 8004ec8:	70ec      	strb	r4, [r5, #3]
 8004eca:	e7f1      	b.n	8004eb0 <__exponent+0x72>

08004ecc <_printf_float>:
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b095      	sub	sp, #84	; 0x54
 8004ed0:	000c      	movs	r4, r1
 8004ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ed4:	001e      	movs	r6, r3
 8004ed6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004ed8:	0007      	movs	r7, r0
 8004eda:	f001 fa93 	bl	8006404 <_localeconv_r>
 8004ede:	6803      	ldr	r3, [r0, #0]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8004ee4:	f7fb f910 	bl	8000108 <strlen>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	9312      	str	r3, [sp, #72]	; 0x48
 8004eec:	7e23      	ldrb	r3, [r4, #24]
 8004eee:	2207      	movs	r2, #7
 8004ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	900e      	str	r0, [sp, #56]	; 0x38
 8004ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ef8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004efa:	682b      	ldr	r3, [r5, #0]
 8004efc:	05c9      	lsls	r1, r1, #23
 8004efe:	d547      	bpl.n	8004f90 <_printf_float+0xc4>
 8004f00:	189b      	adds	r3, r3, r2
 8004f02:	4393      	bics	r3, r2
 8004f04:	001a      	movs	r2, r3
 8004f06:	3208      	adds	r2, #8
 8004f08:	602a      	str	r2, [r5, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	64a2      	str	r2, [r4, #72]	; 0x48
 8004f10:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f12:	2201      	movs	r2, #1
 8004f14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004f16:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f1a:	006b      	lsls	r3, r5, #1
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f22:	4ba7      	ldr	r3, [pc, #668]	; (80051c0 <_printf_float+0x2f4>)
 8004f24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f26:	4252      	negs	r2, r2
 8004f28:	f7fd fa88 	bl	800243c <__aeabi_dcmpun>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d131      	bne.n	8004f94 <_printf_float+0xc8>
 8004f30:	2201      	movs	r2, #1
 8004f32:	4ba3      	ldr	r3, [pc, #652]	; (80051c0 <_printf_float+0x2f4>)
 8004f34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f38:	4252      	negs	r2, r2
 8004f3a:	f7fb fa97 	bl	800046c <__aeabi_dcmple>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d128      	bne.n	8004f94 <_printf_float+0xc8>
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	0029      	movs	r1, r5
 8004f48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f4a:	f7fb fa85 	bl	8000458 <__aeabi_dcmplt>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d003      	beq.n	8004f5a <_printf_float+0x8e>
 8004f52:	0023      	movs	r3, r4
 8004f54:	222d      	movs	r2, #45	; 0x2d
 8004f56:	3343      	adds	r3, #67	; 0x43
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f5c:	4d99      	ldr	r5, [pc, #612]	; (80051c4 <_printf_float+0x2f8>)
 8004f5e:	2b47      	cmp	r3, #71	; 0x47
 8004f60:	d900      	bls.n	8004f64 <_printf_float+0x98>
 8004f62:	4d99      	ldr	r5, [pc, #612]	; (80051c8 <_printf_float+0x2fc>)
 8004f64:	2303      	movs	r3, #3
 8004f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f68:	6123      	str	r3, [r4, #16]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	439a      	bics	r2, r3
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6022      	str	r2, [r4, #0]
 8004f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f76:	0021      	movs	r1, r4
 8004f78:	0038      	movs	r0, r7
 8004f7a:	9600      	str	r6, [sp, #0]
 8004f7c:	aa13      	add	r2, sp, #76	; 0x4c
 8004f7e:	f000 f9e7 	bl	8005350 <_printf_common>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d000      	beq.n	8004f88 <_printf_float+0xbc>
 8004f86:	e0a2      	b.n	80050ce <_printf_float+0x202>
 8004f88:	2001      	movs	r0, #1
 8004f8a:	4240      	negs	r0, r0
 8004f8c:	b015      	add	sp, #84	; 0x54
 8004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f90:	3307      	adds	r3, #7
 8004f92:	e7b6      	b.n	8004f02 <_printf_float+0x36>
 8004f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f96:	002b      	movs	r3, r5
 8004f98:	0010      	movs	r0, r2
 8004f9a:	0029      	movs	r1, r5
 8004f9c:	f7fd fa4e 	bl	800243c <__aeabi_dcmpun>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d00b      	beq.n	8004fbc <_printf_float+0xf0>
 8004fa4:	2d00      	cmp	r5, #0
 8004fa6:	da03      	bge.n	8004fb0 <_printf_float+0xe4>
 8004fa8:	0023      	movs	r3, r4
 8004faa:	222d      	movs	r2, #45	; 0x2d
 8004fac:	3343      	adds	r3, #67	; 0x43
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb2:	4d86      	ldr	r5, [pc, #536]	; (80051cc <_printf_float+0x300>)
 8004fb4:	2b47      	cmp	r3, #71	; 0x47
 8004fb6:	d9d5      	bls.n	8004f64 <_printf_float+0x98>
 8004fb8:	4d85      	ldr	r5, [pc, #532]	; (80051d0 <_printf_float+0x304>)
 8004fba:	e7d3      	b.n	8004f64 <_printf_float+0x98>
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fc0:	6863      	ldr	r3, [r4, #4]
 8004fc2:	4391      	bics	r1, r2
 8004fc4:	910f      	str	r1, [sp, #60]	; 0x3c
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	d149      	bne.n	800505e <_printf_float+0x192>
 8004fca:	3307      	adds	r3, #7
 8004fcc:	6063      	str	r3, [r4, #4]
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	9206      	str	r2, [sp, #24]
 8004fda:	aa12      	add	r2, sp, #72	; 0x48
 8004fdc:	9205      	str	r2, [sp, #20]
 8004fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fe0:	a908      	add	r1, sp, #32
 8004fe2:	9204      	str	r2, [sp, #16]
 8004fe4:	aa11      	add	r2, sp, #68	; 0x44
 8004fe6:	9203      	str	r2, [sp, #12]
 8004fe8:	2223      	movs	r2, #35	; 0x23
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	1852      	adds	r2, r2, r1
 8004ff2:	9202      	str	r2, [sp, #8]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	0038      	movs	r0, r7
 8004ff8:	002b      	movs	r3, r5
 8004ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ffc:	f7ff febc 	bl	8004d78 <__cvt>
 8005000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005002:	0005      	movs	r5, r0
 8005004:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005006:	2b47      	cmp	r3, #71	; 0x47
 8005008:	d108      	bne.n	800501c <_printf_float+0x150>
 800500a:	1ccb      	adds	r3, r1, #3
 800500c:	db02      	blt.n	8005014 <_printf_float+0x148>
 800500e:	6863      	ldr	r3, [r4, #4]
 8005010:	4299      	cmp	r1, r3
 8005012:	dd48      	ble.n	80050a6 <_printf_float+0x1da>
 8005014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005016:	3b02      	subs	r3, #2
 8005018:	b2db      	uxtb	r3, r3
 800501a:	930a      	str	r3, [sp, #40]	; 0x28
 800501c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800501e:	2b65      	cmp	r3, #101	; 0x65
 8005020:	d824      	bhi.n	800506c <_printf_float+0x1a0>
 8005022:	0020      	movs	r0, r4
 8005024:	001a      	movs	r2, r3
 8005026:	3901      	subs	r1, #1
 8005028:	3050      	adds	r0, #80	; 0x50
 800502a:	9111      	str	r1, [sp, #68]	; 0x44
 800502c:	f7ff ff07 	bl	8004e3e <__exponent>
 8005030:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005032:	900b      	str	r0, [sp, #44]	; 0x2c
 8005034:	1813      	adds	r3, r2, r0
 8005036:	6123      	str	r3, [r4, #16]
 8005038:	2a01      	cmp	r2, #1
 800503a:	dc02      	bgt.n	8005042 <_printf_float+0x176>
 800503c:	6822      	ldr	r2, [r4, #0]
 800503e:	07d2      	lsls	r2, r2, #31
 8005040:	d501      	bpl.n	8005046 <_printf_float+0x17a>
 8005042:	3301      	adds	r3, #1
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	2323      	movs	r3, #35	; 0x23
 8005048:	aa08      	add	r2, sp, #32
 800504a:	189b      	adds	r3, r3, r2
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d100      	bne.n	8005054 <_printf_float+0x188>
 8005052:	e78f      	b.n	8004f74 <_printf_float+0xa8>
 8005054:	0023      	movs	r3, r4
 8005056:	222d      	movs	r2, #45	; 0x2d
 8005058:	3343      	adds	r3, #67	; 0x43
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e78a      	b.n	8004f74 <_printf_float+0xa8>
 800505e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005060:	2a47      	cmp	r2, #71	; 0x47
 8005062:	d1b4      	bne.n	8004fce <_printf_float+0x102>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1b2      	bne.n	8004fce <_printf_float+0x102>
 8005068:	3301      	adds	r3, #1
 800506a:	e7af      	b.n	8004fcc <_printf_float+0x100>
 800506c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506e:	2b66      	cmp	r3, #102	; 0x66
 8005070:	d11b      	bne.n	80050aa <_printf_float+0x1de>
 8005072:	6863      	ldr	r3, [r4, #4]
 8005074:	2900      	cmp	r1, #0
 8005076:	dd0d      	ble.n	8005094 <_printf_float+0x1c8>
 8005078:	6121      	str	r1, [r4, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <_printf_float+0x1b8>
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	07d2      	lsls	r2, r2, #31
 8005082:	d502      	bpl.n	800508a <_printf_float+0x1be>
 8005084:	3301      	adds	r3, #1
 8005086:	1859      	adds	r1, r3, r1
 8005088:	6121      	str	r1, [r4, #16]
 800508a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800508c:	65a3      	str	r3, [r4, #88]	; 0x58
 800508e:	2300      	movs	r3, #0
 8005090:	930b      	str	r3, [sp, #44]	; 0x2c
 8005092:	e7d8      	b.n	8005046 <_printf_float+0x17a>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <_printf_float+0x1d4>
 8005098:	2201      	movs	r2, #1
 800509a:	6821      	ldr	r1, [r4, #0]
 800509c:	4211      	tst	r1, r2
 800509e:	d000      	beq.n	80050a2 <_printf_float+0x1d6>
 80050a0:	1c9a      	adds	r2, r3, #2
 80050a2:	6122      	str	r2, [r4, #16]
 80050a4:	e7f1      	b.n	800508a <_printf_float+0x1be>
 80050a6:	2367      	movs	r3, #103	; 0x67
 80050a8:	930a      	str	r3, [sp, #40]	; 0x28
 80050aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050ae:	4293      	cmp	r3, r2
 80050b0:	db06      	blt.n	80050c0 <_printf_float+0x1f4>
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	07d2      	lsls	r2, r2, #31
 80050b8:	d5e7      	bpl.n	800508a <_printf_float+0x1be>
 80050ba:	3301      	adds	r3, #1
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	e7e4      	b.n	800508a <_printf_float+0x1be>
 80050c0:	2101      	movs	r1, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dc01      	bgt.n	80050ca <_printf_float+0x1fe>
 80050c6:	1849      	adds	r1, r1, r1
 80050c8:	1ac9      	subs	r1, r1, r3
 80050ca:	1852      	adds	r2, r2, r1
 80050cc:	e7e9      	b.n	80050a2 <_printf_float+0x1d6>
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	0553      	lsls	r3, r2, #21
 80050d2:	d407      	bmi.n	80050e4 <_printf_float+0x218>
 80050d4:	6923      	ldr	r3, [r4, #16]
 80050d6:	002a      	movs	r2, r5
 80050d8:	0038      	movs	r0, r7
 80050da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050dc:	47b0      	blx	r6
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	d128      	bne.n	8005134 <_printf_float+0x268>
 80050e2:	e751      	b.n	8004f88 <_printf_float+0xbc>
 80050e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e6:	2b65      	cmp	r3, #101	; 0x65
 80050e8:	d800      	bhi.n	80050ec <_printf_float+0x220>
 80050ea:	e0e1      	b.n	80052b0 <_printf_float+0x3e4>
 80050ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80050ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80050f0:	2200      	movs	r2, #0
 80050f2:	2300      	movs	r3, #0
 80050f4:	f7fb f9aa 	bl	800044c <__aeabi_dcmpeq>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d031      	beq.n	8005160 <_printf_float+0x294>
 80050fc:	2301      	movs	r3, #1
 80050fe:	0038      	movs	r0, r7
 8005100:	4a34      	ldr	r2, [pc, #208]	; (80051d4 <_printf_float+0x308>)
 8005102:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005104:	47b0      	blx	r6
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d100      	bne.n	800510c <_printf_float+0x240>
 800510a:	e73d      	b.n	8004f88 <_printf_float+0xbc>
 800510c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800510e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005110:	4293      	cmp	r3, r2
 8005112:	db02      	blt.n	800511a <_printf_float+0x24e>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	07db      	lsls	r3, r3, #31
 8005118:	d50c      	bpl.n	8005134 <_printf_float+0x268>
 800511a:	0038      	movs	r0, r7
 800511c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800511e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005122:	47b0      	blx	r6
 8005124:	2500      	movs	r5, #0
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d100      	bne.n	800512c <_printf_float+0x260>
 800512a:	e72d      	b.n	8004f88 <_printf_float+0xbc>
 800512c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800512e:	3b01      	subs	r3, #1
 8005130:	42ab      	cmp	r3, r5
 8005132:	dc0a      	bgt.n	800514a <_printf_float+0x27e>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	079b      	lsls	r3, r3, #30
 8005138:	d500      	bpl.n	800513c <_printf_float+0x270>
 800513a:	e106      	b.n	800534a <_printf_float+0x47e>
 800513c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800513e:	68e0      	ldr	r0, [r4, #12]
 8005140:	4298      	cmp	r0, r3
 8005142:	db00      	blt.n	8005146 <_printf_float+0x27a>
 8005144:	e722      	b.n	8004f8c <_printf_float+0xc0>
 8005146:	0018      	movs	r0, r3
 8005148:	e720      	b.n	8004f8c <_printf_float+0xc0>
 800514a:	0022      	movs	r2, r4
 800514c:	2301      	movs	r3, #1
 800514e:	0038      	movs	r0, r7
 8005150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005152:	321a      	adds	r2, #26
 8005154:	47b0      	blx	r6
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	d100      	bne.n	800515c <_printf_float+0x290>
 800515a:	e715      	b.n	8004f88 <_printf_float+0xbc>
 800515c:	3501      	adds	r5, #1
 800515e:	e7e5      	b.n	800512c <_printf_float+0x260>
 8005160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005162:	2b00      	cmp	r3, #0
 8005164:	dc38      	bgt.n	80051d8 <_printf_float+0x30c>
 8005166:	2301      	movs	r3, #1
 8005168:	0038      	movs	r0, r7
 800516a:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <_printf_float+0x308>)
 800516c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800516e:	47b0      	blx	r6
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d100      	bne.n	8005176 <_printf_float+0x2aa>
 8005174:	e708      	b.n	8004f88 <_printf_float+0xbc>
 8005176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005178:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800517a:	4313      	orrs	r3, r2
 800517c:	d102      	bne.n	8005184 <_printf_float+0x2b8>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	07db      	lsls	r3, r3, #31
 8005182:	d5d7      	bpl.n	8005134 <_printf_float+0x268>
 8005184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005186:	0038      	movs	r0, r7
 8005188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800518a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800518c:	47b0      	blx	r6
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	d100      	bne.n	8005194 <_printf_float+0x2c8>
 8005192:	e6f9      	b.n	8004f88 <_printf_float+0xbc>
 8005194:	2300      	movs	r3, #0
 8005196:	930a      	str	r3, [sp, #40]	; 0x28
 8005198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800519a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800519c:	425b      	negs	r3, r3
 800519e:	4293      	cmp	r3, r2
 80051a0:	dc01      	bgt.n	80051a6 <_printf_float+0x2da>
 80051a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051a4:	e797      	b.n	80050d6 <_printf_float+0x20a>
 80051a6:	0022      	movs	r2, r4
 80051a8:	2301      	movs	r3, #1
 80051aa:	0038      	movs	r0, r7
 80051ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051ae:	321a      	adds	r2, #26
 80051b0:	47b0      	blx	r6
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	d100      	bne.n	80051b8 <_printf_float+0x2ec>
 80051b6:	e6e7      	b.n	8004f88 <_printf_float+0xbc>
 80051b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ba:	3301      	adds	r3, #1
 80051bc:	e7eb      	b.n	8005196 <_printf_float+0x2ca>
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	7fefffff 	.word	0x7fefffff
 80051c4:	08007be8 	.word	0x08007be8
 80051c8:	08007bec 	.word	0x08007bec
 80051cc:	08007bf0 	.word	0x08007bf0
 80051d0:	08007bf4 	.word	0x08007bf4
 80051d4:	08007bf8 	.word	0x08007bf8
 80051d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051dc:	920a      	str	r2, [sp, #40]	; 0x28
 80051de:	429a      	cmp	r2, r3
 80051e0:	dd00      	ble.n	80051e4 <_printf_float+0x318>
 80051e2:	930a      	str	r3, [sp, #40]	; 0x28
 80051e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	dc3c      	bgt.n	8005264 <_printf_float+0x398>
 80051ea:	2300      	movs	r3, #0
 80051ec:	930d      	str	r3, [sp, #52]	; 0x34
 80051ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f0:	43db      	mvns	r3, r3
 80051f2:	17db      	asrs	r3, r3, #31
 80051f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80051f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80051fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051fe:	4013      	ands	r3, r2
 8005200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005206:	4293      	cmp	r3, r2
 8005208:	dc34      	bgt.n	8005274 <_printf_float+0x3a8>
 800520a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800520c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800520e:	4293      	cmp	r3, r2
 8005210:	db3d      	blt.n	800528e <_printf_float+0x3c2>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	07db      	lsls	r3, r3, #31
 8005216:	d43a      	bmi.n	800528e <_printf_float+0x3c2>
 8005218:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800521a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800521c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	1a52      	subs	r2, r2, r1
 8005222:	920a      	str	r2, [sp, #40]	; 0x28
 8005224:	429a      	cmp	r2, r3
 8005226:	dd00      	ble.n	800522a <_printf_float+0x35e>
 8005228:	930a      	str	r3, [sp, #40]	; 0x28
 800522a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	dc36      	bgt.n	800529e <_printf_float+0x3d2>
 8005230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005232:	2500      	movs	r5, #0
 8005234:	43db      	mvns	r3, r3
 8005236:	17db      	asrs	r3, r3, #31
 8005238:	930b      	str	r3, [sp, #44]	; 0x2c
 800523a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800523c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800523e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005244:	400a      	ands	r2, r1
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	42ab      	cmp	r3, r5
 800524a:	dc00      	bgt.n	800524e <_printf_float+0x382>
 800524c:	e772      	b.n	8005134 <_printf_float+0x268>
 800524e:	0022      	movs	r2, r4
 8005250:	2301      	movs	r3, #1
 8005252:	0038      	movs	r0, r7
 8005254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005256:	321a      	adds	r2, #26
 8005258:	47b0      	blx	r6
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d100      	bne.n	8005260 <_printf_float+0x394>
 800525e:	e693      	b.n	8004f88 <_printf_float+0xbc>
 8005260:	3501      	adds	r5, #1
 8005262:	e7ea      	b.n	800523a <_printf_float+0x36e>
 8005264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005266:	002a      	movs	r2, r5
 8005268:	0038      	movs	r0, r7
 800526a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800526c:	47b0      	blx	r6
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	d1bb      	bne.n	80051ea <_printf_float+0x31e>
 8005272:	e689      	b.n	8004f88 <_printf_float+0xbc>
 8005274:	0022      	movs	r2, r4
 8005276:	2301      	movs	r3, #1
 8005278:	0038      	movs	r0, r7
 800527a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800527c:	321a      	adds	r2, #26
 800527e:	47b0      	blx	r6
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d100      	bne.n	8005286 <_printf_float+0x3ba>
 8005284:	e680      	b.n	8004f88 <_printf_float+0xbc>
 8005286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005288:	3301      	adds	r3, #1
 800528a:	930d      	str	r3, [sp, #52]	; 0x34
 800528c:	e7b3      	b.n	80051f6 <_printf_float+0x32a>
 800528e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005290:	0038      	movs	r0, r7
 8005292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005296:	47b0      	blx	r6
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d1bd      	bne.n	8005218 <_printf_float+0x34c>
 800529c:	e674      	b.n	8004f88 <_printf_float+0xbc>
 800529e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a0:	0038      	movs	r0, r7
 80052a2:	18ea      	adds	r2, r5, r3
 80052a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a8:	47b0      	blx	r6
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	d1c0      	bne.n	8005230 <_printf_float+0x364>
 80052ae:	e66b      	b.n	8004f88 <_printf_float+0xbc>
 80052b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	dc02      	bgt.n	80052bc <_printf_float+0x3f0>
 80052b6:	2301      	movs	r3, #1
 80052b8:	421a      	tst	r2, r3
 80052ba:	d034      	beq.n	8005326 <_printf_float+0x45a>
 80052bc:	2301      	movs	r3, #1
 80052be:	002a      	movs	r2, r5
 80052c0:	0038      	movs	r0, r7
 80052c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052c4:	47b0      	blx	r6
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d100      	bne.n	80052cc <_printf_float+0x400>
 80052ca:	e65d      	b.n	8004f88 <_printf_float+0xbc>
 80052cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052ce:	0038      	movs	r0, r7
 80052d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052d4:	47b0      	blx	r6
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	d100      	bne.n	80052dc <_printf_float+0x410>
 80052da:	e655      	b.n	8004f88 <_printf_float+0xbc>
 80052dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80052de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80052e0:	2200      	movs	r2, #0
 80052e2:	2300      	movs	r3, #0
 80052e4:	f7fb f8b2 	bl	800044c <__aeabi_dcmpeq>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d11a      	bne.n	8005322 <_printf_float+0x456>
 80052ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052ee:	1c6a      	adds	r2, r5, #1
 80052f0:	3b01      	subs	r3, #1
 80052f2:	0038      	movs	r0, r7
 80052f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052f6:	47b0      	blx	r6
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d10e      	bne.n	800531a <_printf_float+0x44e>
 80052fc:	e644      	b.n	8004f88 <_printf_float+0xbc>
 80052fe:	0022      	movs	r2, r4
 8005300:	2301      	movs	r3, #1
 8005302:	0038      	movs	r0, r7
 8005304:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005306:	321a      	adds	r2, #26
 8005308:	47b0      	blx	r6
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	d100      	bne.n	8005310 <_printf_float+0x444>
 800530e:	e63b      	b.n	8004f88 <_printf_float+0xbc>
 8005310:	3501      	adds	r5, #1
 8005312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005314:	3b01      	subs	r3, #1
 8005316:	42ab      	cmp	r3, r5
 8005318:	dcf1      	bgt.n	80052fe <_printf_float+0x432>
 800531a:	0022      	movs	r2, r4
 800531c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800531e:	3250      	adds	r2, #80	; 0x50
 8005320:	e6da      	b.n	80050d8 <_printf_float+0x20c>
 8005322:	2500      	movs	r5, #0
 8005324:	e7f5      	b.n	8005312 <_printf_float+0x446>
 8005326:	002a      	movs	r2, r5
 8005328:	e7e3      	b.n	80052f2 <_printf_float+0x426>
 800532a:	0022      	movs	r2, r4
 800532c:	2301      	movs	r3, #1
 800532e:	0038      	movs	r0, r7
 8005330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005332:	3219      	adds	r2, #25
 8005334:	47b0      	blx	r6
 8005336:	1c43      	adds	r3, r0, #1
 8005338:	d100      	bne.n	800533c <_printf_float+0x470>
 800533a:	e625      	b.n	8004f88 <_printf_float+0xbc>
 800533c:	3501      	adds	r5, #1
 800533e:	68e3      	ldr	r3, [r4, #12]
 8005340:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	42ab      	cmp	r3, r5
 8005346:	dcf0      	bgt.n	800532a <_printf_float+0x45e>
 8005348:	e6f8      	b.n	800513c <_printf_float+0x270>
 800534a:	2500      	movs	r5, #0
 800534c:	e7f7      	b.n	800533e <_printf_float+0x472>
 800534e:	46c0      	nop			; (mov r8, r8)

08005350 <_printf_common>:
 8005350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005352:	0015      	movs	r5, r2
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	688a      	ldr	r2, [r1, #8]
 8005358:	690b      	ldr	r3, [r1, #16]
 800535a:	000c      	movs	r4, r1
 800535c:	9000      	str	r0, [sp, #0]
 800535e:	4293      	cmp	r3, r2
 8005360:	da00      	bge.n	8005364 <_printf_common+0x14>
 8005362:	0013      	movs	r3, r2
 8005364:	0022      	movs	r2, r4
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	3243      	adds	r2, #67	; 0x43
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	2a00      	cmp	r2, #0
 800536e:	d001      	beq.n	8005374 <_printf_common+0x24>
 8005370:	3301      	adds	r3, #1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	069b      	lsls	r3, r3, #26
 8005378:	d502      	bpl.n	8005380 <_printf_common+0x30>
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	3302      	adds	r3, #2
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	2306      	movs	r3, #6
 8005384:	0017      	movs	r7, r2
 8005386:	401f      	ands	r7, r3
 8005388:	421a      	tst	r2, r3
 800538a:	d027      	beq.n	80053dc <_printf_common+0x8c>
 800538c:	0023      	movs	r3, r4
 800538e:	3343      	adds	r3, #67	; 0x43
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	1e5a      	subs	r2, r3, #1
 8005394:	4193      	sbcs	r3, r2
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	0692      	lsls	r2, r2, #26
 800539a:	d430      	bmi.n	80053fe <_printf_common+0xae>
 800539c:	0022      	movs	r2, r4
 800539e:	9901      	ldr	r1, [sp, #4]
 80053a0:	9800      	ldr	r0, [sp, #0]
 80053a2:	9e08      	ldr	r6, [sp, #32]
 80053a4:	3243      	adds	r2, #67	; 0x43
 80053a6:	47b0      	blx	r6
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d025      	beq.n	80053f8 <_printf_common+0xa8>
 80053ac:	2306      	movs	r3, #6
 80053ae:	6820      	ldr	r0, [r4, #0]
 80053b0:	682a      	ldr	r2, [r5, #0]
 80053b2:	68e1      	ldr	r1, [r4, #12]
 80053b4:	2500      	movs	r5, #0
 80053b6:	4003      	ands	r3, r0
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d103      	bne.n	80053c4 <_printf_common+0x74>
 80053bc:	1a8d      	subs	r5, r1, r2
 80053be:	43eb      	mvns	r3, r5
 80053c0:	17db      	asrs	r3, r3, #31
 80053c2:	401d      	ands	r5, r3
 80053c4:	68a3      	ldr	r3, [r4, #8]
 80053c6:	6922      	ldr	r2, [r4, #16]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	dd01      	ble.n	80053d0 <_printf_common+0x80>
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	18ed      	adds	r5, r5, r3
 80053d0:	2700      	movs	r7, #0
 80053d2:	42bd      	cmp	r5, r7
 80053d4:	d120      	bne.n	8005418 <_printf_common+0xc8>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e010      	b.n	80053fc <_printf_common+0xac>
 80053da:	3701      	adds	r7, #1
 80053dc:	68e3      	ldr	r3, [r4, #12]
 80053de:	682a      	ldr	r2, [r5, #0]
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	42bb      	cmp	r3, r7
 80053e4:	ddd2      	ble.n	800538c <_printf_common+0x3c>
 80053e6:	0022      	movs	r2, r4
 80053e8:	2301      	movs	r3, #1
 80053ea:	9901      	ldr	r1, [sp, #4]
 80053ec:	9800      	ldr	r0, [sp, #0]
 80053ee:	9e08      	ldr	r6, [sp, #32]
 80053f0:	3219      	adds	r2, #25
 80053f2:	47b0      	blx	r6
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d1f0      	bne.n	80053da <_printf_common+0x8a>
 80053f8:	2001      	movs	r0, #1
 80053fa:	4240      	negs	r0, r0
 80053fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053fe:	2030      	movs	r0, #48	; 0x30
 8005400:	18e1      	adds	r1, r4, r3
 8005402:	3143      	adds	r1, #67	; 0x43
 8005404:	7008      	strb	r0, [r1, #0]
 8005406:	0021      	movs	r1, r4
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	3145      	adds	r1, #69	; 0x45
 800540c:	7809      	ldrb	r1, [r1, #0]
 800540e:	18a2      	adds	r2, r4, r2
 8005410:	3243      	adds	r2, #67	; 0x43
 8005412:	3302      	adds	r3, #2
 8005414:	7011      	strb	r1, [r2, #0]
 8005416:	e7c1      	b.n	800539c <_printf_common+0x4c>
 8005418:	0022      	movs	r2, r4
 800541a:	2301      	movs	r3, #1
 800541c:	9901      	ldr	r1, [sp, #4]
 800541e:	9800      	ldr	r0, [sp, #0]
 8005420:	9e08      	ldr	r6, [sp, #32]
 8005422:	321a      	adds	r2, #26
 8005424:	47b0      	blx	r6
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d0e6      	beq.n	80053f8 <_printf_common+0xa8>
 800542a:	3701      	adds	r7, #1
 800542c:	e7d1      	b.n	80053d2 <_printf_common+0x82>
	...

08005430 <_printf_i>:
 8005430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005432:	b08b      	sub	sp, #44	; 0x2c
 8005434:	9206      	str	r2, [sp, #24]
 8005436:	000a      	movs	r2, r1
 8005438:	3243      	adds	r2, #67	; 0x43
 800543a:	9307      	str	r3, [sp, #28]
 800543c:	9005      	str	r0, [sp, #20]
 800543e:	9204      	str	r2, [sp, #16]
 8005440:	7e0a      	ldrb	r2, [r1, #24]
 8005442:	000c      	movs	r4, r1
 8005444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005446:	2a78      	cmp	r2, #120	; 0x78
 8005448:	d807      	bhi.n	800545a <_printf_i+0x2a>
 800544a:	2a62      	cmp	r2, #98	; 0x62
 800544c:	d809      	bhi.n	8005462 <_printf_i+0x32>
 800544e:	2a00      	cmp	r2, #0
 8005450:	d100      	bne.n	8005454 <_printf_i+0x24>
 8005452:	e0c1      	b.n	80055d8 <_printf_i+0x1a8>
 8005454:	2a58      	cmp	r2, #88	; 0x58
 8005456:	d100      	bne.n	800545a <_printf_i+0x2a>
 8005458:	e08c      	b.n	8005574 <_printf_i+0x144>
 800545a:	0026      	movs	r6, r4
 800545c:	3642      	adds	r6, #66	; 0x42
 800545e:	7032      	strb	r2, [r6, #0]
 8005460:	e022      	b.n	80054a8 <_printf_i+0x78>
 8005462:	0010      	movs	r0, r2
 8005464:	3863      	subs	r0, #99	; 0x63
 8005466:	2815      	cmp	r0, #21
 8005468:	d8f7      	bhi.n	800545a <_printf_i+0x2a>
 800546a:	f7fa fe5f 	bl	800012c <__gnu_thumb1_case_shi>
 800546e:	0016      	.short	0x0016
 8005470:	fff6001f 	.word	0xfff6001f
 8005474:	fff6fff6 	.word	0xfff6fff6
 8005478:	001ffff6 	.word	0x001ffff6
 800547c:	fff6fff6 	.word	0xfff6fff6
 8005480:	fff6fff6 	.word	0xfff6fff6
 8005484:	003600a8 	.word	0x003600a8
 8005488:	fff6009a 	.word	0xfff6009a
 800548c:	00b9fff6 	.word	0x00b9fff6
 8005490:	0036fff6 	.word	0x0036fff6
 8005494:	fff6fff6 	.word	0xfff6fff6
 8005498:	009e      	.short	0x009e
 800549a:	0026      	movs	r6, r4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	3642      	adds	r6, #66	; 0x42
 80054a0:	1d11      	adds	r1, r2, #4
 80054a2:	6019      	str	r1, [r3, #0]
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	7033      	strb	r3, [r6, #0]
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0a7      	b.n	80055fc <_printf_i+0x1cc>
 80054ac:	6808      	ldr	r0, [r1, #0]
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	1d0a      	adds	r2, r1, #4
 80054b2:	0605      	lsls	r5, r0, #24
 80054b4:	d50b      	bpl.n	80054ce <_printf_i+0x9e>
 80054b6:	680d      	ldr	r5, [r1, #0]
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	da03      	bge.n	80054c6 <_printf_i+0x96>
 80054be:	232d      	movs	r3, #45	; 0x2d
 80054c0:	9a04      	ldr	r2, [sp, #16]
 80054c2:	426d      	negs	r5, r5
 80054c4:	7013      	strb	r3, [r2, #0]
 80054c6:	4b61      	ldr	r3, [pc, #388]	; (800564c <_printf_i+0x21c>)
 80054c8:	270a      	movs	r7, #10
 80054ca:	9303      	str	r3, [sp, #12]
 80054cc:	e01b      	b.n	8005506 <_printf_i+0xd6>
 80054ce:	680d      	ldr	r5, [r1, #0]
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	0641      	lsls	r1, r0, #25
 80054d4:	d5f1      	bpl.n	80054ba <_printf_i+0x8a>
 80054d6:	b22d      	sxth	r5, r5
 80054d8:	e7ef      	b.n	80054ba <_printf_i+0x8a>
 80054da:	680d      	ldr	r5, [r1, #0]
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	1d08      	adds	r0, r1, #4
 80054e0:	6018      	str	r0, [r3, #0]
 80054e2:	062e      	lsls	r6, r5, #24
 80054e4:	d501      	bpl.n	80054ea <_printf_i+0xba>
 80054e6:	680d      	ldr	r5, [r1, #0]
 80054e8:	e003      	b.n	80054f2 <_printf_i+0xc2>
 80054ea:	066d      	lsls	r5, r5, #25
 80054ec:	d5fb      	bpl.n	80054e6 <_printf_i+0xb6>
 80054ee:	680d      	ldr	r5, [r1, #0]
 80054f0:	b2ad      	uxth	r5, r5
 80054f2:	4b56      	ldr	r3, [pc, #344]	; (800564c <_printf_i+0x21c>)
 80054f4:	2708      	movs	r7, #8
 80054f6:	9303      	str	r3, [sp, #12]
 80054f8:	2a6f      	cmp	r2, #111	; 0x6f
 80054fa:	d000      	beq.n	80054fe <_printf_i+0xce>
 80054fc:	3702      	adds	r7, #2
 80054fe:	0023      	movs	r3, r4
 8005500:	2200      	movs	r2, #0
 8005502:	3343      	adds	r3, #67	; 0x43
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	6863      	ldr	r3, [r4, #4]
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	db03      	blt.n	8005516 <_printf_i+0xe6>
 800550e:	2204      	movs	r2, #4
 8005510:	6821      	ldr	r1, [r4, #0]
 8005512:	4391      	bics	r1, r2
 8005514:	6021      	str	r1, [r4, #0]
 8005516:	2d00      	cmp	r5, #0
 8005518:	d102      	bne.n	8005520 <_printf_i+0xf0>
 800551a:	9e04      	ldr	r6, [sp, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00c      	beq.n	800553a <_printf_i+0x10a>
 8005520:	9e04      	ldr	r6, [sp, #16]
 8005522:	0028      	movs	r0, r5
 8005524:	0039      	movs	r1, r7
 8005526:	f7fa fe91 	bl	800024c <__aeabi_uidivmod>
 800552a:	9b03      	ldr	r3, [sp, #12]
 800552c:	3e01      	subs	r6, #1
 800552e:	5c5b      	ldrb	r3, [r3, r1]
 8005530:	7033      	strb	r3, [r6, #0]
 8005532:	002b      	movs	r3, r5
 8005534:	0005      	movs	r5, r0
 8005536:	429f      	cmp	r7, r3
 8005538:	d9f3      	bls.n	8005522 <_printf_i+0xf2>
 800553a:	2f08      	cmp	r7, #8
 800553c:	d109      	bne.n	8005552 <_printf_i+0x122>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	07db      	lsls	r3, r3, #31
 8005542:	d506      	bpl.n	8005552 <_printf_i+0x122>
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	6922      	ldr	r2, [r4, #16]
 8005548:	4293      	cmp	r3, r2
 800554a:	dc02      	bgt.n	8005552 <_printf_i+0x122>
 800554c:	2330      	movs	r3, #48	; 0x30
 800554e:	3e01      	subs	r6, #1
 8005550:	7033      	strb	r3, [r6, #0]
 8005552:	9b04      	ldr	r3, [sp, #16]
 8005554:	1b9b      	subs	r3, r3, r6
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	9b07      	ldr	r3, [sp, #28]
 800555a:	0021      	movs	r1, r4
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	9805      	ldr	r0, [sp, #20]
 8005560:	9b06      	ldr	r3, [sp, #24]
 8005562:	aa09      	add	r2, sp, #36	; 0x24
 8005564:	f7ff fef4 	bl	8005350 <_printf_common>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d14c      	bne.n	8005606 <_printf_i+0x1d6>
 800556c:	2001      	movs	r0, #1
 800556e:	4240      	negs	r0, r0
 8005570:	b00b      	add	sp, #44	; 0x2c
 8005572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005574:	3145      	adds	r1, #69	; 0x45
 8005576:	700a      	strb	r2, [r1, #0]
 8005578:	4a34      	ldr	r2, [pc, #208]	; (800564c <_printf_i+0x21c>)
 800557a:	9203      	str	r2, [sp, #12]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	6821      	ldr	r1, [r4, #0]
 8005580:	ca20      	ldmia	r2!, {r5}
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	0608      	lsls	r0, r1, #24
 8005586:	d516      	bpl.n	80055b6 <_printf_i+0x186>
 8005588:	07cb      	lsls	r3, r1, #31
 800558a:	d502      	bpl.n	8005592 <_printf_i+0x162>
 800558c:	2320      	movs	r3, #32
 800558e:	4319      	orrs	r1, r3
 8005590:	6021      	str	r1, [r4, #0]
 8005592:	2710      	movs	r7, #16
 8005594:	2d00      	cmp	r5, #0
 8005596:	d1b2      	bne.n	80054fe <_printf_i+0xce>
 8005598:	2320      	movs	r3, #32
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	439a      	bics	r2, r3
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	e7ad      	b.n	80054fe <_printf_i+0xce>
 80055a2:	2220      	movs	r2, #32
 80055a4:	6809      	ldr	r1, [r1, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	6022      	str	r2, [r4, #0]
 80055aa:	0022      	movs	r2, r4
 80055ac:	2178      	movs	r1, #120	; 0x78
 80055ae:	3245      	adds	r2, #69	; 0x45
 80055b0:	7011      	strb	r1, [r2, #0]
 80055b2:	4a27      	ldr	r2, [pc, #156]	; (8005650 <_printf_i+0x220>)
 80055b4:	e7e1      	b.n	800557a <_printf_i+0x14a>
 80055b6:	0648      	lsls	r0, r1, #25
 80055b8:	d5e6      	bpl.n	8005588 <_printf_i+0x158>
 80055ba:	b2ad      	uxth	r5, r5
 80055bc:	e7e4      	b.n	8005588 <_printf_i+0x158>
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	680d      	ldr	r5, [r1, #0]
 80055c2:	1d10      	adds	r0, r2, #4
 80055c4:	6949      	ldr	r1, [r1, #20]
 80055c6:	6018      	str	r0, [r3, #0]
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	062e      	lsls	r6, r5, #24
 80055cc:	d501      	bpl.n	80055d2 <_printf_i+0x1a2>
 80055ce:	6019      	str	r1, [r3, #0]
 80055d0:	e002      	b.n	80055d8 <_printf_i+0x1a8>
 80055d2:	066d      	lsls	r5, r5, #25
 80055d4:	d5fb      	bpl.n	80055ce <_printf_i+0x19e>
 80055d6:	8019      	strh	r1, [r3, #0]
 80055d8:	2300      	movs	r3, #0
 80055da:	9e04      	ldr	r6, [sp, #16]
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	e7bb      	b.n	8005558 <_printf_i+0x128>
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	1d11      	adds	r1, r2, #4
 80055e4:	6019      	str	r1, [r3, #0]
 80055e6:	6816      	ldr	r6, [r2, #0]
 80055e8:	2100      	movs	r1, #0
 80055ea:	0030      	movs	r0, r6
 80055ec:	6862      	ldr	r2, [r4, #4]
 80055ee:	f000 ff0d 	bl	800640c <memchr>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d001      	beq.n	80055fa <_printf_i+0x1ca>
 80055f6:	1b80      	subs	r0, r0, r6
 80055f8:	6060      	str	r0, [r4, #4]
 80055fa:	6863      	ldr	r3, [r4, #4]
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	2300      	movs	r3, #0
 8005600:	9a04      	ldr	r2, [sp, #16]
 8005602:	7013      	strb	r3, [r2, #0]
 8005604:	e7a8      	b.n	8005558 <_printf_i+0x128>
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	0032      	movs	r2, r6
 800560a:	9906      	ldr	r1, [sp, #24]
 800560c:	9805      	ldr	r0, [sp, #20]
 800560e:	9d07      	ldr	r5, [sp, #28]
 8005610:	47a8      	blx	r5
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	d0aa      	beq.n	800556c <_printf_i+0x13c>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	079b      	lsls	r3, r3, #30
 800561a:	d415      	bmi.n	8005648 <_printf_i+0x218>
 800561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561e:	68e0      	ldr	r0, [r4, #12]
 8005620:	4298      	cmp	r0, r3
 8005622:	daa5      	bge.n	8005570 <_printf_i+0x140>
 8005624:	0018      	movs	r0, r3
 8005626:	e7a3      	b.n	8005570 <_printf_i+0x140>
 8005628:	0022      	movs	r2, r4
 800562a:	2301      	movs	r3, #1
 800562c:	9906      	ldr	r1, [sp, #24]
 800562e:	9805      	ldr	r0, [sp, #20]
 8005630:	9e07      	ldr	r6, [sp, #28]
 8005632:	3219      	adds	r2, #25
 8005634:	47b0      	blx	r6
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	d098      	beq.n	800556c <_printf_i+0x13c>
 800563a:	3501      	adds	r5, #1
 800563c:	68e3      	ldr	r3, [r4, #12]
 800563e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	42ab      	cmp	r3, r5
 8005644:	dcf0      	bgt.n	8005628 <_printf_i+0x1f8>
 8005646:	e7e9      	b.n	800561c <_printf_i+0x1ec>
 8005648:	2500      	movs	r5, #0
 800564a:	e7f7      	b.n	800563c <_printf_i+0x20c>
 800564c:	08007bfa 	.word	0x08007bfa
 8005650:	08007c0b 	.word	0x08007c0b

08005654 <_sbrk_r>:
 8005654:	2300      	movs	r3, #0
 8005656:	b570      	push	{r4, r5, r6, lr}
 8005658:	4d06      	ldr	r5, [pc, #24]	; (8005674 <_sbrk_r+0x20>)
 800565a:	0004      	movs	r4, r0
 800565c:	0008      	movs	r0, r1
 800565e:	602b      	str	r3, [r5, #0]
 8005660:	f7fd fb6a 	bl	8002d38 <_sbrk>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d103      	bne.n	8005670 <_sbrk_r+0x1c>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d000      	beq.n	8005670 <_sbrk_r+0x1c>
 800566e:	6023      	str	r3, [r4, #0]
 8005670:	bd70      	pop	{r4, r5, r6, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	20000268 	.word	0x20000268

08005678 <siprintf>:
 8005678:	b40e      	push	{r1, r2, r3}
 800567a:	b500      	push	{lr}
 800567c:	490b      	ldr	r1, [pc, #44]	; (80056ac <siprintf+0x34>)
 800567e:	b09c      	sub	sp, #112	; 0x70
 8005680:	ab1d      	add	r3, sp, #116	; 0x74
 8005682:	9002      	str	r0, [sp, #8]
 8005684:	9006      	str	r0, [sp, #24]
 8005686:	9107      	str	r1, [sp, #28]
 8005688:	9104      	str	r1, [sp, #16]
 800568a:	4809      	ldr	r0, [pc, #36]	; (80056b0 <siprintf+0x38>)
 800568c:	4909      	ldr	r1, [pc, #36]	; (80056b4 <siprintf+0x3c>)
 800568e:	cb04      	ldmia	r3!, {r2}
 8005690:	9105      	str	r1, [sp, #20]
 8005692:	6800      	ldr	r0, [r0, #0]
 8005694:	a902      	add	r1, sp, #8
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	f001 fb06 	bl	8006ca8 <_svfiprintf_r>
 800569c:	2300      	movs	r3, #0
 800569e:	9a02      	ldr	r2, [sp, #8]
 80056a0:	7013      	strb	r3, [r2, #0]
 80056a2:	b01c      	add	sp, #112	; 0x70
 80056a4:	bc08      	pop	{r3}
 80056a6:	b003      	add	sp, #12
 80056a8:	4718      	bx	r3
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	7fffffff 	.word	0x7fffffff
 80056b0:	2000000c 	.word	0x2000000c
 80056b4:	ffff0208 	.word	0xffff0208

080056b8 <quorem>:
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	0006      	movs	r6, r0
 80056bc:	690b      	ldr	r3, [r1, #16]
 80056be:	6932      	ldr	r2, [r6, #16]
 80056c0:	b087      	sub	sp, #28
 80056c2:	2000      	movs	r0, #0
 80056c4:	9103      	str	r1, [sp, #12]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	db65      	blt.n	8005796 <quorem+0xde>
 80056ca:	3b01      	subs	r3, #1
 80056cc:	009c      	lsls	r4, r3, #2
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	000b      	movs	r3, r1
 80056d2:	3314      	adds	r3, #20
 80056d4:	9305      	str	r3, [sp, #20]
 80056d6:	191b      	adds	r3, r3, r4
 80056d8:	9304      	str	r3, [sp, #16]
 80056da:	0033      	movs	r3, r6
 80056dc:	3314      	adds	r3, #20
 80056de:	9302      	str	r3, [sp, #8]
 80056e0:	191c      	adds	r4, r3, r4
 80056e2:	9b04      	ldr	r3, [sp, #16]
 80056e4:	6827      	ldr	r7, [r4, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	0038      	movs	r0, r7
 80056ea:	1c5d      	adds	r5, r3, #1
 80056ec:	0029      	movs	r1, r5
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	f7fa fd26 	bl	8000140 <__udivsi3>
 80056f4:	9001      	str	r0, [sp, #4]
 80056f6:	42af      	cmp	r7, r5
 80056f8:	d324      	bcc.n	8005744 <quorem+0x8c>
 80056fa:	2500      	movs	r5, #0
 80056fc:	46ac      	mov	ip, r5
 80056fe:	9802      	ldr	r0, [sp, #8]
 8005700:	9f05      	ldr	r7, [sp, #20]
 8005702:	cf08      	ldmia	r7!, {r3}
 8005704:	9a01      	ldr	r2, [sp, #4]
 8005706:	b299      	uxth	r1, r3
 8005708:	4351      	muls	r1, r2
 800570a:	0c1b      	lsrs	r3, r3, #16
 800570c:	4353      	muls	r3, r2
 800570e:	1949      	adds	r1, r1, r5
 8005710:	0c0a      	lsrs	r2, r1, #16
 8005712:	189b      	adds	r3, r3, r2
 8005714:	6802      	ldr	r2, [r0, #0]
 8005716:	b289      	uxth	r1, r1
 8005718:	b292      	uxth	r2, r2
 800571a:	4462      	add	r2, ip
 800571c:	1a52      	subs	r2, r2, r1
 800571e:	6801      	ldr	r1, [r0, #0]
 8005720:	0c1d      	lsrs	r5, r3, #16
 8005722:	0c09      	lsrs	r1, r1, #16
 8005724:	b29b      	uxth	r3, r3
 8005726:	1acb      	subs	r3, r1, r3
 8005728:	1411      	asrs	r1, r2, #16
 800572a:	185b      	adds	r3, r3, r1
 800572c:	1419      	asrs	r1, r3, #16
 800572e:	b292      	uxth	r2, r2
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	431a      	orrs	r2, r3
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	468c      	mov	ip, r1
 8005738:	c004      	stmia	r0!, {r2}
 800573a:	42bb      	cmp	r3, r7
 800573c:	d2e1      	bcs.n	8005702 <quorem+0x4a>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d030      	beq.n	80057a6 <quorem+0xee>
 8005744:	0030      	movs	r0, r6
 8005746:	9903      	ldr	r1, [sp, #12]
 8005748:	f001 f908 	bl	800695c <__mcmp>
 800574c:	2800      	cmp	r0, #0
 800574e:	db21      	blt.n	8005794 <quorem+0xdc>
 8005750:	0030      	movs	r0, r6
 8005752:	2400      	movs	r4, #0
 8005754:	9b01      	ldr	r3, [sp, #4]
 8005756:	9903      	ldr	r1, [sp, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	3014      	adds	r0, #20
 800575e:	3114      	adds	r1, #20
 8005760:	6803      	ldr	r3, [r0, #0]
 8005762:	c920      	ldmia	r1!, {r5}
 8005764:	b29a      	uxth	r2, r3
 8005766:	1914      	adds	r4, r2, r4
 8005768:	b2aa      	uxth	r2, r5
 800576a:	1aa2      	subs	r2, r4, r2
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	0c2d      	lsrs	r5, r5, #16
 8005770:	1414      	asrs	r4, r2, #16
 8005772:	1b5b      	subs	r3, r3, r5
 8005774:	191b      	adds	r3, r3, r4
 8005776:	141c      	asrs	r4, r3, #16
 8005778:	b292      	uxth	r2, r2
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	4313      	orrs	r3, r2
 800577e:	c008      	stmia	r0!, {r3}
 8005780:	9b04      	ldr	r3, [sp, #16]
 8005782:	428b      	cmp	r3, r1
 8005784:	d2ec      	bcs.n	8005760 <quorem+0xa8>
 8005786:	9b00      	ldr	r3, [sp, #0]
 8005788:	9a02      	ldr	r2, [sp, #8]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	18d3      	adds	r3, r2, r3
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	2a00      	cmp	r2, #0
 8005792:	d015      	beq.n	80057c0 <quorem+0x108>
 8005794:	9801      	ldr	r0, [sp, #4]
 8005796:	b007      	add	sp, #28
 8005798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <quorem+0xf6>
 80057a0:	9b00      	ldr	r3, [sp, #0]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	9b02      	ldr	r3, [sp, #8]
 80057a8:	3c04      	subs	r4, #4
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	d3f5      	bcc.n	800579a <quorem+0xe2>
 80057ae:	9b00      	ldr	r3, [sp, #0]
 80057b0:	6133      	str	r3, [r6, #16]
 80057b2:	e7c7      	b.n	8005744 <quorem+0x8c>
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	2a00      	cmp	r2, #0
 80057b8:	d106      	bne.n	80057c8 <quorem+0x110>
 80057ba:	9a00      	ldr	r2, [sp, #0]
 80057bc:	3a01      	subs	r2, #1
 80057be:	9200      	str	r2, [sp, #0]
 80057c0:	9a02      	ldr	r2, [sp, #8]
 80057c2:	3b04      	subs	r3, #4
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d3f5      	bcc.n	80057b4 <quorem+0xfc>
 80057c8:	9b00      	ldr	r3, [sp, #0]
 80057ca:	6133      	str	r3, [r6, #16]
 80057cc:	e7e2      	b.n	8005794 <quorem+0xdc>
	...

080057d0 <_dtoa_r>:
 80057d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d2:	b09d      	sub	sp, #116	; 0x74
 80057d4:	9202      	str	r2, [sp, #8]
 80057d6:	9303      	str	r3, [sp, #12]
 80057d8:	9b02      	ldr	r3, [sp, #8]
 80057da:	9c03      	ldr	r4, [sp, #12]
 80057dc:	9308      	str	r3, [sp, #32]
 80057de:	9409      	str	r4, [sp, #36]	; 0x24
 80057e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80057e2:	0007      	movs	r7, r0
 80057e4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	d10e      	bne.n	8005808 <_dtoa_r+0x38>
 80057ea:	2010      	movs	r0, #16
 80057ec:	f7ff f9d0 	bl	8004b90 <malloc>
 80057f0:	1e02      	subs	r2, r0, #0
 80057f2:	6278      	str	r0, [r7, #36]	; 0x24
 80057f4:	d104      	bne.n	8005800 <_dtoa_r+0x30>
 80057f6:	21ea      	movs	r1, #234	; 0xea
 80057f8:	4bc7      	ldr	r3, [pc, #796]	; (8005b18 <_dtoa_r+0x348>)
 80057fa:	48c8      	ldr	r0, [pc, #800]	; (8005b1c <_dtoa_r+0x34c>)
 80057fc:	f001 fb54 	bl	8006ea8 <__assert_func>
 8005800:	6044      	str	r4, [r0, #4]
 8005802:	6084      	str	r4, [r0, #8]
 8005804:	6004      	str	r4, [r0, #0]
 8005806:	60c4      	str	r4, [r0, #12]
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	2900      	cmp	r1, #0
 800580e:	d00a      	beq.n	8005826 <_dtoa_r+0x56>
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	2301      	movs	r3, #1
 8005814:	4093      	lsls	r3, r2
 8005816:	604a      	str	r2, [r1, #4]
 8005818:	608b      	str	r3, [r1, #8]
 800581a:	0038      	movs	r0, r7
 800581c:	f000 fe5e 	bl	80064dc <_Bfree>
 8005820:	2200      	movs	r2, #0
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	da20      	bge.n	800586e <_dtoa_r+0x9e>
 800582c:	2301      	movs	r3, #1
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	9309      	str	r3, [sp, #36]	; 0x24
 8005838:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800583a:	4bb9      	ldr	r3, [pc, #740]	; (8005b20 <_dtoa_r+0x350>)
 800583c:	4ab8      	ldr	r2, [pc, #736]	; (8005b20 <_dtoa_r+0x350>)
 800583e:	402b      	ands	r3, r5
 8005840:	4293      	cmp	r3, r2
 8005842:	d117      	bne.n	8005874 <_dtoa_r+0xa4>
 8005844:	4bb7      	ldr	r3, [pc, #732]	; (8005b24 <_dtoa_r+0x354>)
 8005846:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005848:	0328      	lsls	r0, r5, #12
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	9b02      	ldr	r3, [sp, #8]
 800584e:	0b00      	lsrs	r0, r0, #12
 8005850:	4318      	orrs	r0, r3
 8005852:	d101      	bne.n	8005858 <_dtoa_r+0x88>
 8005854:	f000 fdbf 	bl	80063d6 <_dtoa_r+0xc06>
 8005858:	48b3      	ldr	r0, [pc, #716]	; (8005b28 <_dtoa_r+0x358>)
 800585a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800585c:	9006      	str	r0, [sp, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <_dtoa_r+0x98>
 8005862:	4bb2      	ldr	r3, [pc, #712]	; (8005b2c <_dtoa_r+0x35c>)
 8005864:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	9806      	ldr	r0, [sp, #24]
 800586a:	b01d      	add	sp, #116	; 0x74
 800586c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800586e:	2300      	movs	r3, #0
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	e7e1      	b.n	8005838 <_dtoa_r+0x68>
 8005874:	9b08      	ldr	r3, [sp, #32]
 8005876:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005878:	9312      	str	r3, [sp, #72]	; 0x48
 800587a:	9413      	str	r4, [sp, #76]	; 0x4c
 800587c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800587e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	f7fa fde2 	bl	800044c <__aeabi_dcmpeq>
 8005888:	1e04      	subs	r4, r0, #0
 800588a:	d009      	beq.n	80058a0 <_dtoa_r+0xd0>
 800588c:	2301      	movs	r3, #1
 800588e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4ba7      	ldr	r3, [pc, #668]	; (8005b30 <_dtoa_r+0x360>)
 8005894:	9306      	str	r3, [sp, #24]
 8005896:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0e5      	beq.n	8005868 <_dtoa_r+0x98>
 800589c:	4ba5      	ldr	r3, [pc, #660]	; (8005b34 <_dtoa_r+0x364>)
 800589e:	e7e1      	b.n	8005864 <_dtoa_r+0x94>
 80058a0:	ab1a      	add	r3, sp, #104	; 0x68
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	ab1b      	add	r3, sp, #108	; 0x6c
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	0038      	movs	r0, r7
 80058aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058ae:	f001 f909 	bl	8006ac4 <__d2b>
 80058b2:	006e      	lsls	r6, r5, #1
 80058b4:	9005      	str	r0, [sp, #20]
 80058b6:	0d76      	lsrs	r6, r6, #21
 80058b8:	d100      	bne.n	80058bc <_dtoa_r+0xec>
 80058ba:	e07c      	b.n	80059b6 <_dtoa_r+0x1e6>
 80058bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80058be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80058c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058c2:	4a9d      	ldr	r2, [pc, #628]	; (8005b38 <_dtoa_r+0x368>)
 80058c4:	031b      	lsls	r3, r3, #12
 80058c6:	0b1b      	lsrs	r3, r3, #12
 80058c8:	431a      	orrs	r2, r3
 80058ca:	0011      	movs	r1, r2
 80058cc:	4b9b      	ldr	r3, [pc, #620]	; (8005b3c <_dtoa_r+0x36c>)
 80058ce:	9418      	str	r4, [sp, #96]	; 0x60
 80058d0:	18f6      	adds	r6, r6, r3
 80058d2:	2200      	movs	r2, #0
 80058d4:	4b9a      	ldr	r3, [pc, #616]	; (8005b40 <_dtoa_r+0x370>)
 80058d6:	f7fc fa1f 	bl	8001d18 <__aeabi_dsub>
 80058da:	4a9a      	ldr	r2, [pc, #616]	; (8005b44 <_dtoa_r+0x374>)
 80058dc:	4b9a      	ldr	r3, [pc, #616]	; (8005b48 <_dtoa_r+0x378>)
 80058de:	f7fb ffaf 	bl	8001840 <__aeabi_dmul>
 80058e2:	4a9a      	ldr	r2, [pc, #616]	; (8005b4c <_dtoa_r+0x37c>)
 80058e4:	4b9a      	ldr	r3, [pc, #616]	; (8005b50 <_dtoa_r+0x380>)
 80058e6:	f7fb f86d 	bl	80009c4 <__aeabi_dadd>
 80058ea:	0004      	movs	r4, r0
 80058ec:	0030      	movs	r0, r6
 80058ee:	000d      	movs	r5, r1
 80058f0:	f7fc fdf8 	bl	80024e4 <__aeabi_i2d>
 80058f4:	4a97      	ldr	r2, [pc, #604]	; (8005b54 <_dtoa_r+0x384>)
 80058f6:	4b98      	ldr	r3, [pc, #608]	; (8005b58 <_dtoa_r+0x388>)
 80058f8:	f7fb ffa2 	bl	8001840 <__aeabi_dmul>
 80058fc:	0002      	movs	r2, r0
 80058fe:	000b      	movs	r3, r1
 8005900:	0020      	movs	r0, r4
 8005902:	0029      	movs	r1, r5
 8005904:	f7fb f85e 	bl	80009c4 <__aeabi_dadd>
 8005908:	0004      	movs	r4, r0
 800590a:	000d      	movs	r5, r1
 800590c:	f7fc fdb4 	bl	8002478 <__aeabi_d2iz>
 8005910:	2200      	movs	r2, #0
 8005912:	9002      	str	r0, [sp, #8]
 8005914:	2300      	movs	r3, #0
 8005916:	0020      	movs	r0, r4
 8005918:	0029      	movs	r1, r5
 800591a:	f7fa fd9d 	bl	8000458 <__aeabi_dcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	d00b      	beq.n	800593a <_dtoa_r+0x16a>
 8005922:	9802      	ldr	r0, [sp, #8]
 8005924:	f7fc fdde 	bl	80024e4 <__aeabi_i2d>
 8005928:	002b      	movs	r3, r5
 800592a:	0022      	movs	r2, r4
 800592c:	f7fa fd8e 	bl	800044c <__aeabi_dcmpeq>
 8005930:	4243      	negs	r3, r0
 8005932:	4158      	adcs	r0, r3
 8005934:	9b02      	ldr	r3, [sp, #8]
 8005936:	1a1b      	subs	r3, r3, r0
 8005938:	9302      	str	r3, [sp, #8]
 800593a:	2301      	movs	r3, #1
 800593c:	9316      	str	r3, [sp, #88]	; 0x58
 800593e:	9b02      	ldr	r3, [sp, #8]
 8005940:	2b16      	cmp	r3, #22
 8005942:	d80f      	bhi.n	8005964 <_dtoa_r+0x194>
 8005944:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005946:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005948:	00da      	lsls	r2, r3, #3
 800594a:	4b84      	ldr	r3, [pc, #528]	; (8005b5c <_dtoa_r+0x38c>)
 800594c:	189b      	adds	r3, r3, r2
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f7fa fd81 	bl	8000458 <__aeabi_dcmplt>
 8005956:	2800      	cmp	r0, #0
 8005958:	d049      	beq.n	80059ee <_dtoa_r+0x21e>
 800595a:	9b02      	ldr	r3, [sp, #8]
 800595c:	3b01      	subs	r3, #1
 800595e:	9302      	str	r3, [sp, #8]
 8005960:	2300      	movs	r3, #0
 8005962:	9316      	str	r3, [sp, #88]	; 0x58
 8005964:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005966:	1b9e      	subs	r6, r3, r6
 8005968:	2300      	movs	r3, #0
 800596a:	930a      	str	r3, [sp, #40]	; 0x28
 800596c:	0033      	movs	r3, r6
 800596e:	3b01      	subs	r3, #1
 8005970:	930d      	str	r3, [sp, #52]	; 0x34
 8005972:	d504      	bpl.n	800597e <_dtoa_r+0x1ae>
 8005974:	2301      	movs	r3, #1
 8005976:	1b9b      	subs	r3, r3, r6
 8005978:	930a      	str	r3, [sp, #40]	; 0x28
 800597a:	2300      	movs	r3, #0
 800597c:	930d      	str	r3, [sp, #52]	; 0x34
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	db36      	blt.n	80059f2 <_dtoa_r+0x222>
 8005984:	9a02      	ldr	r2, [sp, #8]
 8005986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005988:	4694      	mov	ip, r2
 800598a:	4463      	add	r3, ip
 800598c:	930d      	str	r3, [sp, #52]	; 0x34
 800598e:	2300      	movs	r3, #0
 8005990:	9215      	str	r2, [sp, #84]	; 0x54
 8005992:	930e      	str	r3, [sp, #56]	; 0x38
 8005994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005996:	2401      	movs	r4, #1
 8005998:	2b09      	cmp	r3, #9
 800599a:	d864      	bhi.n	8005a66 <_dtoa_r+0x296>
 800599c:	2b05      	cmp	r3, #5
 800599e:	dd02      	ble.n	80059a6 <_dtoa_r+0x1d6>
 80059a0:	2400      	movs	r4, #0
 80059a2:	3b04      	subs	r3, #4
 80059a4:	9322      	str	r3, [sp, #136]	; 0x88
 80059a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059a8:	1e98      	subs	r0, r3, #2
 80059aa:	2803      	cmp	r0, #3
 80059ac:	d864      	bhi.n	8005a78 <_dtoa_r+0x2a8>
 80059ae:	f7fa fbb3 	bl	8000118 <__gnu_thumb1_case_uqi>
 80059b2:	3829      	.short	0x3829
 80059b4:	5836      	.short	0x5836
 80059b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80059b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80059ba:	189e      	adds	r6, r3, r2
 80059bc:	4b68      	ldr	r3, [pc, #416]	; (8005b60 <_dtoa_r+0x390>)
 80059be:	18f2      	adds	r2, r6, r3
 80059c0:	2a20      	cmp	r2, #32
 80059c2:	dd0f      	ble.n	80059e4 <_dtoa_r+0x214>
 80059c4:	2340      	movs	r3, #64	; 0x40
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	409d      	lsls	r5, r3
 80059ca:	4b66      	ldr	r3, [pc, #408]	; (8005b64 <_dtoa_r+0x394>)
 80059cc:	9802      	ldr	r0, [sp, #8]
 80059ce:	18f3      	adds	r3, r6, r3
 80059d0:	40d8      	lsrs	r0, r3
 80059d2:	4328      	orrs	r0, r5
 80059d4:	f7fc fdb6 	bl	8002544 <__aeabi_ui2d>
 80059d8:	2301      	movs	r3, #1
 80059da:	4c63      	ldr	r4, [pc, #396]	; (8005b68 <_dtoa_r+0x398>)
 80059dc:	3e01      	subs	r6, #1
 80059de:	1909      	adds	r1, r1, r4
 80059e0:	9318      	str	r3, [sp, #96]	; 0x60
 80059e2:	e776      	b.n	80058d2 <_dtoa_r+0x102>
 80059e4:	2320      	movs	r3, #32
 80059e6:	9802      	ldr	r0, [sp, #8]
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	4098      	lsls	r0, r3
 80059ec:	e7f2      	b.n	80059d4 <_dtoa_r+0x204>
 80059ee:	9016      	str	r0, [sp, #88]	; 0x58
 80059f0:	e7b8      	b.n	8005964 <_dtoa_r+0x194>
 80059f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f4:	9a02      	ldr	r2, [sp, #8]
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	930a      	str	r3, [sp, #40]	; 0x28
 80059fa:	4253      	negs	r3, r2
 80059fc:	930e      	str	r3, [sp, #56]	; 0x38
 80059fe:	2300      	movs	r3, #0
 8005a00:	9315      	str	r3, [sp, #84]	; 0x54
 8005a02:	e7c7      	b.n	8005994 <_dtoa_r+0x1c4>
 8005a04:	2300      	movs	r3, #0
 8005a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a0a:	930c      	str	r3, [sp, #48]	; 0x30
 8005a0c:	9307      	str	r3, [sp, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	dc13      	bgt.n	8005a3a <_dtoa_r+0x26a>
 8005a12:	2301      	movs	r3, #1
 8005a14:	001a      	movs	r2, r3
 8005a16:	930c      	str	r3, [sp, #48]	; 0x30
 8005a18:	9307      	str	r3, [sp, #28]
 8005a1a:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a1c:	e00d      	b.n	8005a3a <_dtoa_r+0x26a>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e7f1      	b.n	8005a06 <_dtoa_r+0x236>
 8005a22:	2300      	movs	r3, #0
 8005a24:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a28:	4694      	mov	ip, r2
 8005a2a:	9b02      	ldr	r3, [sp, #8]
 8005a2c:	4463      	add	r3, ip
 8005a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a30:	3301      	adds	r3, #1
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	dc00      	bgt.n	8005a3a <_dtoa_r+0x26a>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a3e:	6042      	str	r2, [r0, #4]
 8005a40:	3204      	adds	r2, #4
 8005a42:	0015      	movs	r5, r2
 8005a44:	3514      	adds	r5, #20
 8005a46:	6841      	ldr	r1, [r0, #4]
 8005a48:	429d      	cmp	r5, r3
 8005a4a:	d919      	bls.n	8005a80 <_dtoa_r+0x2b0>
 8005a4c:	0038      	movs	r0, r7
 8005a4e:	f000 fd01 	bl	8006454 <_Balloc>
 8005a52:	9006      	str	r0, [sp, #24]
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d117      	bne.n	8005a88 <_dtoa_r+0x2b8>
 8005a58:	21d5      	movs	r1, #213	; 0xd5
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	4b43      	ldr	r3, [pc, #268]	; (8005b6c <_dtoa_r+0x39c>)
 8005a5e:	0049      	lsls	r1, r1, #1
 8005a60:	e6cb      	b.n	80057fa <_dtoa_r+0x2a>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7de      	b.n	8005a24 <_dtoa_r+0x254>
 8005a66:	2300      	movs	r3, #0
 8005a68:	940f      	str	r4, [sp, #60]	; 0x3c
 8005a6a:	9322      	str	r3, [sp, #136]	; 0x88
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a70:	9307      	str	r3, [sp, #28]
 8005a72:	2200      	movs	r2, #0
 8005a74:	3313      	adds	r3, #19
 8005a76:	e7d0      	b.n	8005a1a <_dtoa_r+0x24a>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a7c:	3b02      	subs	r3, #2
 8005a7e:	e7f6      	b.n	8005a6e <_dtoa_r+0x29e>
 8005a80:	3101      	adds	r1, #1
 8005a82:	6041      	str	r1, [r0, #4]
 8005a84:	0052      	lsls	r2, r2, #1
 8005a86:	e7dc      	b.n	8005a42 <_dtoa_r+0x272>
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	9a06      	ldr	r2, [sp, #24]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	9b07      	ldr	r3, [sp, #28]
 8005a90:	2b0e      	cmp	r3, #14
 8005a92:	d900      	bls.n	8005a96 <_dtoa_r+0x2c6>
 8005a94:	e0eb      	b.n	8005c6e <_dtoa_r+0x49e>
 8005a96:	2c00      	cmp	r4, #0
 8005a98:	d100      	bne.n	8005a9c <_dtoa_r+0x2cc>
 8005a9a:	e0e8      	b.n	8005c6e <_dtoa_r+0x49e>
 8005a9c:	9b02      	ldr	r3, [sp, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	dd68      	ble.n	8005b74 <_dtoa_r+0x3a4>
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	210f      	movs	r1, #15
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <_dtoa_r+0x38c>)
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	00d2      	lsls	r2, r2, #3
 8005aac:	189b      	adds	r3, r3, r2
 8005aae:	681d      	ldr	r5, [r3, #0]
 8005ab0:	685e      	ldr	r6, [r3, #4]
 8005ab2:	9b02      	ldr	r3, [sp, #8]
 8005ab4:	111c      	asrs	r4, r3, #4
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	9310      	str	r3, [sp, #64]	; 0x40
 8005aba:	9b02      	ldr	r3, [sp, #8]
 8005abc:	05db      	lsls	r3, r3, #23
 8005abe:	d50b      	bpl.n	8005ad8 <_dtoa_r+0x308>
 8005ac0:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <_dtoa_r+0x3a0>)
 8005ac2:	400c      	ands	r4, r1
 8005ac4:	6a1a      	ldr	r2, [r3, #32]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005aca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005acc:	f7fb fab6 	bl	800103c <__aeabi_ddiv>
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	9008      	str	r0, [sp, #32]
 8005ad4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ad6:	9310      	str	r3, [sp, #64]	; 0x40
 8005ad8:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <_dtoa_r+0x3a0>)
 8005ada:	9314      	str	r3, [sp, #80]	; 0x50
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	d108      	bne.n	8005af2 <_dtoa_r+0x322>
 8005ae0:	9808      	ldr	r0, [sp, #32]
 8005ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ae4:	002a      	movs	r2, r5
 8005ae6:	0033      	movs	r3, r6
 8005ae8:	f7fb faa8 	bl	800103c <__aeabi_ddiv>
 8005aec:	9008      	str	r0, [sp, #32]
 8005aee:	9109      	str	r1, [sp, #36]	; 0x24
 8005af0:	e05c      	b.n	8005bac <_dtoa_r+0x3dc>
 8005af2:	2301      	movs	r3, #1
 8005af4:	421c      	tst	r4, r3
 8005af6:	d00b      	beq.n	8005b10 <_dtoa_r+0x340>
 8005af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005afa:	0028      	movs	r0, r5
 8005afc:	3301      	adds	r3, #1
 8005afe:	9310      	str	r3, [sp, #64]	; 0x40
 8005b00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b02:	0031      	movs	r1, r6
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f7fb fe9a 	bl	8001840 <__aeabi_dmul>
 8005b0c:	0005      	movs	r5, r0
 8005b0e:	000e      	movs	r6, r1
 8005b10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b12:	1064      	asrs	r4, r4, #1
 8005b14:	3308      	adds	r3, #8
 8005b16:	e7e0      	b.n	8005ada <_dtoa_r+0x30a>
 8005b18:	08007c29 	.word	0x08007c29
 8005b1c:	08007c40 	.word	0x08007c40
 8005b20:	7ff00000 	.word	0x7ff00000
 8005b24:	0000270f 	.word	0x0000270f
 8005b28:	08007c25 	.word	0x08007c25
 8005b2c:	08007c28 	.word	0x08007c28
 8005b30:	08007bf8 	.word	0x08007bf8
 8005b34:	08007bf9 	.word	0x08007bf9
 8005b38:	3ff00000 	.word	0x3ff00000
 8005b3c:	fffffc01 	.word	0xfffffc01
 8005b40:	3ff80000 	.word	0x3ff80000
 8005b44:	636f4361 	.word	0x636f4361
 8005b48:	3fd287a7 	.word	0x3fd287a7
 8005b4c:	8b60c8b3 	.word	0x8b60c8b3
 8005b50:	3fc68a28 	.word	0x3fc68a28
 8005b54:	509f79fb 	.word	0x509f79fb
 8005b58:	3fd34413 	.word	0x3fd34413
 8005b5c:	08007d30 	.word	0x08007d30
 8005b60:	00000432 	.word	0x00000432
 8005b64:	00000412 	.word	0x00000412
 8005b68:	fe100000 	.word	0xfe100000
 8005b6c:	08007c9b 	.word	0x08007c9b
 8005b70:	08007d08 	.word	0x08007d08
 8005b74:	2302      	movs	r3, #2
 8005b76:	9310      	str	r3, [sp, #64]	; 0x40
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d016      	beq.n	8005bac <_dtoa_r+0x3dc>
 8005b7e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005b80:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005b82:	425c      	negs	r4, r3
 8005b84:	230f      	movs	r3, #15
 8005b86:	4ab6      	ldr	r2, [pc, #728]	; (8005e60 <_dtoa_r+0x690>)
 8005b88:	4023      	ands	r3, r4
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	18d3      	adds	r3, r2, r3
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f7fb fe55 	bl	8001840 <__aeabi_dmul>
 8005b96:	2601      	movs	r6, #1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9008      	str	r0, [sp, #32]
 8005b9c:	9109      	str	r1, [sp, #36]	; 0x24
 8005b9e:	4db1      	ldr	r5, [pc, #708]	; (8005e64 <_dtoa_r+0x694>)
 8005ba0:	1124      	asrs	r4, r4, #4
 8005ba2:	2c00      	cmp	r4, #0
 8005ba4:	d000      	beq.n	8005ba8 <_dtoa_r+0x3d8>
 8005ba6:	e094      	b.n	8005cd2 <_dtoa_r+0x502>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d19f      	bne.n	8005aec <_dtoa_r+0x31c>
 8005bac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d100      	bne.n	8005bb4 <_dtoa_r+0x3e4>
 8005bb2:	e09b      	b.n	8005cec <_dtoa_r+0x51c>
 8005bb4:	9c08      	ldr	r4, [sp, #32]
 8005bb6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bb8:	2200      	movs	r2, #0
 8005bba:	0020      	movs	r0, r4
 8005bbc:	0029      	movs	r1, r5
 8005bbe:	4baa      	ldr	r3, [pc, #680]	; (8005e68 <_dtoa_r+0x698>)
 8005bc0:	f7fa fc4a 	bl	8000458 <__aeabi_dcmplt>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d100      	bne.n	8005bca <_dtoa_r+0x3fa>
 8005bc8:	e090      	b.n	8005cec <_dtoa_r+0x51c>
 8005bca:	9b07      	ldr	r3, [sp, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d100      	bne.n	8005bd2 <_dtoa_r+0x402>
 8005bd0:	e08c      	b.n	8005cec <_dtoa_r+0x51c>
 8005bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dd46      	ble.n	8005c66 <_dtoa_r+0x496>
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	0020      	movs	r0, r4
 8005bde:	0029      	movs	r1, r5
 8005be0:	1e5e      	subs	r6, r3, #1
 8005be2:	4ba2      	ldr	r3, [pc, #648]	; (8005e6c <_dtoa_r+0x69c>)
 8005be4:	f7fb fe2c 	bl	8001840 <__aeabi_dmul>
 8005be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bea:	9008      	str	r0, [sp, #32]
 8005bec:	9109      	str	r1, [sp, #36]	; 0x24
 8005bee:	3301      	adds	r3, #1
 8005bf0:	9310      	str	r3, [sp, #64]	; 0x40
 8005bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005bf6:	9c08      	ldr	r4, [sp, #32]
 8005bf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bfa:	9314      	str	r3, [sp, #80]	; 0x50
 8005bfc:	f7fc fc72 	bl	80024e4 <__aeabi_i2d>
 8005c00:	0022      	movs	r2, r4
 8005c02:	002b      	movs	r3, r5
 8005c04:	f7fb fe1c 	bl	8001840 <__aeabi_dmul>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4b99      	ldr	r3, [pc, #612]	; (8005e70 <_dtoa_r+0x6a0>)
 8005c0c:	f7fa feda 	bl	80009c4 <__aeabi_dadd>
 8005c10:	9010      	str	r0, [sp, #64]	; 0x40
 8005c12:	9111      	str	r1, [sp, #68]	; 0x44
 8005c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c18:	9208      	str	r2, [sp, #32]
 8005c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c1c:	4a95      	ldr	r2, [pc, #596]	; (8005e74 <_dtoa_r+0x6a4>)
 8005c1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c20:	4694      	mov	ip, r2
 8005c22:	4463      	add	r3, ip
 8005c24:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c26:	9309      	str	r3, [sp, #36]	; 0x24
 8005c28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d161      	bne.n	8005cf2 <_dtoa_r+0x522>
 8005c2e:	2200      	movs	r2, #0
 8005c30:	0020      	movs	r0, r4
 8005c32:	0029      	movs	r1, r5
 8005c34:	4b90      	ldr	r3, [pc, #576]	; (8005e78 <_dtoa_r+0x6a8>)
 8005c36:	f7fc f86f 	bl	8001d18 <__aeabi_dsub>
 8005c3a:	9a08      	ldr	r2, [sp, #32]
 8005c3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c3e:	0004      	movs	r4, r0
 8005c40:	000d      	movs	r5, r1
 8005c42:	f7fa fc1d 	bl	8000480 <__aeabi_dcmpgt>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d000      	beq.n	8005c4c <_dtoa_r+0x47c>
 8005c4a:	e2af      	b.n	80061ac <_dtoa_r+0x9dc>
 8005c4c:	488b      	ldr	r0, [pc, #556]	; (8005e7c <_dtoa_r+0x6ac>)
 8005c4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c50:	4684      	mov	ip, r0
 8005c52:	4461      	add	r1, ip
 8005c54:	000b      	movs	r3, r1
 8005c56:	0020      	movs	r0, r4
 8005c58:	0029      	movs	r1, r5
 8005c5a:	9a08      	ldr	r2, [sp, #32]
 8005c5c:	f7fa fbfc 	bl	8000458 <__aeabi_dcmplt>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d000      	beq.n	8005c66 <_dtoa_r+0x496>
 8005c64:	e29f      	b.n	80061a6 <_dtoa_r+0x9d6>
 8005c66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005c6a:	9308      	str	r3, [sp, #32]
 8005c6c:	9409      	str	r4, [sp, #36]	; 0x24
 8005c6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	da00      	bge.n	8005c76 <_dtoa_r+0x4a6>
 8005c74:	e172      	b.n	8005f5c <_dtoa_r+0x78c>
 8005c76:	9a02      	ldr	r2, [sp, #8]
 8005c78:	2a0e      	cmp	r2, #14
 8005c7a:	dd00      	ble.n	8005c7e <_dtoa_r+0x4ae>
 8005c7c:	e16e      	b.n	8005f5c <_dtoa_r+0x78c>
 8005c7e:	4b78      	ldr	r3, [pc, #480]	; (8005e60 <_dtoa_r+0x690>)
 8005c80:	00d2      	lsls	r2, r2, #3
 8005c82:	189b      	adds	r3, r3, r2
 8005c84:	685c      	ldr	r4, [r3, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	930a      	str	r3, [sp, #40]	; 0x28
 8005c8a:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	db00      	blt.n	8005c94 <_dtoa_r+0x4c4>
 8005c92:	e0f7      	b.n	8005e84 <_dtoa_r+0x6b4>
 8005c94:	9b07      	ldr	r3, [sp, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dd00      	ble.n	8005c9c <_dtoa_r+0x4cc>
 8005c9a:	e0f3      	b.n	8005e84 <_dtoa_r+0x6b4>
 8005c9c:	d000      	beq.n	8005ca0 <_dtoa_r+0x4d0>
 8005c9e:	e282      	b.n	80061a6 <_dtoa_r+0x9d6>
 8005ca0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4b74      	ldr	r3, [pc, #464]	; (8005e78 <_dtoa_r+0x6a8>)
 8005ca8:	f7fb fdca 	bl	8001840 <__aeabi_dmul>
 8005cac:	9a08      	ldr	r2, [sp, #32]
 8005cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb0:	f7fa fbf0 	bl	8000494 <__aeabi_dcmpge>
 8005cb4:	9e07      	ldr	r6, [sp, #28]
 8005cb6:	0035      	movs	r5, r6
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d000      	beq.n	8005cbe <_dtoa_r+0x4ee>
 8005cbc:	e259      	b.n	8006172 <_dtoa_r+0x9a2>
 8005cbe:	9b06      	ldr	r3, [sp, #24]
 8005cc0:	9a06      	ldr	r2, [sp, #24]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	9308      	str	r3, [sp, #32]
 8005cc6:	2331      	movs	r3, #49	; 0x31
 8005cc8:	7013      	strb	r3, [r2, #0]
 8005cca:	9b02      	ldr	r3, [sp, #8]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	9302      	str	r3, [sp, #8]
 8005cd0:	e254      	b.n	800617c <_dtoa_r+0x9ac>
 8005cd2:	4234      	tst	r4, r6
 8005cd4:	d007      	beq.n	8005ce6 <_dtoa_r+0x516>
 8005cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cd8:	3301      	adds	r3, #1
 8005cda:	9310      	str	r3, [sp, #64]	; 0x40
 8005cdc:	682a      	ldr	r2, [r5, #0]
 8005cde:	686b      	ldr	r3, [r5, #4]
 8005ce0:	f7fb fdae 	bl	8001840 <__aeabi_dmul>
 8005ce4:	0033      	movs	r3, r6
 8005ce6:	1064      	asrs	r4, r4, #1
 8005ce8:	3508      	adds	r5, #8
 8005cea:	e75a      	b.n	8005ba2 <_dtoa_r+0x3d2>
 8005cec:	9e02      	ldr	r6, [sp, #8]
 8005cee:	9b07      	ldr	r3, [sp, #28]
 8005cf0:	e780      	b.n	8005bf4 <_dtoa_r+0x424>
 8005cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cf6:	1e5a      	subs	r2, r3, #1
 8005cf8:	4b59      	ldr	r3, [pc, #356]	; (8005e60 <_dtoa_r+0x690>)
 8005cfa:	00d2      	lsls	r2, r2, #3
 8005cfc:	189b      	adds	r3, r3, r2
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2900      	cmp	r1, #0
 8005d04:	d051      	beq.n	8005daa <_dtoa_r+0x5da>
 8005d06:	2000      	movs	r0, #0
 8005d08:	495d      	ldr	r1, [pc, #372]	; (8005e80 <_dtoa_r+0x6b0>)
 8005d0a:	f7fb f997 	bl	800103c <__aeabi_ddiv>
 8005d0e:	9a08      	ldr	r2, [sp, #32]
 8005d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d12:	f7fc f801 	bl	8001d18 <__aeabi_dsub>
 8005d16:	9a06      	ldr	r2, [sp, #24]
 8005d18:	9b06      	ldr	r3, [sp, #24]
 8005d1a:	4694      	mov	ip, r2
 8005d1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d20:	9010      	str	r0, [sp, #64]	; 0x40
 8005d22:	9111      	str	r1, [sp, #68]	; 0x44
 8005d24:	4463      	add	r3, ip
 8005d26:	9319      	str	r3, [sp, #100]	; 0x64
 8005d28:	0029      	movs	r1, r5
 8005d2a:	0020      	movs	r0, r4
 8005d2c:	f7fc fba4 	bl	8002478 <__aeabi_d2iz>
 8005d30:	9014      	str	r0, [sp, #80]	; 0x50
 8005d32:	f7fc fbd7 	bl	80024e4 <__aeabi_i2d>
 8005d36:	0002      	movs	r2, r0
 8005d38:	000b      	movs	r3, r1
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	0029      	movs	r1, r5
 8005d3e:	f7fb ffeb 	bl	8001d18 <__aeabi_dsub>
 8005d42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d46:	3301      	adds	r3, #1
 8005d48:	9308      	str	r3, [sp, #32]
 8005d4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d4c:	0004      	movs	r4, r0
 8005d4e:	3330      	adds	r3, #48	; 0x30
 8005d50:	7013      	strb	r3, [r2, #0]
 8005d52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d56:	000d      	movs	r5, r1
 8005d58:	f7fa fb7e 	bl	8000458 <__aeabi_dcmplt>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d175      	bne.n	8005e4c <_dtoa_r+0x67c>
 8005d60:	0022      	movs	r2, r4
 8005d62:	002b      	movs	r3, r5
 8005d64:	2000      	movs	r0, #0
 8005d66:	4940      	ldr	r1, [pc, #256]	; (8005e68 <_dtoa_r+0x698>)
 8005d68:	f7fb ffd6 	bl	8001d18 <__aeabi_dsub>
 8005d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d70:	f7fa fb72 	bl	8000458 <__aeabi_dcmplt>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d000      	beq.n	8005d7a <_dtoa_r+0x5aa>
 8005d78:	e0d2      	b.n	8005f20 <_dtoa_r+0x750>
 8005d7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d7c:	9a08      	ldr	r2, [sp, #32]
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d100      	bne.n	8005d84 <_dtoa_r+0x5b4>
 8005d82:	e770      	b.n	8005c66 <_dtoa_r+0x496>
 8005d84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005d86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4b38      	ldr	r3, [pc, #224]	; (8005e6c <_dtoa_r+0x69c>)
 8005d8c:	f7fb fd58 	bl	8001840 <__aeabi_dmul>
 8005d90:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <_dtoa_r+0x69c>)
 8005d92:	9010      	str	r0, [sp, #64]	; 0x40
 8005d94:	9111      	str	r1, [sp, #68]	; 0x44
 8005d96:	2200      	movs	r2, #0
 8005d98:	0020      	movs	r0, r4
 8005d9a:	0029      	movs	r1, r5
 8005d9c:	f7fb fd50 	bl	8001840 <__aeabi_dmul>
 8005da0:	9b08      	ldr	r3, [sp, #32]
 8005da2:	0004      	movs	r4, r0
 8005da4:	000d      	movs	r5, r1
 8005da6:	9317      	str	r3, [sp, #92]	; 0x5c
 8005da8:	e7be      	b.n	8005d28 <_dtoa_r+0x558>
 8005daa:	9808      	ldr	r0, [sp, #32]
 8005dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dae:	f7fb fd47 	bl	8001840 <__aeabi_dmul>
 8005db2:	9a06      	ldr	r2, [sp, #24]
 8005db4:	9b06      	ldr	r3, [sp, #24]
 8005db6:	4694      	mov	ip, r2
 8005db8:	9308      	str	r3, [sp, #32]
 8005dba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dbc:	9010      	str	r0, [sp, #64]	; 0x40
 8005dbe:	9111      	str	r1, [sp, #68]	; 0x44
 8005dc0:	4463      	add	r3, ip
 8005dc2:	9319      	str	r3, [sp, #100]	; 0x64
 8005dc4:	0029      	movs	r1, r5
 8005dc6:	0020      	movs	r0, r4
 8005dc8:	f7fc fb56 	bl	8002478 <__aeabi_d2iz>
 8005dcc:	9017      	str	r0, [sp, #92]	; 0x5c
 8005dce:	f7fc fb89 	bl	80024e4 <__aeabi_i2d>
 8005dd2:	0002      	movs	r2, r0
 8005dd4:	000b      	movs	r3, r1
 8005dd6:	0020      	movs	r0, r4
 8005dd8:	0029      	movs	r1, r5
 8005dda:	f7fb ff9d 	bl	8001d18 <__aeabi_dsub>
 8005dde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005de0:	9a08      	ldr	r2, [sp, #32]
 8005de2:	3330      	adds	r3, #48	; 0x30
 8005de4:	7013      	strb	r3, [r2, #0]
 8005de6:	0013      	movs	r3, r2
 8005de8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005dea:	3301      	adds	r3, #1
 8005dec:	0004      	movs	r4, r0
 8005dee:	000d      	movs	r5, r1
 8005df0:	9308      	str	r3, [sp, #32]
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d12c      	bne.n	8005e50 <_dtoa_r+0x680>
 8005df6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005df8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005dfa:	9a06      	ldr	r2, [sp, #24]
 8005dfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dfe:	4694      	mov	ip, r2
 8005e00:	4463      	add	r3, ip
 8005e02:	2200      	movs	r2, #0
 8005e04:	9308      	str	r3, [sp, #32]
 8005e06:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <_dtoa_r+0x6b0>)
 8005e08:	f7fa fddc 	bl	80009c4 <__aeabi_dadd>
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	000b      	movs	r3, r1
 8005e10:	0020      	movs	r0, r4
 8005e12:	0029      	movs	r1, r5
 8005e14:	f7fa fb34 	bl	8000480 <__aeabi_dcmpgt>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d000      	beq.n	8005e1e <_dtoa_r+0x64e>
 8005e1c:	e080      	b.n	8005f20 <_dtoa_r+0x750>
 8005e1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e22:	2000      	movs	r0, #0
 8005e24:	4916      	ldr	r1, [pc, #88]	; (8005e80 <_dtoa_r+0x6b0>)
 8005e26:	f7fb ff77 	bl	8001d18 <__aeabi_dsub>
 8005e2a:	0002      	movs	r2, r0
 8005e2c:	000b      	movs	r3, r1
 8005e2e:	0020      	movs	r0, r4
 8005e30:	0029      	movs	r1, r5
 8005e32:	f7fa fb11 	bl	8000458 <__aeabi_dcmplt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d100      	bne.n	8005e3c <_dtoa_r+0x66c>
 8005e3a:	e714      	b.n	8005c66 <_dtoa_r+0x496>
 8005e3c:	9b08      	ldr	r3, [sp, #32]
 8005e3e:	001a      	movs	r2, r3
 8005e40:	3a01      	subs	r2, #1
 8005e42:	9208      	str	r2, [sp, #32]
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	2a30      	cmp	r2, #48	; 0x30
 8005e48:	d0f8      	beq.n	8005e3c <_dtoa_r+0x66c>
 8005e4a:	9308      	str	r3, [sp, #32]
 8005e4c:	9602      	str	r6, [sp, #8]
 8005e4e:	e055      	b.n	8005efc <_dtoa_r+0x72c>
 8005e50:	2200      	movs	r2, #0
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <_dtoa_r+0x69c>)
 8005e54:	f7fb fcf4 	bl	8001840 <__aeabi_dmul>
 8005e58:	0004      	movs	r4, r0
 8005e5a:	000d      	movs	r5, r1
 8005e5c:	e7b2      	b.n	8005dc4 <_dtoa_r+0x5f4>
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	08007d30 	.word	0x08007d30
 8005e64:	08007d08 	.word	0x08007d08
 8005e68:	3ff00000 	.word	0x3ff00000
 8005e6c:	40240000 	.word	0x40240000
 8005e70:	401c0000 	.word	0x401c0000
 8005e74:	fcc00000 	.word	0xfcc00000
 8005e78:	40140000 	.word	0x40140000
 8005e7c:	7cc00000 	.word	0x7cc00000
 8005e80:	3fe00000 	.word	0x3fe00000
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	9e06      	ldr	r6, [sp, #24]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	199b      	adds	r3, r3, r6
 8005e8c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e8e:	9c08      	ldr	r4, [sp, #32]
 8005e90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e96:	0020      	movs	r0, r4
 8005e98:	0029      	movs	r1, r5
 8005e9a:	f7fb f8cf 	bl	800103c <__aeabi_ddiv>
 8005e9e:	f7fc faeb 	bl	8002478 <__aeabi_d2iz>
 8005ea2:	9007      	str	r0, [sp, #28]
 8005ea4:	f7fc fb1e 	bl	80024e4 <__aeabi_i2d>
 8005ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eac:	f7fb fcc8 	bl	8001840 <__aeabi_dmul>
 8005eb0:	0002      	movs	r2, r0
 8005eb2:	000b      	movs	r3, r1
 8005eb4:	0020      	movs	r0, r4
 8005eb6:	0029      	movs	r1, r5
 8005eb8:	f7fb ff2e 	bl	8001d18 <__aeabi_dsub>
 8005ebc:	0033      	movs	r3, r6
 8005ebe:	9a07      	ldr	r2, [sp, #28]
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	3230      	adds	r2, #48	; 0x30
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ec8:	9608      	str	r6, [sp, #32]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d139      	bne.n	8005f42 <_dtoa_r+0x772>
 8005ece:	0002      	movs	r2, r0
 8005ed0:	000b      	movs	r3, r1
 8005ed2:	f7fa fd77 	bl	80009c4 <__aeabi_dadd>
 8005ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eda:	0004      	movs	r4, r0
 8005edc:	000d      	movs	r5, r1
 8005ede:	f7fa facf 	bl	8000480 <__aeabi_dcmpgt>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d11b      	bne.n	8005f1e <_dtoa_r+0x74e>
 8005ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eea:	0020      	movs	r0, r4
 8005eec:	0029      	movs	r1, r5
 8005eee:	f7fa faad 	bl	800044c <__aeabi_dcmpeq>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d002      	beq.n	8005efc <_dtoa_r+0x72c>
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	07db      	lsls	r3, r3, #31
 8005efa:	d410      	bmi.n	8005f1e <_dtoa_r+0x74e>
 8005efc:	0038      	movs	r0, r7
 8005efe:	9905      	ldr	r1, [sp, #20]
 8005f00:	f000 faec 	bl	80064dc <_Bfree>
 8005f04:	2300      	movs	r3, #0
 8005f06:	9a08      	ldr	r2, [sp, #32]
 8005f08:	9802      	ldr	r0, [sp, #8]
 8005f0a:	7013      	strb	r3, [r2, #0]
 8005f0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005f0e:	3001      	adds	r0, #1
 8005f10:	6018      	str	r0, [r3, #0]
 8005f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d100      	bne.n	8005f1a <_dtoa_r+0x74a>
 8005f18:	e4a6      	b.n	8005868 <_dtoa_r+0x98>
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	e4a4      	b.n	8005868 <_dtoa_r+0x98>
 8005f1e:	9e02      	ldr	r6, [sp, #8]
 8005f20:	9b08      	ldr	r3, [sp, #32]
 8005f22:	9308      	str	r3, [sp, #32]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	781a      	ldrb	r2, [r3, #0]
 8005f28:	2a39      	cmp	r2, #57	; 0x39
 8005f2a:	d106      	bne.n	8005f3a <_dtoa_r+0x76a>
 8005f2c:	9a06      	ldr	r2, [sp, #24]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d1f7      	bne.n	8005f22 <_dtoa_r+0x752>
 8005f32:	2230      	movs	r2, #48	; 0x30
 8005f34:	9906      	ldr	r1, [sp, #24]
 8005f36:	3601      	adds	r6, #1
 8005f38:	700a      	strb	r2, [r1, #0]
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	3201      	adds	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e784      	b.n	8005e4c <_dtoa_r+0x67c>
 8005f42:	2200      	movs	r2, #0
 8005f44:	4baa      	ldr	r3, [pc, #680]	; (80061f0 <_dtoa_r+0xa20>)
 8005f46:	f7fb fc7b 	bl	8001840 <__aeabi_dmul>
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	0004      	movs	r4, r0
 8005f50:	000d      	movs	r5, r1
 8005f52:	f7fa fa7b 	bl	800044c <__aeabi_dcmpeq>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d09b      	beq.n	8005e92 <_dtoa_r+0x6c2>
 8005f5a:	e7cf      	b.n	8005efc <_dtoa_r+0x72c>
 8005f5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005f60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	d012      	beq.n	8005f8c <_dtoa_r+0x7bc>
 8005f66:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f68:	2a01      	cmp	r2, #1
 8005f6a:	dc66      	bgt.n	800603a <_dtoa_r+0x86a>
 8005f6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	d05d      	beq.n	800602e <_dtoa_r+0x85e>
 8005f72:	4aa0      	ldr	r2, [pc, #640]	; (80061f4 <_dtoa_r+0xa24>)
 8005f74:	189b      	adds	r3, r3, r2
 8005f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f78:	2101      	movs	r1, #1
 8005f7a:	18d2      	adds	r2, r2, r3
 8005f7c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f80:	0038      	movs	r0, r7
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	930d      	str	r3, [sp, #52]	; 0x34
 8005f86:	f000 fb59 	bl	800663c <__i2b>
 8005f8a:	0005      	movs	r5, r0
 8005f8c:	2c00      	cmp	r4, #0
 8005f8e:	dd0e      	ble.n	8005fae <_dtoa_r+0x7de>
 8005f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	dd0b      	ble.n	8005fae <_dtoa_r+0x7de>
 8005f96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f98:	0023      	movs	r3, r4
 8005f9a:	4294      	cmp	r4, r2
 8005f9c:	dd00      	ble.n	8005fa0 <_dtoa_r+0x7d0>
 8005f9e:	0013      	movs	r3, r2
 8005fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fa2:	1ae4      	subs	r4, r4, r3
 8005fa4:	1ad2      	subs	r2, r2, r3
 8005fa6:	920a      	str	r2, [sp, #40]	; 0x28
 8005fa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	930d      	str	r3, [sp, #52]	; 0x34
 8005fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01f      	beq.n	8005ff4 <_dtoa_r+0x824>
 8005fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d054      	beq.n	8006064 <_dtoa_r+0x894>
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	dd11      	ble.n	8005fe2 <_dtoa_r+0x812>
 8005fbe:	0029      	movs	r1, r5
 8005fc0:	0032      	movs	r2, r6
 8005fc2:	0038      	movs	r0, r7
 8005fc4:	f000 fc00 	bl	80067c8 <__pow5mult>
 8005fc8:	9a05      	ldr	r2, [sp, #20]
 8005fca:	0001      	movs	r1, r0
 8005fcc:	0005      	movs	r5, r0
 8005fce:	0038      	movs	r0, r7
 8005fd0:	f000 fb4a 	bl	8006668 <__multiply>
 8005fd4:	9905      	ldr	r1, [sp, #20]
 8005fd6:	9014      	str	r0, [sp, #80]	; 0x50
 8005fd8:	0038      	movs	r0, r7
 8005fda:	f000 fa7f 	bl	80064dc <_Bfree>
 8005fde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fe0:	9305      	str	r3, [sp, #20]
 8005fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fe4:	1b9a      	subs	r2, r3, r6
 8005fe6:	42b3      	cmp	r3, r6
 8005fe8:	d004      	beq.n	8005ff4 <_dtoa_r+0x824>
 8005fea:	0038      	movs	r0, r7
 8005fec:	9905      	ldr	r1, [sp, #20]
 8005fee:	f000 fbeb 	bl	80067c8 <__pow5mult>
 8005ff2:	9005      	str	r0, [sp, #20]
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	0038      	movs	r0, r7
 8005ff8:	f000 fb20 	bl	800663c <__i2b>
 8005ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ffe:	0006      	movs	r6, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	dd31      	ble.n	8006068 <_dtoa_r+0x898>
 8006004:	001a      	movs	r2, r3
 8006006:	0001      	movs	r1, r0
 8006008:	0038      	movs	r0, r7
 800600a:	f000 fbdd 	bl	80067c8 <__pow5mult>
 800600e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006010:	0006      	movs	r6, r0
 8006012:	2b01      	cmp	r3, #1
 8006014:	dd2d      	ble.n	8006072 <_dtoa_r+0x8a2>
 8006016:	2300      	movs	r3, #0
 8006018:	930e      	str	r3, [sp, #56]	; 0x38
 800601a:	6933      	ldr	r3, [r6, #16]
 800601c:	3303      	adds	r3, #3
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	18f3      	adds	r3, r6, r3
 8006022:	6858      	ldr	r0, [r3, #4]
 8006024:	f000 fac2 	bl	80065ac <__hi0bits>
 8006028:	2320      	movs	r3, #32
 800602a:	1a18      	subs	r0, r3, r0
 800602c:	e039      	b.n	80060a2 <_dtoa_r+0x8d2>
 800602e:	2336      	movs	r3, #54	; 0x36
 8006030:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006032:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006034:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	e79d      	b.n	8005f76 <_dtoa_r+0x7a6>
 800603a:	9b07      	ldr	r3, [sp, #28]
 800603c:	1e5e      	subs	r6, r3, #1
 800603e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006040:	42b3      	cmp	r3, r6
 8006042:	db07      	blt.n	8006054 <_dtoa_r+0x884>
 8006044:	1b9e      	subs	r6, r3, r6
 8006046:	9b07      	ldr	r3, [sp, #28]
 8006048:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	da93      	bge.n	8005f76 <_dtoa_r+0x7a6>
 800604e:	1ae4      	subs	r4, r4, r3
 8006050:	2300      	movs	r3, #0
 8006052:	e790      	b.n	8005f76 <_dtoa_r+0x7a6>
 8006054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006056:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006058:	1af3      	subs	r3, r6, r3
 800605a:	18d3      	adds	r3, r2, r3
 800605c:	960e      	str	r6, [sp, #56]	; 0x38
 800605e:	9315      	str	r3, [sp, #84]	; 0x54
 8006060:	2600      	movs	r6, #0
 8006062:	e7f0      	b.n	8006046 <_dtoa_r+0x876>
 8006064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006066:	e7c0      	b.n	8005fea <_dtoa_r+0x81a>
 8006068:	2300      	movs	r3, #0
 800606a:	930e      	str	r3, [sp, #56]	; 0x38
 800606c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800606e:	2b01      	cmp	r3, #1
 8006070:	dc13      	bgt.n	800609a <_dtoa_r+0x8ca>
 8006072:	2300      	movs	r3, #0
 8006074:	930e      	str	r3, [sp, #56]	; 0x38
 8006076:	9b08      	ldr	r3, [sp, #32]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10e      	bne.n	800609a <_dtoa_r+0x8ca>
 800607c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800607e:	031b      	lsls	r3, r3, #12
 8006080:	d10b      	bne.n	800609a <_dtoa_r+0x8ca>
 8006082:	4b5d      	ldr	r3, [pc, #372]	; (80061f8 <_dtoa_r+0xa28>)
 8006084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006086:	4213      	tst	r3, r2
 8006088:	d007      	beq.n	800609a <_dtoa_r+0x8ca>
 800608a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608c:	3301      	adds	r3, #1
 800608e:	930a      	str	r3, [sp, #40]	; 0x28
 8006090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006092:	3301      	adds	r3, #1
 8006094:	930d      	str	r3, [sp, #52]	; 0x34
 8006096:	2301      	movs	r3, #1
 8006098:	930e      	str	r3, [sp, #56]	; 0x38
 800609a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800609c:	2001      	movs	r0, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1bb      	bne.n	800601a <_dtoa_r+0x84a>
 80060a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060a4:	221f      	movs	r2, #31
 80060a6:	1818      	adds	r0, r3, r0
 80060a8:	0003      	movs	r3, r0
 80060aa:	4013      	ands	r3, r2
 80060ac:	4210      	tst	r0, r2
 80060ae:	d046      	beq.n	800613e <_dtoa_r+0x96e>
 80060b0:	3201      	adds	r2, #1
 80060b2:	1ad2      	subs	r2, r2, r3
 80060b4:	2a04      	cmp	r2, #4
 80060b6:	dd3f      	ble.n	8006138 <_dtoa_r+0x968>
 80060b8:	221c      	movs	r2, #28
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060be:	18e4      	adds	r4, r4, r3
 80060c0:	18d2      	adds	r2, r2, r3
 80060c2:	920a      	str	r2, [sp, #40]	; 0x28
 80060c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060c6:	18d3      	adds	r3, r2, r3
 80060c8:	930d      	str	r3, [sp, #52]	; 0x34
 80060ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dd05      	ble.n	80060dc <_dtoa_r+0x90c>
 80060d0:	001a      	movs	r2, r3
 80060d2:	0038      	movs	r0, r7
 80060d4:	9905      	ldr	r1, [sp, #20]
 80060d6:	f000 fbd3 	bl	8006880 <__lshift>
 80060da:	9005      	str	r0, [sp, #20]
 80060dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd05      	ble.n	80060ee <_dtoa_r+0x91e>
 80060e2:	0031      	movs	r1, r6
 80060e4:	001a      	movs	r2, r3
 80060e6:	0038      	movs	r0, r7
 80060e8:	f000 fbca 	bl	8006880 <__lshift>
 80060ec:	0006      	movs	r6, r0
 80060ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d026      	beq.n	8006142 <_dtoa_r+0x972>
 80060f4:	0031      	movs	r1, r6
 80060f6:	9805      	ldr	r0, [sp, #20]
 80060f8:	f000 fc30 	bl	800695c <__mcmp>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	da20      	bge.n	8006142 <_dtoa_r+0x972>
 8006100:	9b02      	ldr	r3, [sp, #8]
 8006102:	220a      	movs	r2, #10
 8006104:	3b01      	subs	r3, #1
 8006106:	9302      	str	r3, [sp, #8]
 8006108:	0038      	movs	r0, r7
 800610a:	2300      	movs	r3, #0
 800610c:	9905      	ldr	r1, [sp, #20]
 800610e:	f000 fa09 	bl	8006524 <__multadd>
 8006112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006114:	9005      	str	r0, [sp, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d100      	bne.n	800611c <_dtoa_r+0x94c>
 800611a:	e166      	b.n	80063ea <_dtoa_r+0xc1a>
 800611c:	2300      	movs	r3, #0
 800611e:	0029      	movs	r1, r5
 8006120:	220a      	movs	r2, #10
 8006122:	0038      	movs	r0, r7
 8006124:	f000 f9fe 	bl	8006524 <__multadd>
 8006128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800612a:	0005      	movs	r5, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	dc47      	bgt.n	80061c0 <_dtoa_r+0x9f0>
 8006130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006132:	2b02      	cmp	r3, #2
 8006134:	dc0d      	bgt.n	8006152 <_dtoa_r+0x982>
 8006136:	e043      	b.n	80061c0 <_dtoa_r+0x9f0>
 8006138:	2a04      	cmp	r2, #4
 800613a:	d0c6      	beq.n	80060ca <_dtoa_r+0x8fa>
 800613c:	0013      	movs	r3, r2
 800613e:	331c      	adds	r3, #28
 8006140:	e7bc      	b.n	80060bc <_dtoa_r+0x8ec>
 8006142:	9b07      	ldr	r3, [sp, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dc35      	bgt.n	80061b4 <_dtoa_r+0x9e4>
 8006148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800614a:	2b02      	cmp	r3, #2
 800614c:	dd32      	ble.n	80061b4 <_dtoa_r+0x9e4>
 800614e:	9b07      	ldr	r3, [sp, #28]
 8006150:	930c      	str	r3, [sp, #48]	; 0x30
 8006152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10c      	bne.n	8006172 <_dtoa_r+0x9a2>
 8006158:	0031      	movs	r1, r6
 800615a:	2205      	movs	r2, #5
 800615c:	0038      	movs	r0, r7
 800615e:	f000 f9e1 	bl	8006524 <__multadd>
 8006162:	0006      	movs	r6, r0
 8006164:	0001      	movs	r1, r0
 8006166:	9805      	ldr	r0, [sp, #20]
 8006168:	f000 fbf8 	bl	800695c <__mcmp>
 800616c:	2800      	cmp	r0, #0
 800616e:	dd00      	ble.n	8006172 <_dtoa_r+0x9a2>
 8006170:	e5a5      	b.n	8005cbe <_dtoa_r+0x4ee>
 8006172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006174:	43db      	mvns	r3, r3
 8006176:	9302      	str	r3, [sp, #8]
 8006178:	9b06      	ldr	r3, [sp, #24]
 800617a:	9308      	str	r3, [sp, #32]
 800617c:	2400      	movs	r4, #0
 800617e:	0031      	movs	r1, r6
 8006180:	0038      	movs	r0, r7
 8006182:	f000 f9ab 	bl	80064dc <_Bfree>
 8006186:	2d00      	cmp	r5, #0
 8006188:	d100      	bne.n	800618c <_dtoa_r+0x9bc>
 800618a:	e6b7      	b.n	8005efc <_dtoa_r+0x72c>
 800618c:	2c00      	cmp	r4, #0
 800618e:	d005      	beq.n	800619c <_dtoa_r+0x9cc>
 8006190:	42ac      	cmp	r4, r5
 8006192:	d003      	beq.n	800619c <_dtoa_r+0x9cc>
 8006194:	0021      	movs	r1, r4
 8006196:	0038      	movs	r0, r7
 8006198:	f000 f9a0 	bl	80064dc <_Bfree>
 800619c:	0029      	movs	r1, r5
 800619e:	0038      	movs	r0, r7
 80061a0:	f000 f99c 	bl	80064dc <_Bfree>
 80061a4:	e6aa      	b.n	8005efc <_dtoa_r+0x72c>
 80061a6:	2600      	movs	r6, #0
 80061a8:	0035      	movs	r5, r6
 80061aa:	e7e2      	b.n	8006172 <_dtoa_r+0x9a2>
 80061ac:	9602      	str	r6, [sp, #8]
 80061ae:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80061b0:	0035      	movs	r5, r6
 80061b2:	e584      	b.n	8005cbe <_dtoa_r+0x4ee>
 80061b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d100      	bne.n	80061bc <_dtoa_r+0x9ec>
 80061ba:	e0ce      	b.n	800635a <_dtoa_r+0xb8a>
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	930c      	str	r3, [sp, #48]	; 0x30
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	dd05      	ble.n	80061d0 <_dtoa_r+0xa00>
 80061c4:	0029      	movs	r1, r5
 80061c6:	0022      	movs	r2, r4
 80061c8:	0038      	movs	r0, r7
 80061ca:	f000 fb59 	bl	8006880 <__lshift>
 80061ce:	0005      	movs	r5, r0
 80061d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061d2:	0028      	movs	r0, r5
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d022      	beq.n	800621e <_dtoa_r+0xa4e>
 80061d8:	0038      	movs	r0, r7
 80061da:	6869      	ldr	r1, [r5, #4]
 80061dc:	f000 f93a 	bl	8006454 <_Balloc>
 80061e0:	1e04      	subs	r4, r0, #0
 80061e2:	d10f      	bne.n	8006204 <_dtoa_r+0xa34>
 80061e4:	0002      	movs	r2, r0
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <_dtoa_r+0xa2c>)
 80061e8:	4905      	ldr	r1, [pc, #20]	; (8006200 <_dtoa_r+0xa30>)
 80061ea:	f7ff fb06 	bl	80057fa <_dtoa_r+0x2a>
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	40240000 	.word	0x40240000
 80061f4:	00000433 	.word	0x00000433
 80061f8:	7ff00000 	.word	0x7ff00000
 80061fc:	08007c9b 	.word	0x08007c9b
 8006200:	000002ea 	.word	0x000002ea
 8006204:	0029      	movs	r1, r5
 8006206:	692b      	ldr	r3, [r5, #16]
 8006208:	310c      	adds	r1, #12
 800620a:	1c9a      	adds	r2, r3, #2
 800620c:	0092      	lsls	r2, r2, #2
 800620e:	300c      	adds	r0, #12
 8006210:	f000 f907 	bl	8006422 <memcpy>
 8006214:	2201      	movs	r2, #1
 8006216:	0021      	movs	r1, r4
 8006218:	0038      	movs	r0, r7
 800621a:	f000 fb31 	bl	8006880 <__lshift>
 800621e:	9b06      	ldr	r3, [sp, #24]
 8006220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006222:	930a      	str	r3, [sp, #40]	; 0x28
 8006224:	3b01      	subs	r3, #1
 8006226:	189b      	adds	r3, r3, r2
 8006228:	2201      	movs	r2, #1
 800622a:	002c      	movs	r4, r5
 800622c:	0005      	movs	r5, r0
 800622e:	9314      	str	r3, [sp, #80]	; 0x50
 8006230:	9b08      	ldr	r3, [sp, #32]
 8006232:	4013      	ands	r3, r2
 8006234:	930f      	str	r3, [sp, #60]	; 0x3c
 8006236:	0031      	movs	r1, r6
 8006238:	9805      	ldr	r0, [sp, #20]
 800623a:	f7ff fa3d 	bl	80056b8 <quorem>
 800623e:	0003      	movs	r3, r0
 8006240:	0021      	movs	r1, r4
 8006242:	3330      	adds	r3, #48	; 0x30
 8006244:	900d      	str	r0, [sp, #52]	; 0x34
 8006246:	9805      	ldr	r0, [sp, #20]
 8006248:	9307      	str	r3, [sp, #28]
 800624a:	f000 fb87 	bl	800695c <__mcmp>
 800624e:	002a      	movs	r2, r5
 8006250:	900e      	str	r0, [sp, #56]	; 0x38
 8006252:	0031      	movs	r1, r6
 8006254:	0038      	movs	r0, r7
 8006256:	f000 fb9d 	bl	8006994 <__mdiff>
 800625a:	68c3      	ldr	r3, [r0, #12]
 800625c:	9008      	str	r0, [sp, #32]
 800625e:	9310      	str	r3, [sp, #64]	; 0x40
 8006260:	2301      	movs	r3, #1
 8006262:	930c      	str	r3, [sp, #48]	; 0x30
 8006264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <_dtoa_r+0xaa4>
 800626a:	0001      	movs	r1, r0
 800626c:	9805      	ldr	r0, [sp, #20]
 800626e:	f000 fb75 	bl	800695c <__mcmp>
 8006272:	900c      	str	r0, [sp, #48]	; 0x30
 8006274:	0038      	movs	r0, r7
 8006276:	9908      	ldr	r1, [sp, #32]
 8006278:	f000 f930 	bl	80064dc <_Bfree>
 800627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006280:	3301      	adds	r3, #1
 8006282:	9308      	str	r3, [sp, #32]
 8006284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006286:	4313      	orrs	r3, r2
 8006288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800628a:	4313      	orrs	r3, r2
 800628c:	d10c      	bne.n	80062a8 <_dtoa_r+0xad8>
 800628e:	9b07      	ldr	r3, [sp, #28]
 8006290:	2b39      	cmp	r3, #57	; 0x39
 8006292:	d026      	beq.n	80062e2 <_dtoa_r+0xb12>
 8006294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006296:	2b00      	cmp	r3, #0
 8006298:	dd02      	ble.n	80062a0 <_dtoa_r+0xad0>
 800629a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800629c:	3331      	adds	r3, #49	; 0x31
 800629e:	9307      	str	r3, [sp, #28]
 80062a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a2:	9a07      	ldr	r2, [sp, #28]
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	e76a      	b.n	800617e <_dtoa_r+0x9ae>
 80062a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	db04      	blt.n	80062b8 <_dtoa_r+0xae8>
 80062ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062b0:	4313      	orrs	r3, r2
 80062b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062b4:	4313      	orrs	r3, r2
 80062b6:	d11f      	bne.n	80062f8 <_dtoa_r+0xb28>
 80062b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	ddf0      	ble.n	80062a0 <_dtoa_r+0xad0>
 80062be:	9905      	ldr	r1, [sp, #20]
 80062c0:	2201      	movs	r2, #1
 80062c2:	0038      	movs	r0, r7
 80062c4:	f000 fadc 	bl	8006880 <__lshift>
 80062c8:	0031      	movs	r1, r6
 80062ca:	9005      	str	r0, [sp, #20]
 80062cc:	f000 fb46 	bl	800695c <__mcmp>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	dc03      	bgt.n	80062dc <_dtoa_r+0xb0c>
 80062d4:	d1e4      	bne.n	80062a0 <_dtoa_r+0xad0>
 80062d6:	9b07      	ldr	r3, [sp, #28]
 80062d8:	07db      	lsls	r3, r3, #31
 80062da:	d5e1      	bpl.n	80062a0 <_dtoa_r+0xad0>
 80062dc:	9b07      	ldr	r3, [sp, #28]
 80062de:	2b39      	cmp	r3, #57	; 0x39
 80062e0:	d1db      	bne.n	800629a <_dtoa_r+0xaca>
 80062e2:	2339      	movs	r3, #57	; 0x39
 80062e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062e6:	7013      	strb	r3, [r2, #0]
 80062e8:	9b08      	ldr	r3, [sp, #32]
 80062ea:	9308      	str	r3, [sp, #32]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	781a      	ldrb	r2, [r3, #0]
 80062f0:	2a39      	cmp	r2, #57	; 0x39
 80062f2:	d068      	beq.n	80063c6 <_dtoa_r+0xbf6>
 80062f4:	3201      	adds	r2, #1
 80062f6:	e7d5      	b.n	80062a4 <_dtoa_r+0xad4>
 80062f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dd07      	ble.n	800630e <_dtoa_r+0xb3e>
 80062fe:	9b07      	ldr	r3, [sp, #28]
 8006300:	2b39      	cmp	r3, #57	; 0x39
 8006302:	d0ee      	beq.n	80062e2 <_dtoa_r+0xb12>
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006308:	3301      	adds	r3, #1
 800630a:	7013      	strb	r3, [r2, #0]
 800630c:	e737      	b.n	800617e <_dtoa_r+0x9ae>
 800630e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006310:	9a07      	ldr	r2, [sp, #28]
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006318:	4293      	cmp	r3, r2
 800631a:	d03e      	beq.n	800639a <_dtoa_r+0xbca>
 800631c:	2300      	movs	r3, #0
 800631e:	220a      	movs	r2, #10
 8006320:	9905      	ldr	r1, [sp, #20]
 8006322:	0038      	movs	r0, r7
 8006324:	f000 f8fe 	bl	8006524 <__multadd>
 8006328:	2300      	movs	r3, #0
 800632a:	9005      	str	r0, [sp, #20]
 800632c:	220a      	movs	r2, #10
 800632e:	0021      	movs	r1, r4
 8006330:	0038      	movs	r0, r7
 8006332:	42ac      	cmp	r4, r5
 8006334:	d106      	bne.n	8006344 <_dtoa_r+0xb74>
 8006336:	f000 f8f5 	bl	8006524 <__multadd>
 800633a:	0004      	movs	r4, r0
 800633c:	0005      	movs	r5, r0
 800633e:	9b08      	ldr	r3, [sp, #32]
 8006340:	930a      	str	r3, [sp, #40]	; 0x28
 8006342:	e778      	b.n	8006236 <_dtoa_r+0xa66>
 8006344:	f000 f8ee 	bl	8006524 <__multadd>
 8006348:	0029      	movs	r1, r5
 800634a:	0004      	movs	r4, r0
 800634c:	2300      	movs	r3, #0
 800634e:	220a      	movs	r2, #10
 8006350:	0038      	movs	r0, r7
 8006352:	f000 f8e7 	bl	8006524 <__multadd>
 8006356:	0005      	movs	r5, r0
 8006358:	e7f1      	b.n	800633e <_dtoa_r+0xb6e>
 800635a:	9b07      	ldr	r3, [sp, #28]
 800635c:	930c      	str	r3, [sp, #48]	; 0x30
 800635e:	2400      	movs	r4, #0
 8006360:	0031      	movs	r1, r6
 8006362:	9805      	ldr	r0, [sp, #20]
 8006364:	f7ff f9a8 	bl	80056b8 <quorem>
 8006368:	9b06      	ldr	r3, [sp, #24]
 800636a:	3030      	adds	r0, #48	; 0x30
 800636c:	5518      	strb	r0, [r3, r4]
 800636e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006370:	3401      	adds	r4, #1
 8006372:	9007      	str	r0, [sp, #28]
 8006374:	42a3      	cmp	r3, r4
 8006376:	dd07      	ble.n	8006388 <_dtoa_r+0xbb8>
 8006378:	2300      	movs	r3, #0
 800637a:	220a      	movs	r2, #10
 800637c:	0038      	movs	r0, r7
 800637e:	9905      	ldr	r1, [sp, #20]
 8006380:	f000 f8d0 	bl	8006524 <__multadd>
 8006384:	9005      	str	r0, [sp, #20]
 8006386:	e7eb      	b.n	8006360 <_dtoa_r+0xb90>
 8006388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800638a:	2001      	movs	r0, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	dd00      	ble.n	8006392 <_dtoa_r+0xbc2>
 8006390:	0018      	movs	r0, r3
 8006392:	2400      	movs	r4, #0
 8006394:	9b06      	ldr	r3, [sp, #24]
 8006396:	181b      	adds	r3, r3, r0
 8006398:	9308      	str	r3, [sp, #32]
 800639a:	9905      	ldr	r1, [sp, #20]
 800639c:	2201      	movs	r2, #1
 800639e:	0038      	movs	r0, r7
 80063a0:	f000 fa6e 	bl	8006880 <__lshift>
 80063a4:	0031      	movs	r1, r6
 80063a6:	9005      	str	r0, [sp, #20]
 80063a8:	f000 fad8 	bl	800695c <__mcmp>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	dc9b      	bgt.n	80062e8 <_dtoa_r+0xb18>
 80063b0:	d102      	bne.n	80063b8 <_dtoa_r+0xbe8>
 80063b2:	9b07      	ldr	r3, [sp, #28]
 80063b4:	07db      	lsls	r3, r3, #31
 80063b6:	d497      	bmi.n	80062e8 <_dtoa_r+0xb18>
 80063b8:	9b08      	ldr	r3, [sp, #32]
 80063ba:	9308      	str	r3, [sp, #32]
 80063bc:	3b01      	subs	r3, #1
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	2a30      	cmp	r2, #48	; 0x30
 80063c2:	d0fa      	beq.n	80063ba <_dtoa_r+0xbea>
 80063c4:	e6db      	b.n	800617e <_dtoa_r+0x9ae>
 80063c6:	9a06      	ldr	r2, [sp, #24]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d18e      	bne.n	80062ea <_dtoa_r+0xb1a>
 80063cc:	9b02      	ldr	r3, [sp, #8]
 80063ce:	3301      	adds	r3, #1
 80063d0:	9302      	str	r3, [sp, #8]
 80063d2:	2331      	movs	r3, #49	; 0x31
 80063d4:	e799      	b.n	800630a <_dtoa_r+0xb3a>
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <_dtoa_r+0xc2c>)
 80063d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	4b08      	ldr	r3, [pc, #32]	; (8006400 <_dtoa_r+0xc30>)
 80063de:	2a00      	cmp	r2, #0
 80063e0:	d001      	beq.n	80063e6 <_dtoa_r+0xc16>
 80063e2:	f7ff fa3f 	bl	8005864 <_dtoa_r+0x94>
 80063e6:	f7ff fa3f 	bl	8005868 <_dtoa_r+0x98>
 80063ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dcb6      	bgt.n	800635e <_dtoa_r+0xb8e>
 80063f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	dd00      	ble.n	80063f8 <_dtoa_r+0xc28>
 80063f6:	e6ac      	b.n	8006152 <_dtoa_r+0x982>
 80063f8:	e7b1      	b.n	800635e <_dtoa_r+0xb8e>
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	08007c1c 	.word	0x08007c1c
 8006400:	08007c24 	.word	0x08007c24

08006404 <_localeconv_r>:
 8006404:	4800      	ldr	r0, [pc, #0]	; (8006408 <_localeconv_r+0x4>)
 8006406:	4770      	bx	lr
 8006408:	20000160 	.word	0x20000160

0800640c <memchr>:
 800640c:	b2c9      	uxtb	r1, r1
 800640e:	1882      	adds	r2, r0, r2
 8006410:	4290      	cmp	r0, r2
 8006412:	d101      	bne.n	8006418 <memchr+0xc>
 8006414:	2000      	movs	r0, #0
 8006416:	4770      	bx	lr
 8006418:	7803      	ldrb	r3, [r0, #0]
 800641a:	428b      	cmp	r3, r1
 800641c:	d0fb      	beq.n	8006416 <memchr+0xa>
 800641e:	3001      	adds	r0, #1
 8006420:	e7f6      	b.n	8006410 <memchr+0x4>

08006422 <memcpy>:
 8006422:	2300      	movs	r3, #0
 8006424:	b510      	push	{r4, lr}
 8006426:	429a      	cmp	r2, r3
 8006428:	d100      	bne.n	800642c <memcpy+0xa>
 800642a:	bd10      	pop	{r4, pc}
 800642c:	5ccc      	ldrb	r4, [r1, r3]
 800642e:	54c4      	strb	r4, [r0, r3]
 8006430:	3301      	adds	r3, #1
 8006432:	e7f8      	b.n	8006426 <memcpy+0x4>

08006434 <__malloc_lock>:
 8006434:	b510      	push	{r4, lr}
 8006436:	4802      	ldr	r0, [pc, #8]	; (8006440 <__malloc_lock+0xc>)
 8006438:	f000 fd65 	bl	8006f06 <__retarget_lock_acquire_recursive>
 800643c:	bd10      	pop	{r4, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	2000026c 	.word	0x2000026c

08006444 <__malloc_unlock>:
 8006444:	b510      	push	{r4, lr}
 8006446:	4802      	ldr	r0, [pc, #8]	; (8006450 <__malloc_unlock+0xc>)
 8006448:	f000 fd5e 	bl	8006f08 <__retarget_lock_release_recursive>
 800644c:	bd10      	pop	{r4, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	2000026c 	.word	0x2000026c

08006454 <_Balloc>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006458:	0006      	movs	r6, r0
 800645a:	000c      	movs	r4, r1
 800645c:	2d00      	cmp	r5, #0
 800645e:	d10e      	bne.n	800647e <_Balloc+0x2a>
 8006460:	2010      	movs	r0, #16
 8006462:	f7fe fb95 	bl	8004b90 <malloc>
 8006466:	1e02      	subs	r2, r0, #0
 8006468:	6270      	str	r0, [r6, #36]	; 0x24
 800646a:	d104      	bne.n	8006476 <_Balloc+0x22>
 800646c:	2166      	movs	r1, #102	; 0x66
 800646e:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <_Balloc+0x80>)
 8006470:	4819      	ldr	r0, [pc, #100]	; (80064d8 <_Balloc+0x84>)
 8006472:	f000 fd19 	bl	8006ea8 <__assert_func>
 8006476:	6045      	str	r5, [r0, #4]
 8006478:	6085      	str	r5, [r0, #8]
 800647a:	6005      	str	r5, [r0, #0]
 800647c:	60c5      	str	r5, [r0, #12]
 800647e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006480:	68eb      	ldr	r3, [r5, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d013      	beq.n	80064ae <_Balloc+0x5a>
 8006486:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006488:	00a2      	lsls	r2, r4, #2
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	189b      	adds	r3, r3, r2
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	2800      	cmp	r0, #0
 8006492:	d118      	bne.n	80064c6 <_Balloc+0x72>
 8006494:	2101      	movs	r1, #1
 8006496:	000d      	movs	r5, r1
 8006498:	40a5      	lsls	r5, r4
 800649a:	1d6a      	adds	r2, r5, #5
 800649c:	0030      	movs	r0, r6
 800649e:	0092      	lsls	r2, r2, #2
 80064a0:	f000 fb74 	bl	8006b8c <_calloc_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d00c      	beq.n	80064c2 <_Balloc+0x6e>
 80064a8:	6044      	str	r4, [r0, #4]
 80064aa:	6085      	str	r5, [r0, #8]
 80064ac:	e00d      	b.n	80064ca <_Balloc+0x76>
 80064ae:	2221      	movs	r2, #33	; 0x21
 80064b0:	2104      	movs	r1, #4
 80064b2:	0030      	movs	r0, r6
 80064b4:	f000 fb6a 	bl	8006b8c <_calloc_r>
 80064b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80064ba:	60e8      	str	r0, [r5, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e1      	bne.n	8006486 <_Balloc+0x32>
 80064c2:	2000      	movs	r0, #0
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
 80064c6:	6802      	ldr	r2, [r0, #0]
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	2300      	movs	r3, #0
 80064cc:	6103      	str	r3, [r0, #16]
 80064ce:	60c3      	str	r3, [r0, #12]
 80064d0:	e7f8      	b.n	80064c4 <_Balloc+0x70>
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	08007c29 	.word	0x08007c29
 80064d8:	08007cac 	.word	0x08007cac

080064dc <_Bfree>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064e0:	0005      	movs	r5, r0
 80064e2:	000c      	movs	r4, r1
 80064e4:	2e00      	cmp	r6, #0
 80064e6:	d10e      	bne.n	8006506 <_Bfree+0x2a>
 80064e8:	2010      	movs	r0, #16
 80064ea:	f7fe fb51 	bl	8004b90 <malloc>
 80064ee:	1e02      	subs	r2, r0, #0
 80064f0:	6268      	str	r0, [r5, #36]	; 0x24
 80064f2:	d104      	bne.n	80064fe <_Bfree+0x22>
 80064f4:	218a      	movs	r1, #138	; 0x8a
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <_Bfree+0x40>)
 80064f8:	4809      	ldr	r0, [pc, #36]	; (8006520 <_Bfree+0x44>)
 80064fa:	f000 fcd5 	bl	8006ea8 <__assert_func>
 80064fe:	6046      	str	r6, [r0, #4]
 8006500:	6086      	str	r6, [r0, #8]
 8006502:	6006      	str	r6, [r0, #0]
 8006504:	60c6      	str	r6, [r0, #12]
 8006506:	2c00      	cmp	r4, #0
 8006508:	d007      	beq.n	800651a <_Bfree+0x3e>
 800650a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800650c:	6862      	ldr	r2, [r4, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	189b      	adds	r3, r3, r2
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	6022      	str	r2, [r4, #0]
 8006518:	601c      	str	r4, [r3, #0]
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	08007c29 	.word	0x08007c29
 8006520:	08007cac 	.word	0x08007cac

08006524 <__multadd>:
 8006524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006526:	000e      	movs	r6, r1
 8006528:	9001      	str	r0, [sp, #4]
 800652a:	000c      	movs	r4, r1
 800652c:	001d      	movs	r5, r3
 800652e:	2000      	movs	r0, #0
 8006530:	690f      	ldr	r7, [r1, #16]
 8006532:	3614      	adds	r6, #20
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	3001      	adds	r0, #1
 8006538:	b299      	uxth	r1, r3
 800653a:	4351      	muls	r1, r2
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	4353      	muls	r3, r2
 8006540:	1949      	adds	r1, r1, r5
 8006542:	0c0d      	lsrs	r5, r1, #16
 8006544:	195b      	adds	r3, r3, r5
 8006546:	0c1d      	lsrs	r5, r3, #16
 8006548:	b289      	uxth	r1, r1
 800654a:	041b      	lsls	r3, r3, #16
 800654c:	185b      	adds	r3, r3, r1
 800654e:	c608      	stmia	r6!, {r3}
 8006550:	4287      	cmp	r7, r0
 8006552:	dcef      	bgt.n	8006534 <__multadd+0x10>
 8006554:	2d00      	cmp	r5, #0
 8006556:	d022      	beq.n	800659e <__multadd+0x7a>
 8006558:	68a3      	ldr	r3, [r4, #8]
 800655a:	42bb      	cmp	r3, r7
 800655c:	dc19      	bgt.n	8006592 <__multadd+0x6e>
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	9801      	ldr	r0, [sp, #4]
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	f7ff ff76 	bl	8006454 <_Balloc>
 8006568:	1e06      	subs	r6, r0, #0
 800656a:	d105      	bne.n	8006578 <__multadd+0x54>
 800656c:	0002      	movs	r2, r0
 800656e:	21b5      	movs	r1, #181	; 0xb5
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <__multadd+0x80>)
 8006572:	480d      	ldr	r0, [pc, #52]	; (80065a8 <__multadd+0x84>)
 8006574:	f000 fc98 	bl	8006ea8 <__assert_func>
 8006578:	0021      	movs	r1, r4
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	310c      	adds	r1, #12
 800657e:	1c9a      	adds	r2, r3, #2
 8006580:	0092      	lsls	r2, r2, #2
 8006582:	300c      	adds	r0, #12
 8006584:	f7ff ff4d 	bl	8006422 <memcpy>
 8006588:	0021      	movs	r1, r4
 800658a:	9801      	ldr	r0, [sp, #4]
 800658c:	f7ff ffa6 	bl	80064dc <_Bfree>
 8006590:	0034      	movs	r4, r6
 8006592:	1d3b      	adds	r3, r7, #4
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	18e3      	adds	r3, r4, r3
 8006598:	605d      	str	r5, [r3, #4]
 800659a:	1c7b      	adds	r3, r7, #1
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	0020      	movs	r0, r4
 80065a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	08007c9b 	.word	0x08007c9b
 80065a8:	08007cac 	.word	0x08007cac

080065ac <__hi0bits>:
 80065ac:	0003      	movs	r3, r0
 80065ae:	0c02      	lsrs	r2, r0, #16
 80065b0:	2000      	movs	r0, #0
 80065b2:	4282      	cmp	r2, r0
 80065b4:	d101      	bne.n	80065ba <__hi0bits+0xe>
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	3010      	adds	r0, #16
 80065ba:	0e1a      	lsrs	r2, r3, #24
 80065bc:	d101      	bne.n	80065c2 <__hi0bits+0x16>
 80065be:	3008      	adds	r0, #8
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	0f1a      	lsrs	r2, r3, #28
 80065c4:	d101      	bne.n	80065ca <__hi0bits+0x1e>
 80065c6:	3004      	adds	r0, #4
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	0f9a      	lsrs	r2, r3, #30
 80065cc:	d101      	bne.n	80065d2 <__hi0bits+0x26>
 80065ce:	3002      	adds	r0, #2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	db03      	blt.n	80065de <__hi0bits+0x32>
 80065d6:	3001      	adds	r0, #1
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	d400      	bmi.n	80065de <__hi0bits+0x32>
 80065dc:	2020      	movs	r0, #32
 80065de:	4770      	bx	lr

080065e0 <__lo0bits>:
 80065e0:	6803      	ldr	r3, [r0, #0]
 80065e2:	0002      	movs	r2, r0
 80065e4:	2107      	movs	r1, #7
 80065e6:	0018      	movs	r0, r3
 80065e8:	4008      	ands	r0, r1
 80065ea:	420b      	tst	r3, r1
 80065ec:	d00d      	beq.n	800660a <__lo0bits+0x2a>
 80065ee:	3906      	subs	r1, #6
 80065f0:	2000      	movs	r0, #0
 80065f2:	420b      	tst	r3, r1
 80065f4:	d105      	bne.n	8006602 <__lo0bits+0x22>
 80065f6:	3002      	adds	r0, #2
 80065f8:	4203      	tst	r3, r0
 80065fa:	d003      	beq.n	8006604 <__lo0bits+0x24>
 80065fc:	40cb      	lsrs	r3, r1
 80065fe:	0008      	movs	r0, r1
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4770      	bx	lr
 8006604:	089b      	lsrs	r3, r3, #2
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	e7fb      	b.n	8006602 <__lo0bits+0x22>
 800660a:	b299      	uxth	r1, r3
 800660c:	2900      	cmp	r1, #0
 800660e:	d101      	bne.n	8006614 <__lo0bits+0x34>
 8006610:	2010      	movs	r0, #16
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	b2d9      	uxtb	r1, r3
 8006616:	2900      	cmp	r1, #0
 8006618:	d101      	bne.n	800661e <__lo0bits+0x3e>
 800661a:	3008      	adds	r0, #8
 800661c:	0a1b      	lsrs	r3, r3, #8
 800661e:	0719      	lsls	r1, r3, #28
 8006620:	d101      	bne.n	8006626 <__lo0bits+0x46>
 8006622:	3004      	adds	r0, #4
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	0799      	lsls	r1, r3, #30
 8006628:	d101      	bne.n	800662e <__lo0bits+0x4e>
 800662a:	3002      	adds	r0, #2
 800662c:	089b      	lsrs	r3, r3, #2
 800662e:	07d9      	lsls	r1, r3, #31
 8006630:	d4e9      	bmi.n	8006606 <__lo0bits+0x26>
 8006632:	3001      	adds	r0, #1
 8006634:	085b      	lsrs	r3, r3, #1
 8006636:	d1e6      	bne.n	8006606 <__lo0bits+0x26>
 8006638:	2020      	movs	r0, #32
 800663a:	e7e2      	b.n	8006602 <__lo0bits+0x22>

0800663c <__i2b>:
 800663c:	b510      	push	{r4, lr}
 800663e:	000c      	movs	r4, r1
 8006640:	2101      	movs	r1, #1
 8006642:	f7ff ff07 	bl	8006454 <_Balloc>
 8006646:	2800      	cmp	r0, #0
 8006648:	d106      	bne.n	8006658 <__i2b+0x1c>
 800664a:	21a0      	movs	r1, #160	; 0xa0
 800664c:	0002      	movs	r2, r0
 800664e:	4b04      	ldr	r3, [pc, #16]	; (8006660 <__i2b+0x24>)
 8006650:	4804      	ldr	r0, [pc, #16]	; (8006664 <__i2b+0x28>)
 8006652:	0049      	lsls	r1, r1, #1
 8006654:	f000 fc28 	bl	8006ea8 <__assert_func>
 8006658:	2301      	movs	r3, #1
 800665a:	6144      	str	r4, [r0, #20]
 800665c:	6103      	str	r3, [r0, #16]
 800665e:	bd10      	pop	{r4, pc}
 8006660:	08007c9b 	.word	0x08007c9b
 8006664:	08007cac 	.word	0x08007cac

08006668 <__multiply>:
 8006668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800666a:	690b      	ldr	r3, [r1, #16]
 800666c:	0014      	movs	r4, r2
 800666e:	6912      	ldr	r2, [r2, #16]
 8006670:	000d      	movs	r5, r1
 8006672:	b089      	sub	sp, #36	; 0x24
 8006674:	4293      	cmp	r3, r2
 8006676:	da01      	bge.n	800667c <__multiply+0x14>
 8006678:	0025      	movs	r5, r4
 800667a:	000c      	movs	r4, r1
 800667c:	692f      	ldr	r7, [r5, #16]
 800667e:	6926      	ldr	r6, [r4, #16]
 8006680:	6869      	ldr	r1, [r5, #4]
 8006682:	19bb      	adds	r3, r7, r6
 8006684:	9302      	str	r3, [sp, #8]
 8006686:	68ab      	ldr	r3, [r5, #8]
 8006688:	19ba      	adds	r2, r7, r6
 800668a:	4293      	cmp	r3, r2
 800668c:	da00      	bge.n	8006690 <__multiply+0x28>
 800668e:	3101      	adds	r1, #1
 8006690:	f7ff fee0 	bl	8006454 <_Balloc>
 8006694:	9001      	str	r0, [sp, #4]
 8006696:	2800      	cmp	r0, #0
 8006698:	d106      	bne.n	80066a8 <__multiply+0x40>
 800669a:	215e      	movs	r1, #94	; 0x5e
 800669c:	0002      	movs	r2, r0
 800669e:	4b48      	ldr	r3, [pc, #288]	; (80067c0 <__multiply+0x158>)
 80066a0:	4848      	ldr	r0, [pc, #288]	; (80067c4 <__multiply+0x15c>)
 80066a2:	31ff      	adds	r1, #255	; 0xff
 80066a4:	f000 fc00 	bl	8006ea8 <__assert_func>
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	3314      	adds	r3, #20
 80066ae:	469c      	mov	ip, r3
 80066b0:	19bb      	adds	r3, r7, r6
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4463      	add	r3, ip
 80066b6:	9303      	str	r3, [sp, #12]
 80066b8:	4663      	mov	r3, ip
 80066ba:	9903      	ldr	r1, [sp, #12]
 80066bc:	428b      	cmp	r3, r1
 80066be:	d32c      	bcc.n	800671a <__multiply+0xb2>
 80066c0:	002b      	movs	r3, r5
 80066c2:	0022      	movs	r2, r4
 80066c4:	3314      	adds	r3, #20
 80066c6:	00bf      	lsls	r7, r7, #2
 80066c8:	3214      	adds	r2, #20
 80066ca:	9306      	str	r3, [sp, #24]
 80066cc:	00b6      	lsls	r6, r6, #2
 80066ce:	19db      	adds	r3, r3, r7
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	1993      	adds	r3, r2, r6
 80066d4:	9307      	str	r3, [sp, #28]
 80066d6:	2304      	movs	r3, #4
 80066d8:	9305      	str	r3, [sp, #20]
 80066da:	002b      	movs	r3, r5
 80066dc:	9904      	ldr	r1, [sp, #16]
 80066de:	3315      	adds	r3, #21
 80066e0:	9200      	str	r2, [sp, #0]
 80066e2:	4299      	cmp	r1, r3
 80066e4:	d305      	bcc.n	80066f2 <__multiply+0x8a>
 80066e6:	1b4b      	subs	r3, r1, r5
 80066e8:	3b15      	subs	r3, #21
 80066ea:	089b      	lsrs	r3, r3, #2
 80066ec:	3301      	adds	r3, #1
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	9305      	str	r3, [sp, #20]
 80066f2:	9b07      	ldr	r3, [sp, #28]
 80066f4:	9a00      	ldr	r2, [sp, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d311      	bcc.n	800671e <__multiply+0xb6>
 80066fa:	9b02      	ldr	r3, [sp, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dd06      	ble.n	800670e <__multiply+0xa6>
 8006700:	9b03      	ldr	r3, [sp, #12]
 8006702:	3b04      	subs	r3, #4
 8006704:	9303      	str	r3, [sp, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d053      	beq.n	80067b6 <__multiply+0x14e>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	9a02      	ldr	r2, [sp, #8]
 8006712:	0018      	movs	r0, r3
 8006714:	611a      	str	r2, [r3, #16]
 8006716:	b009      	add	sp, #36	; 0x24
 8006718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671a:	c304      	stmia	r3!, {r2}
 800671c:	e7cd      	b.n	80066ba <__multiply+0x52>
 800671e:	9b00      	ldr	r3, [sp, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	b298      	uxth	r0, r3
 8006724:	2800      	cmp	r0, #0
 8006726:	d01b      	beq.n	8006760 <__multiply+0xf8>
 8006728:	4667      	mov	r7, ip
 800672a:	2400      	movs	r4, #0
 800672c:	9e06      	ldr	r6, [sp, #24]
 800672e:	ce02      	ldmia	r6!, {r1}
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	b28b      	uxth	r3, r1
 8006734:	4343      	muls	r3, r0
 8006736:	b292      	uxth	r2, r2
 8006738:	189b      	adds	r3, r3, r2
 800673a:	191b      	adds	r3, r3, r4
 800673c:	0c0c      	lsrs	r4, r1, #16
 800673e:	4344      	muls	r4, r0
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	0c11      	lsrs	r1, r2, #16
 8006744:	1861      	adds	r1, r4, r1
 8006746:	0c1c      	lsrs	r4, r3, #16
 8006748:	1909      	adds	r1, r1, r4
 800674a:	0c0c      	lsrs	r4, r1, #16
 800674c:	b29b      	uxth	r3, r3
 800674e:	0409      	lsls	r1, r1, #16
 8006750:	430b      	orrs	r3, r1
 8006752:	c708      	stmia	r7!, {r3}
 8006754:	9b04      	ldr	r3, [sp, #16]
 8006756:	42b3      	cmp	r3, r6
 8006758:	d8e9      	bhi.n	800672e <__multiply+0xc6>
 800675a:	4663      	mov	r3, ip
 800675c:	9a05      	ldr	r2, [sp, #20]
 800675e:	509c      	str	r4, [r3, r2]
 8006760:	9b00      	ldr	r3, [sp, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	0c1e      	lsrs	r6, r3, #16
 8006766:	d020      	beq.n	80067aa <__multiply+0x142>
 8006768:	4663      	mov	r3, ip
 800676a:	002c      	movs	r4, r5
 800676c:	4660      	mov	r0, ip
 800676e:	2700      	movs	r7, #0
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3414      	adds	r4, #20
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	b291      	uxth	r1, r2
 800677a:	4371      	muls	r1, r6
 800677c:	6802      	ldr	r2, [r0, #0]
 800677e:	0c12      	lsrs	r2, r2, #16
 8006780:	1889      	adds	r1, r1, r2
 8006782:	19cf      	adds	r7, r1, r7
 8006784:	0439      	lsls	r1, r7, #16
 8006786:	430b      	orrs	r3, r1
 8006788:	6003      	str	r3, [r0, #0]
 800678a:	cc02      	ldmia	r4!, {r1}
 800678c:	6843      	ldr	r3, [r0, #4]
 800678e:	0c09      	lsrs	r1, r1, #16
 8006790:	4371      	muls	r1, r6
 8006792:	b29b      	uxth	r3, r3
 8006794:	0c3f      	lsrs	r7, r7, #16
 8006796:	18cb      	adds	r3, r1, r3
 8006798:	9a04      	ldr	r2, [sp, #16]
 800679a:	19db      	adds	r3, r3, r7
 800679c:	0c1f      	lsrs	r7, r3, #16
 800679e:	3004      	adds	r0, #4
 80067a0:	42a2      	cmp	r2, r4
 80067a2:	d8e7      	bhi.n	8006774 <__multiply+0x10c>
 80067a4:	4662      	mov	r2, ip
 80067a6:	9905      	ldr	r1, [sp, #20]
 80067a8:	5053      	str	r3, [r2, r1]
 80067aa:	9b00      	ldr	r3, [sp, #0]
 80067ac:	3304      	adds	r3, #4
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	2304      	movs	r3, #4
 80067b2:	449c      	add	ip, r3
 80067b4:	e79d      	b.n	80066f2 <__multiply+0x8a>
 80067b6:	9b02      	ldr	r3, [sp, #8]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	9302      	str	r3, [sp, #8]
 80067bc:	e79d      	b.n	80066fa <__multiply+0x92>
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	08007c9b 	.word	0x08007c9b
 80067c4:	08007cac 	.word	0x08007cac

080067c8 <__pow5mult>:
 80067c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ca:	2303      	movs	r3, #3
 80067cc:	0015      	movs	r5, r2
 80067ce:	0007      	movs	r7, r0
 80067d0:	000e      	movs	r6, r1
 80067d2:	401a      	ands	r2, r3
 80067d4:	421d      	tst	r5, r3
 80067d6:	d008      	beq.n	80067ea <__pow5mult+0x22>
 80067d8:	4925      	ldr	r1, [pc, #148]	; (8006870 <__pow5mult+0xa8>)
 80067da:	3a01      	subs	r2, #1
 80067dc:	0092      	lsls	r2, r2, #2
 80067de:	5852      	ldr	r2, [r2, r1]
 80067e0:	2300      	movs	r3, #0
 80067e2:	0031      	movs	r1, r6
 80067e4:	f7ff fe9e 	bl	8006524 <__multadd>
 80067e8:	0006      	movs	r6, r0
 80067ea:	10ad      	asrs	r5, r5, #2
 80067ec:	d03d      	beq.n	800686a <__pow5mult+0xa2>
 80067ee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80067f0:	2c00      	cmp	r4, #0
 80067f2:	d10f      	bne.n	8006814 <__pow5mult+0x4c>
 80067f4:	2010      	movs	r0, #16
 80067f6:	f7fe f9cb 	bl	8004b90 <malloc>
 80067fa:	1e02      	subs	r2, r0, #0
 80067fc:	6278      	str	r0, [r7, #36]	; 0x24
 80067fe:	d105      	bne.n	800680c <__pow5mult+0x44>
 8006800:	21d7      	movs	r1, #215	; 0xd7
 8006802:	4b1c      	ldr	r3, [pc, #112]	; (8006874 <__pow5mult+0xac>)
 8006804:	481c      	ldr	r0, [pc, #112]	; (8006878 <__pow5mult+0xb0>)
 8006806:	0049      	lsls	r1, r1, #1
 8006808:	f000 fb4e 	bl	8006ea8 <__assert_func>
 800680c:	6044      	str	r4, [r0, #4]
 800680e:	6084      	str	r4, [r0, #8]
 8006810:	6004      	str	r4, [r0, #0]
 8006812:	60c4      	str	r4, [r0, #12]
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	689c      	ldr	r4, [r3, #8]
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	2c00      	cmp	r4, #0
 800681c:	d108      	bne.n	8006830 <__pow5mult+0x68>
 800681e:	0038      	movs	r0, r7
 8006820:	4916      	ldr	r1, [pc, #88]	; (800687c <__pow5mult+0xb4>)
 8006822:	f7ff ff0b 	bl	800663c <__i2b>
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	0004      	movs	r4, r0
 800682a:	6098      	str	r0, [r3, #8]
 800682c:	2300      	movs	r3, #0
 800682e:	6003      	str	r3, [r0, #0]
 8006830:	2301      	movs	r3, #1
 8006832:	421d      	tst	r5, r3
 8006834:	d00a      	beq.n	800684c <__pow5mult+0x84>
 8006836:	0031      	movs	r1, r6
 8006838:	0022      	movs	r2, r4
 800683a:	0038      	movs	r0, r7
 800683c:	f7ff ff14 	bl	8006668 <__multiply>
 8006840:	0031      	movs	r1, r6
 8006842:	9001      	str	r0, [sp, #4]
 8006844:	0038      	movs	r0, r7
 8006846:	f7ff fe49 	bl	80064dc <_Bfree>
 800684a:	9e01      	ldr	r6, [sp, #4]
 800684c:	106d      	asrs	r5, r5, #1
 800684e:	d00c      	beq.n	800686a <__pow5mult+0xa2>
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	2800      	cmp	r0, #0
 8006854:	d107      	bne.n	8006866 <__pow5mult+0x9e>
 8006856:	0022      	movs	r2, r4
 8006858:	0021      	movs	r1, r4
 800685a:	0038      	movs	r0, r7
 800685c:	f7ff ff04 	bl	8006668 <__multiply>
 8006860:	2300      	movs	r3, #0
 8006862:	6020      	str	r0, [r4, #0]
 8006864:	6003      	str	r3, [r0, #0]
 8006866:	0004      	movs	r4, r0
 8006868:	e7e2      	b.n	8006830 <__pow5mult+0x68>
 800686a:	0030      	movs	r0, r6
 800686c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	08007df8 	.word	0x08007df8
 8006874:	08007c29 	.word	0x08007c29
 8006878:	08007cac 	.word	0x08007cac
 800687c:	00000271 	.word	0x00000271

08006880 <__lshift>:
 8006880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006882:	000c      	movs	r4, r1
 8006884:	0017      	movs	r7, r2
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	1155      	asrs	r5, r2, #5
 800688a:	b087      	sub	sp, #28
 800688c:	18eb      	adds	r3, r5, r3
 800688e:	9302      	str	r3, [sp, #8]
 8006890:	3301      	adds	r3, #1
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	6849      	ldr	r1, [r1, #4]
 8006896:	68a3      	ldr	r3, [r4, #8]
 8006898:	9004      	str	r0, [sp, #16]
 800689a:	9a01      	ldr	r2, [sp, #4]
 800689c:	4293      	cmp	r3, r2
 800689e:	db10      	blt.n	80068c2 <__lshift+0x42>
 80068a0:	9804      	ldr	r0, [sp, #16]
 80068a2:	f7ff fdd7 	bl	8006454 <_Balloc>
 80068a6:	2300      	movs	r3, #0
 80068a8:	0002      	movs	r2, r0
 80068aa:	0006      	movs	r6, r0
 80068ac:	0019      	movs	r1, r3
 80068ae:	3214      	adds	r2, #20
 80068b0:	4298      	cmp	r0, r3
 80068b2:	d10c      	bne.n	80068ce <__lshift+0x4e>
 80068b4:	21da      	movs	r1, #218	; 0xda
 80068b6:	0002      	movs	r2, r0
 80068b8:	4b26      	ldr	r3, [pc, #152]	; (8006954 <__lshift+0xd4>)
 80068ba:	4827      	ldr	r0, [pc, #156]	; (8006958 <__lshift+0xd8>)
 80068bc:	31ff      	adds	r1, #255	; 0xff
 80068be:	f000 faf3 	bl	8006ea8 <__assert_func>
 80068c2:	3101      	adds	r1, #1
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	e7e8      	b.n	800689a <__lshift+0x1a>
 80068c8:	0098      	lsls	r0, r3, #2
 80068ca:	5011      	str	r1, [r2, r0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	42ab      	cmp	r3, r5
 80068d0:	dbfa      	blt.n	80068c8 <__lshift+0x48>
 80068d2:	43eb      	mvns	r3, r5
 80068d4:	17db      	asrs	r3, r3, #31
 80068d6:	401d      	ands	r5, r3
 80068d8:	211f      	movs	r1, #31
 80068da:	0023      	movs	r3, r4
 80068dc:	0038      	movs	r0, r7
 80068de:	00ad      	lsls	r5, r5, #2
 80068e0:	1955      	adds	r5, r2, r5
 80068e2:	6922      	ldr	r2, [r4, #16]
 80068e4:	3314      	adds	r3, #20
 80068e6:	0092      	lsls	r2, r2, #2
 80068e8:	4008      	ands	r0, r1
 80068ea:	4684      	mov	ip, r0
 80068ec:	189a      	adds	r2, r3, r2
 80068ee:	420f      	tst	r7, r1
 80068f0:	d02a      	beq.n	8006948 <__lshift+0xc8>
 80068f2:	3101      	adds	r1, #1
 80068f4:	1a09      	subs	r1, r1, r0
 80068f6:	9105      	str	r1, [sp, #20]
 80068f8:	2100      	movs	r1, #0
 80068fa:	9503      	str	r5, [sp, #12]
 80068fc:	4667      	mov	r7, ip
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	40b8      	lsls	r0, r7
 8006902:	4301      	orrs	r1, r0
 8006904:	9803      	ldr	r0, [sp, #12]
 8006906:	c002      	stmia	r0!, {r1}
 8006908:	cb02      	ldmia	r3!, {r1}
 800690a:	9003      	str	r0, [sp, #12]
 800690c:	9805      	ldr	r0, [sp, #20]
 800690e:	40c1      	lsrs	r1, r0
 8006910:	429a      	cmp	r2, r3
 8006912:	d8f3      	bhi.n	80068fc <__lshift+0x7c>
 8006914:	0020      	movs	r0, r4
 8006916:	3015      	adds	r0, #21
 8006918:	2304      	movs	r3, #4
 800691a:	4282      	cmp	r2, r0
 800691c:	d304      	bcc.n	8006928 <__lshift+0xa8>
 800691e:	1b13      	subs	r3, r2, r4
 8006920:	3b15      	subs	r3, #21
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	3301      	adds	r3, #1
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	50e9      	str	r1, [r5, r3]
 800692a:	2900      	cmp	r1, #0
 800692c:	d002      	beq.n	8006934 <__lshift+0xb4>
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	3302      	adds	r3, #2
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	9804      	ldr	r0, [sp, #16]
 8006938:	3b01      	subs	r3, #1
 800693a:	0021      	movs	r1, r4
 800693c:	6133      	str	r3, [r6, #16]
 800693e:	f7ff fdcd 	bl	80064dc <_Bfree>
 8006942:	0030      	movs	r0, r6
 8006944:	b007      	add	sp, #28
 8006946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006948:	cb02      	ldmia	r3!, {r1}
 800694a:	c502      	stmia	r5!, {r1}
 800694c:	429a      	cmp	r2, r3
 800694e:	d8fb      	bhi.n	8006948 <__lshift+0xc8>
 8006950:	e7f0      	b.n	8006934 <__lshift+0xb4>
 8006952:	46c0      	nop			; (mov r8, r8)
 8006954:	08007c9b 	.word	0x08007c9b
 8006958:	08007cac 	.word	0x08007cac

0800695c <__mcmp>:
 800695c:	6902      	ldr	r2, [r0, #16]
 800695e:	690b      	ldr	r3, [r1, #16]
 8006960:	b530      	push	{r4, r5, lr}
 8006962:	0004      	movs	r4, r0
 8006964:	1ad0      	subs	r0, r2, r3
 8006966:	429a      	cmp	r2, r3
 8006968:	d10d      	bne.n	8006986 <__mcmp+0x2a>
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	3414      	adds	r4, #20
 800696e:	3114      	adds	r1, #20
 8006970:	18e2      	adds	r2, r4, r3
 8006972:	18c9      	adds	r1, r1, r3
 8006974:	3a04      	subs	r2, #4
 8006976:	3904      	subs	r1, #4
 8006978:	6815      	ldr	r5, [r2, #0]
 800697a:	680b      	ldr	r3, [r1, #0]
 800697c:	429d      	cmp	r5, r3
 800697e:	d003      	beq.n	8006988 <__mcmp+0x2c>
 8006980:	2001      	movs	r0, #1
 8006982:	429d      	cmp	r5, r3
 8006984:	d303      	bcc.n	800698e <__mcmp+0x32>
 8006986:	bd30      	pop	{r4, r5, pc}
 8006988:	4294      	cmp	r4, r2
 800698a:	d3f3      	bcc.n	8006974 <__mcmp+0x18>
 800698c:	e7fb      	b.n	8006986 <__mcmp+0x2a>
 800698e:	4240      	negs	r0, r0
 8006990:	e7f9      	b.n	8006986 <__mcmp+0x2a>
	...

08006994 <__mdiff>:
 8006994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006996:	000e      	movs	r6, r1
 8006998:	0007      	movs	r7, r0
 800699a:	0011      	movs	r1, r2
 800699c:	0030      	movs	r0, r6
 800699e:	b087      	sub	sp, #28
 80069a0:	0014      	movs	r4, r2
 80069a2:	f7ff ffdb 	bl	800695c <__mcmp>
 80069a6:	1e05      	subs	r5, r0, #0
 80069a8:	d110      	bne.n	80069cc <__mdiff+0x38>
 80069aa:	0001      	movs	r1, r0
 80069ac:	0038      	movs	r0, r7
 80069ae:	f7ff fd51 	bl	8006454 <_Balloc>
 80069b2:	1e02      	subs	r2, r0, #0
 80069b4:	d104      	bne.n	80069c0 <__mdiff+0x2c>
 80069b6:	4b40      	ldr	r3, [pc, #256]	; (8006ab8 <__mdiff+0x124>)
 80069b8:	4940      	ldr	r1, [pc, #256]	; (8006abc <__mdiff+0x128>)
 80069ba:	4841      	ldr	r0, [pc, #260]	; (8006ac0 <__mdiff+0x12c>)
 80069bc:	f000 fa74 	bl	8006ea8 <__assert_func>
 80069c0:	2301      	movs	r3, #1
 80069c2:	6145      	str	r5, [r0, #20]
 80069c4:	6103      	str	r3, [r0, #16]
 80069c6:	0010      	movs	r0, r2
 80069c8:	b007      	add	sp, #28
 80069ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069cc:	2301      	movs	r3, #1
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	2800      	cmp	r0, #0
 80069d2:	db04      	blt.n	80069de <__mdiff+0x4a>
 80069d4:	0023      	movs	r3, r4
 80069d6:	0034      	movs	r4, r6
 80069d8:	001e      	movs	r6, r3
 80069da:	2300      	movs	r3, #0
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	0038      	movs	r0, r7
 80069e0:	6861      	ldr	r1, [r4, #4]
 80069e2:	f7ff fd37 	bl	8006454 <_Balloc>
 80069e6:	1e02      	subs	r2, r0, #0
 80069e8:	d103      	bne.n	80069f2 <__mdiff+0x5e>
 80069ea:	2190      	movs	r1, #144	; 0x90
 80069ec:	4b32      	ldr	r3, [pc, #200]	; (8006ab8 <__mdiff+0x124>)
 80069ee:	0089      	lsls	r1, r1, #2
 80069f0:	e7e3      	b.n	80069ba <__mdiff+0x26>
 80069f2:	9b01      	ldr	r3, [sp, #4]
 80069f4:	2700      	movs	r7, #0
 80069f6:	60c3      	str	r3, [r0, #12]
 80069f8:	6920      	ldr	r0, [r4, #16]
 80069fa:	3414      	adds	r4, #20
 80069fc:	9401      	str	r4, [sp, #4]
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	0084      	lsls	r4, r0, #2
 8006a02:	191b      	adds	r3, r3, r4
 8006a04:	0034      	movs	r4, r6
 8006a06:	9302      	str	r3, [sp, #8]
 8006a08:	6933      	ldr	r3, [r6, #16]
 8006a0a:	3414      	adds	r4, #20
 8006a0c:	0099      	lsls	r1, r3, #2
 8006a0e:	1863      	adds	r3, r4, r1
 8006a10:	9303      	str	r3, [sp, #12]
 8006a12:	0013      	movs	r3, r2
 8006a14:	3314      	adds	r3, #20
 8006a16:	469c      	mov	ip, r3
 8006a18:	9305      	str	r3, [sp, #20]
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	cc02      	ldmia	r4!, {r1}
 8006a22:	cb20      	ldmia	r3!, {r5}
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	b2ab      	uxth	r3, r5
 8006a28:	19df      	adds	r7, r3, r7
 8006a2a:	b28b      	uxth	r3, r1
 8006a2c:	1afb      	subs	r3, r7, r3
 8006a2e:	0c09      	lsrs	r1, r1, #16
 8006a30:	0c2d      	lsrs	r5, r5, #16
 8006a32:	1a6d      	subs	r5, r5, r1
 8006a34:	1419      	asrs	r1, r3, #16
 8006a36:	186d      	adds	r5, r5, r1
 8006a38:	4661      	mov	r1, ip
 8006a3a:	142f      	asrs	r7, r5, #16
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	042d      	lsls	r5, r5, #16
 8006a40:	432b      	orrs	r3, r5
 8006a42:	c108      	stmia	r1!, {r3}
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	468c      	mov	ip, r1
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d8e8      	bhi.n	8006a1e <__mdiff+0x8a>
 8006a4c:	0031      	movs	r1, r6
 8006a4e:	9c03      	ldr	r4, [sp, #12]
 8006a50:	3115      	adds	r1, #21
 8006a52:	2304      	movs	r3, #4
 8006a54:	428c      	cmp	r4, r1
 8006a56:	d304      	bcc.n	8006a62 <__mdiff+0xce>
 8006a58:	1ba3      	subs	r3, r4, r6
 8006a5a:	3b15      	subs	r3, #21
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	3301      	adds	r3, #1
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	9901      	ldr	r1, [sp, #4]
 8006a64:	18cc      	adds	r4, r1, r3
 8006a66:	9905      	ldr	r1, [sp, #20]
 8006a68:	0026      	movs	r6, r4
 8006a6a:	18cb      	adds	r3, r1, r3
 8006a6c:	469c      	mov	ip, r3
 8006a6e:	9902      	ldr	r1, [sp, #8]
 8006a70:	428e      	cmp	r6, r1
 8006a72:	d310      	bcc.n	8006a96 <__mdiff+0x102>
 8006a74:	9e02      	ldr	r6, [sp, #8]
 8006a76:	1ee1      	subs	r1, r4, #3
 8006a78:	2500      	movs	r5, #0
 8006a7a:	428e      	cmp	r6, r1
 8006a7c:	d304      	bcc.n	8006a88 <__mdiff+0xf4>
 8006a7e:	0031      	movs	r1, r6
 8006a80:	3103      	adds	r1, #3
 8006a82:	1b0c      	subs	r4, r1, r4
 8006a84:	08a4      	lsrs	r4, r4, #2
 8006a86:	00a5      	lsls	r5, r4, #2
 8006a88:	195b      	adds	r3, r3, r5
 8006a8a:	3b04      	subs	r3, #4
 8006a8c:	6819      	ldr	r1, [r3, #0]
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	d00f      	beq.n	8006ab2 <__mdiff+0x11e>
 8006a92:	6110      	str	r0, [r2, #16]
 8006a94:	e797      	b.n	80069c6 <__mdiff+0x32>
 8006a96:	ce02      	ldmia	r6!, {r1}
 8006a98:	b28d      	uxth	r5, r1
 8006a9a:	19ed      	adds	r5, r5, r7
 8006a9c:	0c0f      	lsrs	r7, r1, #16
 8006a9e:	1429      	asrs	r1, r5, #16
 8006aa0:	1879      	adds	r1, r7, r1
 8006aa2:	140f      	asrs	r7, r1, #16
 8006aa4:	b2ad      	uxth	r5, r5
 8006aa6:	0409      	lsls	r1, r1, #16
 8006aa8:	430d      	orrs	r5, r1
 8006aaa:	4661      	mov	r1, ip
 8006aac:	c120      	stmia	r1!, {r5}
 8006aae:	468c      	mov	ip, r1
 8006ab0:	e7dd      	b.n	8006a6e <__mdiff+0xda>
 8006ab2:	3801      	subs	r0, #1
 8006ab4:	e7e9      	b.n	8006a8a <__mdiff+0xf6>
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	08007c9b 	.word	0x08007c9b
 8006abc:	00000232 	.word	0x00000232
 8006ac0:	08007cac 	.word	0x08007cac

08006ac4 <__d2b>:
 8006ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	0014      	movs	r4, r2
 8006aca:	001e      	movs	r6, r3
 8006acc:	9f08      	ldr	r7, [sp, #32]
 8006ace:	f7ff fcc1 	bl	8006454 <_Balloc>
 8006ad2:	1e05      	subs	r5, r0, #0
 8006ad4:	d105      	bne.n	8006ae2 <__d2b+0x1e>
 8006ad6:	0002      	movs	r2, r0
 8006ad8:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <__d2b+0xb0>)
 8006ada:	4927      	ldr	r1, [pc, #156]	; (8006b78 <__d2b+0xb4>)
 8006adc:	4827      	ldr	r0, [pc, #156]	; (8006b7c <__d2b+0xb8>)
 8006ade:	f000 f9e3 	bl	8006ea8 <__assert_func>
 8006ae2:	0333      	lsls	r3, r6, #12
 8006ae4:	0076      	lsls	r6, r6, #1
 8006ae6:	0b1b      	lsrs	r3, r3, #12
 8006ae8:	0d76      	lsrs	r6, r6, #21
 8006aea:	d124      	bne.n	8006b36 <__d2b+0x72>
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	d027      	beq.n	8006b42 <__d2b+0x7e>
 8006af2:	4668      	mov	r0, sp
 8006af4:	9400      	str	r4, [sp, #0]
 8006af6:	f7ff fd73 	bl	80065e0 <__lo0bits>
 8006afa:	9c00      	ldr	r4, [sp, #0]
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d01e      	beq.n	8006b3e <__d2b+0x7a>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	2120      	movs	r1, #32
 8006b04:	001a      	movs	r2, r3
 8006b06:	1a09      	subs	r1, r1, r0
 8006b08:	408a      	lsls	r2, r1
 8006b0a:	40c3      	lsrs	r3, r0
 8006b0c:	4322      	orrs	r2, r4
 8006b0e:	616a      	str	r2, [r5, #20]
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	9c01      	ldr	r4, [sp, #4]
 8006b14:	61ac      	str	r4, [r5, #24]
 8006b16:	1e63      	subs	r3, r4, #1
 8006b18:	419c      	sbcs	r4, r3
 8006b1a:	3401      	adds	r4, #1
 8006b1c:	612c      	str	r4, [r5, #16]
 8006b1e:	2e00      	cmp	r6, #0
 8006b20:	d018      	beq.n	8006b54 <__d2b+0x90>
 8006b22:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <__d2b+0xbc>)
 8006b24:	18f6      	adds	r6, r6, r3
 8006b26:	2335      	movs	r3, #53	; 0x35
 8006b28:	1836      	adds	r6, r6, r0
 8006b2a:	1a18      	subs	r0, r3, r0
 8006b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2e:	603e      	str	r6, [r7, #0]
 8006b30:	6018      	str	r0, [r3, #0]
 8006b32:	0028      	movs	r0, r5
 8006b34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	0352      	lsls	r2, r2, #13
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	e7d6      	b.n	8006aec <__d2b+0x28>
 8006b3e:	616c      	str	r4, [r5, #20]
 8006b40:	e7e7      	b.n	8006b12 <__d2b+0x4e>
 8006b42:	a801      	add	r0, sp, #4
 8006b44:	f7ff fd4c 	bl	80065e0 <__lo0bits>
 8006b48:	2401      	movs	r4, #1
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	612c      	str	r4, [r5, #16]
 8006b4e:	616b      	str	r3, [r5, #20]
 8006b50:	3020      	adds	r0, #32
 8006b52:	e7e4      	b.n	8006b1e <__d2b+0x5a>
 8006b54:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <__d2b+0xc0>)
 8006b56:	18c0      	adds	r0, r0, r3
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <__d2b+0xc4>)
 8006b5a:	6038      	str	r0, [r7, #0]
 8006b5c:	18e3      	adds	r3, r4, r3
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	18eb      	adds	r3, r5, r3
 8006b62:	6958      	ldr	r0, [r3, #20]
 8006b64:	f7ff fd22 	bl	80065ac <__hi0bits>
 8006b68:	0164      	lsls	r4, r4, #5
 8006b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6c:	1a24      	subs	r4, r4, r0
 8006b6e:	601c      	str	r4, [r3, #0]
 8006b70:	e7df      	b.n	8006b32 <__d2b+0x6e>
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	08007c9b 	.word	0x08007c9b
 8006b78:	0000030a 	.word	0x0000030a
 8006b7c:	08007cac 	.word	0x08007cac
 8006b80:	fffffbcd 	.word	0xfffffbcd
 8006b84:	fffffbce 	.word	0xfffffbce
 8006b88:	3fffffff 	.word	0x3fffffff

08006b8c <_calloc_r>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	0c13      	lsrs	r3, r2, #16
 8006b90:	0c0d      	lsrs	r5, r1, #16
 8006b92:	d11e      	bne.n	8006bd2 <_calloc_r+0x46>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10c      	bne.n	8006bb2 <_calloc_r+0x26>
 8006b98:	b289      	uxth	r1, r1
 8006b9a:	b294      	uxth	r4, r2
 8006b9c:	434c      	muls	r4, r1
 8006b9e:	0021      	movs	r1, r4
 8006ba0:	f7fe f874 	bl	8004c8c <_malloc_r>
 8006ba4:	1e05      	subs	r5, r0, #0
 8006ba6:	d01b      	beq.n	8006be0 <_calloc_r+0x54>
 8006ba8:	0022      	movs	r2, r4
 8006baa:	2100      	movs	r1, #0
 8006bac:	f7fd fffa 	bl	8004ba4 <memset>
 8006bb0:	e016      	b.n	8006be0 <_calloc_r+0x54>
 8006bb2:	1c1d      	adds	r5, r3, #0
 8006bb4:	1c0b      	adds	r3, r1, #0
 8006bb6:	b292      	uxth	r2, r2
 8006bb8:	b289      	uxth	r1, r1
 8006bba:	b29c      	uxth	r4, r3
 8006bbc:	4351      	muls	r1, r2
 8006bbe:	b2ab      	uxth	r3, r5
 8006bc0:	4363      	muls	r3, r4
 8006bc2:	0c0c      	lsrs	r4, r1, #16
 8006bc4:	191c      	adds	r4, r3, r4
 8006bc6:	0c22      	lsrs	r2, r4, #16
 8006bc8:	d107      	bne.n	8006bda <_calloc_r+0x4e>
 8006bca:	0424      	lsls	r4, r4, #16
 8006bcc:	b289      	uxth	r1, r1
 8006bce:	430c      	orrs	r4, r1
 8006bd0:	e7e5      	b.n	8006b9e <_calloc_r+0x12>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <_calloc_r+0x4e>
 8006bd6:	1c13      	adds	r3, r2, #0
 8006bd8:	e7ed      	b.n	8006bb6 <_calloc_r+0x2a>
 8006bda:	230c      	movs	r3, #12
 8006bdc:	2500      	movs	r5, #0
 8006bde:	6003      	str	r3, [r0, #0]
 8006be0:	0028      	movs	r0, r5
 8006be2:	bd70      	pop	{r4, r5, r6, pc}

08006be4 <__ssputs_r>:
 8006be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be6:	688e      	ldr	r6, [r1, #8]
 8006be8:	b085      	sub	sp, #20
 8006bea:	0007      	movs	r7, r0
 8006bec:	000c      	movs	r4, r1
 8006bee:	9203      	str	r2, [sp, #12]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	429e      	cmp	r6, r3
 8006bf4:	d83c      	bhi.n	8006c70 <__ssputs_r+0x8c>
 8006bf6:	2390      	movs	r3, #144	; 0x90
 8006bf8:	898a      	ldrh	r2, [r1, #12]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	421a      	tst	r2, r3
 8006bfe:	d034      	beq.n	8006c6a <__ssputs_r+0x86>
 8006c00:	6909      	ldr	r1, [r1, #16]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	6960      	ldr	r0, [r4, #20]
 8006c06:	1a5b      	subs	r3, r3, r1
 8006c08:	9302      	str	r3, [sp, #8]
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	4343      	muls	r3, r0
 8006c0e:	0fdd      	lsrs	r5, r3, #31
 8006c10:	18ed      	adds	r5, r5, r3
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	9802      	ldr	r0, [sp, #8]
 8006c16:	3301      	adds	r3, #1
 8006c18:	181b      	adds	r3, r3, r0
 8006c1a:	106d      	asrs	r5, r5, #1
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	d900      	bls.n	8006c22 <__ssputs_r+0x3e>
 8006c20:	001d      	movs	r5, r3
 8006c22:	0553      	lsls	r3, r2, #21
 8006c24:	d532      	bpl.n	8006c8c <__ssputs_r+0xa8>
 8006c26:	0029      	movs	r1, r5
 8006c28:	0038      	movs	r0, r7
 8006c2a:	f7fe f82f 	bl	8004c8c <_malloc_r>
 8006c2e:	1e06      	subs	r6, r0, #0
 8006c30:	d109      	bne.n	8006c46 <__ssputs_r+0x62>
 8006c32:	230c      	movs	r3, #12
 8006c34:	603b      	str	r3, [r7, #0]
 8006c36:	2340      	movs	r3, #64	; 0x40
 8006c38:	2001      	movs	r0, #1
 8006c3a:	89a2      	ldrh	r2, [r4, #12]
 8006c3c:	4240      	negs	r0, r0
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	b005      	add	sp, #20
 8006c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c46:	9a02      	ldr	r2, [sp, #8]
 8006c48:	6921      	ldr	r1, [r4, #16]
 8006c4a:	f7ff fbea 	bl	8006422 <memcpy>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	4a14      	ldr	r2, [pc, #80]	; (8006ca4 <__ssputs_r+0xc0>)
 8006c52:	401a      	ands	r2, r3
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	4313      	orrs	r3, r2
 8006c58:	81a3      	strh	r3, [r4, #12]
 8006c5a:	9b02      	ldr	r3, [sp, #8]
 8006c5c:	6126      	str	r6, [r4, #16]
 8006c5e:	18f6      	adds	r6, r6, r3
 8006c60:	6026      	str	r6, [r4, #0]
 8006c62:	6165      	str	r5, [r4, #20]
 8006c64:	9e01      	ldr	r6, [sp, #4]
 8006c66:	1aed      	subs	r5, r5, r3
 8006c68:	60a5      	str	r5, [r4, #8]
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	429e      	cmp	r6, r3
 8006c6e:	d900      	bls.n	8006c72 <__ssputs_r+0x8e>
 8006c70:	9e01      	ldr	r6, [sp, #4]
 8006c72:	0032      	movs	r2, r6
 8006c74:	9903      	ldr	r1, [sp, #12]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	f000 f959 	bl	8006f2e <memmove>
 8006c7c:	68a3      	ldr	r3, [r4, #8]
 8006c7e:	2000      	movs	r0, #0
 8006c80:	1b9b      	subs	r3, r3, r6
 8006c82:	60a3      	str	r3, [r4, #8]
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	199e      	adds	r6, r3, r6
 8006c88:	6026      	str	r6, [r4, #0]
 8006c8a:	e7da      	b.n	8006c42 <__ssputs_r+0x5e>
 8006c8c:	002a      	movs	r2, r5
 8006c8e:	0038      	movs	r0, r7
 8006c90:	f000 f960 	bl	8006f54 <_realloc_r>
 8006c94:	1e06      	subs	r6, r0, #0
 8006c96:	d1e0      	bne.n	8006c5a <__ssputs_r+0x76>
 8006c98:	0038      	movs	r0, r7
 8006c9a:	6921      	ldr	r1, [r4, #16]
 8006c9c:	f7fd ff8a 	bl	8004bb4 <_free_r>
 8006ca0:	e7c7      	b.n	8006c32 <__ssputs_r+0x4e>
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	fffffb7f 	.word	0xfffffb7f

08006ca8 <_svfiprintf_r>:
 8006ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006caa:	b0a1      	sub	sp, #132	; 0x84
 8006cac:	9003      	str	r0, [sp, #12]
 8006cae:	001d      	movs	r5, r3
 8006cb0:	898b      	ldrh	r3, [r1, #12]
 8006cb2:	000f      	movs	r7, r1
 8006cb4:	0016      	movs	r6, r2
 8006cb6:	061b      	lsls	r3, r3, #24
 8006cb8:	d511      	bpl.n	8006cde <_svfiprintf_r+0x36>
 8006cba:	690b      	ldr	r3, [r1, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10e      	bne.n	8006cde <_svfiprintf_r+0x36>
 8006cc0:	2140      	movs	r1, #64	; 0x40
 8006cc2:	f7fd ffe3 	bl	8004c8c <_malloc_r>
 8006cc6:	6038      	str	r0, [r7, #0]
 8006cc8:	6138      	str	r0, [r7, #16]
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d105      	bne.n	8006cda <_svfiprintf_r+0x32>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	9a03      	ldr	r2, [sp, #12]
 8006cd2:	3801      	subs	r0, #1
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	b021      	add	sp, #132	; 0x84
 8006cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cda:	2340      	movs	r3, #64	; 0x40
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	ac08      	add	r4, sp, #32
 8006ce2:	6163      	str	r3, [r4, #20]
 8006ce4:	3320      	adds	r3, #32
 8006ce6:	7663      	strb	r3, [r4, #25]
 8006ce8:	3310      	adds	r3, #16
 8006cea:	76a3      	strb	r3, [r4, #26]
 8006cec:	9507      	str	r5, [sp, #28]
 8006cee:	0035      	movs	r5, r6
 8006cf0:	782b      	ldrb	r3, [r5, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <_svfiprintf_r+0x52>
 8006cf6:	2b25      	cmp	r3, #37	; 0x25
 8006cf8:	d147      	bne.n	8006d8a <_svfiprintf_r+0xe2>
 8006cfa:	1bab      	subs	r3, r5, r6
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	42b5      	cmp	r5, r6
 8006d00:	d00c      	beq.n	8006d1c <_svfiprintf_r+0x74>
 8006d02:	0032      	movs	r2, r6
 8006d04:	0039      	movs	r1, r7
 8006d06:	9803      	ldr	r0, [sp, #12]
 8006d08:	f7ff ff6c 	bl	8006be4 <__ssputs_r>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d100      	bne.n	8006d12 <_svfiprintf_r+0x6a>
 8006d10:	e0ae      	b.n	8006e70 <_svfiprintf_r+0x1c8>
 8006d12:	6962      	ldr	r2, [r4, #20]
 8006d14:	9b05      	ldr	r3, [sp, #20]
 8006d16:	4694      	mov	ip, r2
 8006d18:	4463      	add	r3, ip
 8006d1a:	6163      	str	r3, [r4, #20]
 8006d1c:	782b      	ldrb	r3, [r5, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d100      	bne.n	8006d24 <_svfiprintf_r+0x7c>
 8006d22:	e0a5      	b.n	8006e70 <_svfiprintf_r+0x1c8>
 8006d24:	2201      	movs	r2, #1
 8006d26:	2300      	movs	r3, #0
 8006d28:	4252      	negs	r2, r2
 8006d2a:	6062      	str	r2, [r4, #4]
 8006d2c:	a904      	add	r1, sp, #16
 8006d2e:	3254      	adds	r2, #84	; 0x54
 8006d30:	1852      	adds	r2, r2, r1
 8006d32:	1c6e      	adds	r6, r5, #1
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	60e3      	str	r3, [r4, #12]
 8006d38:	60a3      	str	r3, [r4, #8]
 8006d3a:	7013      	strb	r3, [r2, #0]
 8006d3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d3e:	2205      	movs	r2, #5
 8006d40:	7831      	ldrb	r1, [r6, #0]
 8006d42:	4854      	ldr	r0, [pc, #336]	; (8006e94 <_svfiprintf_r+0x1ec>)
 8006d44:	f7ff fb62 	bl	800640c <memchr>
 8006d48:	1c75      	adds	r5, r6, #1
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d11f      	bne.n	8006d8e <_svfiprintf_r+0xe6>
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	06d3      	lsls	r3, r2, #27
 8006d52:	d504      	bpl.n	8006d5e <_svfiprintf_r+0xb6>
 8006d54:	2353      	movs	r3, #83	; 0x53
 8006d56:	a904      	add	r1, sp, #16
 8006d58:	185b      	adds	r3, r3, r1
 8006d5a:	2120      	movs	r1, #32
 8006d5c:	7019      	strb	r1, [r3, #0]
 8006d5e:	0713      	lsls	r3, r2, #28
 8006d60:	d504      	bpl.n	8006d6c <_svfiprintf_r+0xc4>
 8006d62:	2353      	movs	r3, #83	; 0x53
 8006d64:	a904      	add	r1, sp, #16
 8006d66:	185b      	adds	r3, r3, r1
 8006d68:	212b      	movs	r1, #43	; 0x2b
 8006d6a:	7019      	strb	r1, [r3, #0]
 8006d6c:	7833      	ldrb	r3, [r6, #0]
 8006d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d70:	d016      	beq.n	8006da0 <_svfiprintf_r+0xf8>
 8006d72:	0035      	movs	r5, r6
 8006d74:	2100      	movs	r1, #0
 8006d76:	200a      	movs	r0, #10
 8006d78:	68e3      	ldr	r3, [r4, #12]
 8006d7a:	782a      	ldrb	r2, [r5, #0]
 8006d7c:	1c6e      	adds	r6, r5, #1
 8006d7e:	3a30      	subs	r2, #48	; 0x30
 8006d80:	2a09      	cmp	r2, #9
 8006d82:	d94e      	bls.n	8006e22 <_svfiprintf_r+0x17a>
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d111      	bne.n	8006dac <_svfiprintf_r+0x104>
 8006d88:	e017      	b.n	8006dba <_svfiprintf_r+0x112>
 8006d8a:	3501      	adds	r5, #1
 8006d8c:	e7b0      	b.n	8006cf0 <_svfiprintf_r+0x48>
 8006d8e:	4b41      	ldr	r3, [pc, #260]	; (8006e94 <_svfiprintf_r+0x1ec>)
 8006d90:	6822      	ldr	r2, [r4, #0]
 8006d92:	1ac0      	subs	r0, r0, r3
 8006d94:	2301      	movs	r3, #1
 8006d96:	4083      	lsls	r3, r0
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	002e      	movs	r6, r5
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	e7ce      	b.n	8006d3e <_svfiprintf_r+0x96>
 8006da0:	9b07      	ldr	r3, [sp, #28]
 8006da2:	1d19      	adds	r1, r3, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	9107      	str	r1, [sp, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	db01      	blt.n	8006db0 <_svfiprintf_r+0x108>
 8006dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dae:	e004      	b.n	8006dba <_svfiprintf_r+0x112>
 8006db0:	425b      	negs	r3, r3
 8006db2:	60e3      	str	r3, [r4, #12]
 8006db4:	2302      	movs	r3, #2
 8006db6:	4313      	orrs	r3, r2
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	782b      	ldrb	r3, [r5, #0]
 8006dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8006dbe:	d10a      	bne.n	8006dd6 <_svfiprintf_r+0x12e>
 8006dc0:	786b      	ldrb	r3, [r5, #1]
 8006dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc4:	d135      	bne.n	8006e32 <_svfiprintf_r+0x18a>
 8006dc6:	9b07      	ldr	r3, [sp, #28]
 8006dc8:	3502      	adds	r5, #2
 8006dca:	1d1a      	adds	r2, r3, #4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	9207      	str	r2, [sp, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	db2b      	blt.n	8006e2c <_svfiprintf_r+0x184>
 8006dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd6:	4e30      	ldr	r6, [pc, #192]	; (8006e98 <_svfiprintf_r+0x1f0>)
 8006dd8:	2203      	movs	r2, #3
 8006dda:	0030      	movs	r0, r6
 8006ddc:	7829      	ldrb	r1, [r5, #0]
 8006dde:	f7ff fb15 	bl	800640c <memchr>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d006      	beq.n	8006df4 <_svfiprintf_r+0x14c>
 8006de6:	2340      	movs	r3, #64	; 0x40
 8006de8:	1b80      	subs	r0, r0, r6
 8006dea:	4083      	lsls	r3, r0
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	3501      	adds	r5, #1
 8006df0:	4313      	orrs	r3, r2
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	7829      	ldrb	r1, [r5, #0]
 8006df6:	2206      	movs	r2, #6
 8006df8:	4828      	ldr	r0, [pc, #160]	; (8006e9c <_svfiprintf_r+0x1f4>)
 8006dfa:	1c6e      	adds	r6, r5, #1
 8006dfc:	7621      	strb	r1, [r4, #24]
 8006dfe:	f7ff fb05 	bl	800640c <memchr>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d03c      	beq.n	8006e80 <_svfiprintf_r+0x1d8>
 8006e06:	4b26      	ldr	r3, [pc, #152]	; (8006ea0 <_svfiprintf_r+0x1f8>)
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d125      	bne.n	8006e58 <_svfiprintf_r+0x1b0>
 8006e0c:	2207      	movs	r2, #7
 8006e0e:	9b07      	ldr	r3, [sp, #28]
 8006e10:	3307      	adds	r3, #7
 8006e12:	4393      	bics	r3, r2
 8006e14:	3308      	adds	r3, #8
 8006e16:	9307      	str	r3, [sp, #28]
 8006e18:	6963      	ldr	r3, [r4, #20]
 8006e1a:	9a04      	ldr	r2, [sp, #16]
 8006e1c:	189b      	adds	r3, r3, r2
 8006e1e:	6163      	str	r3, [r4, #20]
 8006e20:	e765      	b.n	8006cee <_svfiprintf_r+0x46>
 8006e22:	4343      	muls	r3, r0
 8006e24:	0035      	movs	r5, r6
 8006e26:	2101      	movs	r1, #1
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	e7a6      	b.n	8006d7a <_svfiprintf_r+0xd2>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	425b      	negs	r3, r3
 8006e30:	e7d0      	b.n	8006dd4 <_svfiprintf_r+0x12c>
 8006e32:	2300      	movs	r3, #0
 8006e34:	200a      	movs	r0, #10
 8006e36:	001a      	movs	r2, r3
 8006e38:	3501      	adds	r5, #1
 8006e3a:	6063      	str	r3, [r4, #4]
 8006e3c:	7829      	ldrb	r1, [r5, #0]
 8006e3e:	1c6e      	adds	r6, r5, #1
 8006e40:	3930      	subs	r1, #48	; 0x30
 8006e42:	2909      	cmp	r1, #9
 8006e44:	d903      	bls.n	8006e4e <_svfiprintf_r+0x1a6>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0c5      	beq.n	8006dd6 <_svfiprintf_r+0x12e>
 8006e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e4c:	e7c3      	b.n	8006dd6 <_svfiprintf_r+0x12e>
 8006e4e:	4342      	muls	r2, r0
 8006e50:	0035      	movs	r5, r6
 8006e52:	2301      	movs	r3, #1
 8006e54:	1852      	adds	r2, r2, r1
 8006e56:	e7f1      	b.n	8006e3c <_svfiprintf_r+0x194>
 8006e58:	ab07      	add	r3, sp, #28
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	003a      	movs	r2, r7
 8006e5e:	0021      	movs	r1, r4
 8006e60:	4b10      	ldr	r3, [pc, #64]	; (8006ea4 <_svfiprintf_r+0x1fc>)
 8006e62:	9803      	ldr	r0, [sp, #12]
 8006e64:	f7fe f832 	bl	8004ecc <_printf_float>
 8006e68:	9004      	str	r0, [sp, #16]
 8006e6a:	9b04      	ldr	r3, [sp, #16]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	d1d3      	bne.n	8006e18 <_svfiprintf_r+0x170>
 8006e70:	89bb      	ldrh	r3, [r7, #12]
 8006e72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e74:	065b      	lsls	r3, r3, #25
 8006e76:	d400      	bmi.n	8006e7a <_svfiprintf_r+0x1d2>
 8006e78:	e72d      	b.n	8006cd6 <_svfiprintf_r+0x2e>
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	4240      	negs	r0, r0
 8006e7e:	e72a      	b.n	8006cd6 <_svfiprintf_r+0x2e>
 8006e80:	ab07      	add	r3, sp, #28
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	003a      	movs	r2, r7
 8006e86:	0021      	movs	r1, r4
 8006e88:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <_svfiprintf_r+0x1fc>)
 8006e8a:	9803      	ldr	r0, [sp, #12]
 8006e8c:	f7fe fad0 	bl	8005430 <_printf_i>
 8006e90:	e7ea      	b.n	8006e68 <_svfiprintf_r+0x1c0>
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	08007e04 	.word	0x08007e04
 8006e98:	08007e0a 	.word	0x08007e0a
 8006e9c:	08007e0e 	.word	0x08007e0e
 8006ea0:	08004ecd 	.word	0x08004ecd
 8006ea4:	08006be5 	.word	0x08006be5

08006ea8 <__assert_func>:
 8006ea8:	b530      	push	{r4, r5, lr}
 8006eaa:	0014      	movs	r4, r2
 8006eac:	001a      	movs	r2, r3
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <__assert_func+0x2c>)
 8006eb0:	0005      	movs	r5, r0
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	68d8      	ldr	r0, [r3, #12]
 8006eb8:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <__assert_func+0x30>)
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	d101      	bne.n	8006ec2 <__assert_func+0x1a>
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <__assert_func+0x34>)
 8006ec0:	001c      	movs	r4, r3
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	9100      	str	r1, [sp, #0]
 8006ec6:	002b      	movs	r3, r5
 8006ec8:	4905      	ldr	r1, [pc, #20]	; (8006ee0 <__assert_func+0x38>)
 8006eca:	9402      	str	r4, [sp, #8]
 8006ecc:	f000 f80a 	bl	8006ee4 <fiprintf>
 8006ed0:	f000 faac 	bl	800742c <abort>
 8006ed4:	2000000c 	.word	0x2000000c
 8006ed8:	08007e15 	.word	0x08007e15
 8006edc:	08007e50 	.word	0x08007e50
 8006ee0:	08007e22 	.word	0x08007e22

08006ee4 <fiprintf>:
 8006ee4:	b40e      	push	{r1, r2, r3}
 8006ee6:	b503      	push	{r0, r1, lr}
 8006ee8:	0001      	movs	r1, r0
 8006eea:	ab03      	add	r3, sp, #12
 8006eec:	4804      	ldr	r0, [pc, #16]	; (8006f00 <fiprintf+0x1c>)
 8006eee:	cb04      	ldmia	r3!, {r2}
 8006ef0:	6800      	ldr	r0, [r0, #0]
 8006ef2:	9301      	str	r3, [sp, #4]
 8006ef4:	f000 f884 	bl	8007000 <_vfiprintf_r>
 8006ef8:	b002      	add	sp, #8
 8006efa:	bc08      	pop	{r3}
 8006efc:	b003      	add	sp, #12
 8006efe:	4718      	bx	r3
 8006f00:	2000000c 	.word	0x2000000c

08006f04 <__retarget_lock_init_recursive>:
 8006f04:	4770      	bx	lr

08006f06 <__retarget_lock_acquire_recursive>:
 8006f06:	4770      	bx	lr

08006f08 <__retarget_lock_release_recursive>:
 8006f08:	4770      	bx	lr

08006f0a <__ascii_mbtowc>:
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	d100      	bne.n	8006f12 <__ascii_mbtowc+0x8>
 8006f10:	a901      	add	r1, sp, #4
 8006f12:	1e10      	subs	r0, r2, #0
 8006f14:	d006      	beq.n	8006f24 <__ascii_mbtowc+0x1a>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d006      	beq.n	8006f28 <__ascii_mbtowc+0x1e>
 8006f1a:	7813      	ldrb	r3, [r2, #0]
 8006f1c:	600b      	str	r3, [r1, #0]
 8006f1e:	7810      	ldrb	r0, [r2, #0]
 8006f20:	1e43      	subs	r3, r0, #1
 8006f22:	4198      	sbcs	r0, r3
 8006f24:	b002      	add	sp, #8
 8006f26:	4770      	bx	lr
 8006f28:	2002      	movs	r0, #2
 8006f2a:	4240      	negs	r0, r0
 8006f2c:	e7fa      	b.n	8006f24 <__ascii_mbtowc+0x1a>

08006f2e <memmove>:
 8006f2e:	b510      	push	{r4, lr}
 8006f30:	4288      	cmp	r0, r1
 8006f32:	d902      	bls.n	8006f3a <memmove+0xc>
 8006f34:	188b      	adds	r3, r1, r2
 8006f36:	4298      	cmp	r0, r3
 8006f38:	d303      	bcc.n	8006f42 <memmove+0x14>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e007      	b.n	8006f4e <memmove+0x20>
 8006f3e:	5c8b      	ldrb	r3, [r1, r2]
 8006f40:	5483      	strb	r3, [r0, r2]
 8006f42:	3a01      	subs	r2, #1
 8006f44:	d2fb      	bcs.n	8006f3e <memmove+0x10>
 8006f46:	bd10      	pop	{r4, pc}
 8006f48:	5ccc      	ldrb	r4, [r1, r3]
 8006f4a:	54c4      	strb	r4, [r0, r3]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d1fa      	bne.n	8006f48 <memmove+0x1a>
 8006f52:	e7f8      	b.n	8006f46 <memmove+0x18>

08006f54 <_realloc_r>:
 8006f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f56:	0007      	movs	r7, r0
 8006f58:	000e      	movs	r6, r1
 8006f5a:	0014      	movs	r4, r2
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	d105      	bne.n	8006f6c <_realloc_r+0x18>
 8006f60:	0011      	movs	r1, r2
 8006f62:	f7fd fe93 	bl	8004c8c <_malloc_r>
 8006f66:	0005      	movs	r5, r0
 8006f68:	0028      	movs	r0, r5
 8006f6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	d103      	bne.n	8006f78 <_realloc_r+0x24>
 8006f70:	f7fd fe20 	bl	8004bb4 <_free_r>
 8006f74:	0025      	movs	r5, r4
 8006f76:	e7f7      	b.n	8006f68 <_realloc_r+0x14>
 8006f78:	f000 fc9a 	bl	80078b0 <_malloc_usable_size_r>
 8006f7c:	9001      	str	r0, [sp, #4]
 8006f7e:	4284      	cmp	r4, r0
 8006f80:	d803      	bhi.n	8006f8a <_realloc_r+0x36>
 8006f82:	0035      	movs	r5, r6
 8006f84:	0843      	lsrs	r3, r0, #1
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	d3ee      	bcc.n	8006f68 <_realloc_r+0x14>
 8006f8a:	0021      	movs	r1, r4
 8006f8c:	0038      	movs	r0, r7
 8006f8e:	f7fd fe7d 	bl	8004c8c <_malloc_r>
 8006f92:	1e05      	subs	r5, r0, #0
 8006f94:	d0e8      	beq.n	8006f68 <_realloc_r+0x14>
 8006f96:	9b01      	ldr	r3, [sp, #4]
 8006f98:	0022      	movs	r2, r4
 8006f9a:	429c      	cmp	r4, r3
 8006f9c:	d900      	bls.n	8006fa0 <_realloc_r+0x4c>
 8006f9e:	001a      	movs	r2, r3
 8006fa0:	0031      	movs	r1, r6
 8006fa2:	0028      	movs	r0, r5
 8006fa4:	f7ff fa3d 	bl	8006422 <memcpy>
 8006fa8:	0031      	movs	r1, r6
 8006faa:	0038      	movs	r0, r7
 8006fac:	f7fd fe02 	bl	8004bb4 <_free_r>
 8006fb0:	e7da      	b.n	8006f68 <_realloc_r+0x14>

08006fb2 <__sfputc_r>:
 8006fb2:	6893      	ldr	r3, [r2, #8]
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	6093      	str	r3, [r2, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da04      	bge.n	8006fc8 <__sfputc_r+0x16>
 8006fbe:	6994      	ldr	r4, [r2, #24]
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	db07      	blt.n	8006fd4 <__sfputc_r+0x22>
 8006fc4:	290a      	cmp	r1, #10
 8006fc6:	d005      	beq.n	8006fd4 <__sfputc_r+0x22>
 8006fc8:	6813      	ldr	r3, [r2, #0]
 8006fca:	1c58      	adds	r0, r3, #1
 8006fcc:	6010      	str	r0, [r2, #0]
 8006fce:	7019      	strb	r1, [r3, #0]
 8006fd0:	0008      	movs	r0, r1
 8006fd2:	bd10      	pop	{r4, pc}
 8006fd4:	f000 f94e 	bl	8007274 <__swbuf_r>
 8006fd8:	0001      	movs	r1, r0
 8006fda:	e7f9      	b.n	8006fd0 <__sfputc_r+0x1e>

08006fdc <__sfputs_r>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	0006      	movs	r6, r0
 8006fe0:	000f      	movs	r7, r1
 8006fe2:	0014      	movs	r4, r2
 8006fe4:	18d5      	adds	r5, r2, r3
 8006fe6:	42ac      	cmp	r4, r5
 8006fe8:	d101      	bne.n	8006fee <__sfputs_r+0x12>
 8006fea:	2000      	movs	r0, #0
 8006fec:	e007      	b.n	8006ffe <__sfputs_r+0x22>
 8006fee:	7821      	ldrb	r1, [r4, #0]
 8006ff0:	003a      	movs	r2, r7
 8006ff2:	0030      	movs	r0, r6
 8006ff4:	f7ff ffdd 	bl	8006fb2 <__sfputc_r>
 8006ff8:	3401      	adds	r4, #1
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d1f3      	bne.n	8006fe6 <__sfputs_r+0xa>
 8006ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007000 <_vfiprintf_r>:
 8007000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007002:	b0a1      	sub	sp, #132	; 0x84
 8007004:	0006      	movs	r6, r0
 8007006:	000c      	movs	r4, r1
 8007008:	001f      	movs	r7, r3
 800700a:	9203      	str	r2, [sp, #12]
 800700c:	2800      	cmp	r0, #0
 800700e:	d004      	beq.n	800701a <_vfiprintf_r+0x1a>
 8007010:	6983      	ldr	r3, [r0, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <_vfiprintf_r+0x1a>
 8007016:	f000 fb3f 	bl	8007698 <__sinit>
 800701a:	4b8e      	ldr	r3, [pc, #568]	; (8007254 <_vfiprintf_r+0x254>)
 800701c:	429c      	cmp	r4, r3
 800701e:	d11c      	bne.n	800705a <_vfiprintf_r+0x5a>
 8007020:	6874      	ldr	r4, [r6, #4]
 8007022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007024:	07db      	lsls	r3, r3, #31
 8007026:	d405      	bmi.n	8007034 <_vfiprintf_r+0x34>
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	059b      	lsls	r3, r3, #22
 800702c:	d402      	bmi.n	8007034 <_vfiprintf_r+0x34>
 800702e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007030:	f7ff ff69 	bl	8006f06 <__retarget_lock_acquire_recursive>
 8007034:	89a3      	ldrh	r3, [r4, #12]
 8007036:	071b      	lsls	r3, r3, #28
 8007038:	d502      	bpl.n	8007040 <_vfiprintf_r+0x40>
 800703a:	6923      	ldr	r3, [r4, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d11d      	bne.n	800707c <_vfiprintf_r+0x7c>
 8007040:	0021      	movs	r1, r4
 8007042:	0030      	movs	r0, r6
 8007044:	f000 f97a 	bl	800733c <__swsetup_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	d017      	beq.n	800707c <_vfiprintf_r+0x7c>
 800704c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800704e:	07db      	lsls	r3, r3, #31
 8007050:	d50d      	bpl.n	800706e <_vfiprintf_r+0x6e>
 8007052:	2001      	movs	r0, #1
 8007054:	4240      	negs	r0, r0
 8007056:	b021      	add	sp, #132	; 0x84
 8007058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705a:	4b7f      	ldr	r3, [pc, #508]	; (8007258 <_vfiprintf_r+0x258>)
 800705c:	429c      	cmp	r4, r3
 800705e:	d101      	bne.n	8007064 <_vfiprintf_r+0x64>
 8007060:	68b4      	ldr	r4, [r6, #8]
 8007062:	e7de      	b.n	8007022 <_vfiprintf_r+0x22>
 8007064:	4b7d      	ldr	r3, [pc, #500]	; (800725c <_vfiprintf_r+0x25c>)
 8007066:	429c      	cmp	r4, r3
 8007068:	d1db      	bne.n	8007022 <_vfiprintf_r+0x22>
 800706a:	68f4      	ldr	r4, [r6, #12]
 800706c:	e7d9      	b.n	8007022 <_vfiprintf_r+0x22>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	059b      	lsls	r3, r3, #22
 8007072:	d4ee      	bmi.n	8007052 <_vfiprintf_r+0x52>
 8007074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007076:	f7ff ff47 	bl	8006f08 <__retarget_lock_release_recursive>
 800707a:	e7ea      	b.n	8007052 <_vfiprintf_r+0x52>
 800707c:	2300      	movs	r3, #0
 800707e:	ad08      	add	r5, sp, #32
 8007080:	616b      	str	r3, [r5, #20]
 8007082:	3320      	adds	r3, #32
 8007084:	766b      	strb	r3, [r5, #25]
 8007086:	3310      	adds	r3, #16
 8007088:	76ab      	strb	r3, [r5, #26]
 800708a:	9707      	str	r7, [sp, #28]
 800708c:	9f03      	ldr	r7, [sp, #12]
 800708e:	783b      	ldrb	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <_vfiprintf_r+0x98>
 8007094:	2b25      	cmp	r3, #37	; 0x25
 8007096:	d14e      	bne.n	8007136 <_vfiprintf_r+0x136>
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	1afb      	subs	r3, r7, r3
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	429f      	cmp	r7, r3
 80070a2:	d00d      	beq.n	80070c0 <_vfiprintf_r+0xc0>
 80070a4:	9b05      	ldr	r3, [sp, #20]
 80070a6:	0021      	movs	r1, r4
 80070a8:	0030      	movs	r0, r6
 80070aa:	9a03      	ldr	r2, [sp, #12]
 80070ac:	f7ff ff96 	bl	8006fdc <__sfputs_r>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d100      	bne.n	80070b6 <_vfiprintf_r+0xb6>
 80070b4:	e0b5      	b.n	8007222 <_vfiprintf_r+0x222>
 80070b6:	696a      	ldr	r2, [r5, #20]
 80070b8:	9b05      	ldr	r3, [sp, #20]
 80070ba:	4694      	mov	ip, r2
 80070bc:	4463      	add	r3, ip
 80070be:	616b      	str	r3, [r5, #20]
 80070c0:	783b      	ldrb	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d100      	bne.n	80070c8 <_vfiprintf_r+0xc8>
 80070c6:	e0ac      	b.n	8007222 <_vfiprintf_r+0x222>
 80070c8:	2201      	movs	r2, #1
 80070ca:	1c7b      	adds	r3, r7, #1
 80070cc:	9303      	str	r3, [sp, #12]
 80070ce:	2300      	movs	r3, #0
 80070d0:	4252      	negs	r2, r2
 80070d2:	606a      	str	r2, [r5, #4]
 80070d4:	a904      	add	r1, sp, #16
 80070d6:	3254      	adds	r2, #84	; 0x54
 80070d8:	1852      	adds	r2, r2, r1
 80070da:	602b      	str	r3, [r5, #0]
 80070dc:	60eb      	str	r3, [r5, #12]
 80070de:	60ab      	str	r3, [r5, #8]
 80070e0:	7013      	strb	r3, [r2, #0]
 80070e2:	65ab      	str	r3, [r5, #88]	; 0x58
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	2205      	movs	r2, #5
 80070e8:	7819      	ldrb	r1, [r3, #0]
 80070ea:	485d      	ldr	r0, [pc, #372]	; (8007260 <_vfiprintf_r+0x260>)
 80070ec:	f7ff f98e 	bl	800640c <memchr>
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	1c5f      	adds	r7, r3, #1
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d120      	bne.n	800713a <_vfiprintf_r+0x13a>
 80070f8:	682a      	ldr	r2, [r5, #0]
 80070fa:	06d3      	lsls	r3, r2, #27
 80070fc:	d504      	bpl.n	8007108 <_vfiprintf_r+0x108>
 80070fe:	2353      	movs	r3, #83	; 0x53
 8007100:	a904      	add	r1, sp, #16
 8007102:	185b      	adds	r3, r3, r1
 8007104:	2120      	movs	r1, #32
 8007106:	7019      	strb	r1, [r3, #0]
 8007108:	0713      	lsls	r3, r2, #28
 800710a:	d504      	bpl.n	8007116 <_vfiprintf_r+0x116>
 800710c:	2353      	movs	r3, #83	; 0x53
 800710e:	a904      	add	r1, sp, #16
 8007110:	185b      	adds	r3, r3, r1
 8007112:	212b      	movs	r1, #43	; 0x2b
 8007114:	7019      	strb	r1, [r3, #0]
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b2a      	cmp	r3, #42	; 0x2a
 800711c:	d016      	beq.n	800714c <_vfiprintf_r+0x14c>
 800711e:	2100      	movs	r1, #0
 8007120:	68eb      	ldr	r3, [r5, #12]
 8007122:	9f03      	ldr	r7, [sp, #12]
 8007124:	783a      	ldrb	r2, [r7, #0]
 8007126:	1c78      	adds	r0, r7, #1
 8007128:	3a30      	subs	r2, #48	; 0x30
 800712a:	4684      	mov	ip, r0
 800712c:	2a09      	cmp	r2, #9
 800712e:	d94f      	bls.n	80071d0 <_vfiprintf_r+0x1d0>
 8007130:	2900      	cmp	r1, #0
 8007132:	d111      	bne.n	8007158 <_vfiprintf_r+0x158>
 8007134:	e017      	b.n	8007166 <_vfiprintf_r+0x166>
 8007136:	3701      	adds	r7, #1
 8007138:	e7a9      	b.n	800708e <_vfiprintf_r+0x8e>
 800713a:	4b49      	ldr	r3, [pc, #292]	; (8007260 <_vfiprintf_r+0x260>)
 800713c:	682a      	ldr	r2, [r5, #0]
 800713e:	1ac0      	subs	r0, r0, r3
 8007140:	2301      	movs	r3, #1
 8007142:	4083      	lsls	r3, r0
 8007144:	4313      	orrs	r3, r2
 8007146:	602b      	str	r3, [r5, #0]
 8007148:	9703      	str	r7, [sp, #12]
 800714a:	e7cb      	b.n	80070e4 <_vfiprintf_r+0xe4>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	1d19      	adds	r1, r3, #4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	9107      	str	r1, [sp, #28]
 8007154:	2b00      	cmp	r3, #0
 8007156:	db01      	blt.n	800715c <_vfiprintf_r+0x15c>
 8007158:	930b      	str	r3, [sp, #44]	; 0x2c
 800715a:	e004      	b.n	8007166 <_vfiprintf_r+0x166>
 800715c:	425b      	negs	r3, r3
 800715e:	60eb      	str	r3, [r5, #12]
 8007160:	2302      	movs	r3, #2
 8007162:	4313      	orrs	r3, r2
 8007164:	602b      	str	r3, [r5, #0]
 8007166:	783b      	ldrb	r3, [r7, #0]
 8007168:	2b2e      	cmp	r3, #46	; 0x2e
 800716a:	d10a      	bne.n	8007182 <_vfiprintf_r+0x182>
 800716c:	787b      	ldrb	r3, [r7, #1]
 800716e:	2b2a      	cmp	r3, #42	; 0x2a
 8007170:	d137      	bne.n	80071e2 <_vfiprintf_r+0x1e2>
 8007172:	9b07      	ldr	r3, [sp, #28]
 8007174:	3702      	adds	r7, #2
 8007176:	1d1a      	adds	r2, r3, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	9207      	str	r2, [sp, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	db2d      	blt.n	80071dc <_vfiprintf_r+0x1dc>
 8007180:	9309      	str	r3, [sp, #36]	; 0x24
 8007182:	2203      	movs	r2, #3
 8007184:	7839      	ldrb	r1, [r7, #0]
 8007186:	4837      	ldr	r0, [pc, #220]	; (8007264 <_vfiprintf_r+0x264>)
 8007188:	f7ff f940 	bl	800640c <memchr>
 800718c:	2800      	cmp	r0, #0
 800718e:	d007      	beq.n	80071a0 <_vfiprintf_r+0x1a0>
 8007190:	4b34      	ldr	r3, [pc, #208]	; (8007264 <_vfiprintf_r+0x264>)
 8007192:	682a      	ldr	r2, [r5, #0]
 8007194:	1ac0      	subs	r0, r0, r3
 8007196:	2340      	movs	r3, #64	; 0x40
 8007198:	4083      	lsls	r3, r0
 800719a:	4313      	orrs	r3, r2
 800719c:	3701      	adds	r7, #1
 800719e:	602b      	str	r3, [r5, #0]
 80071a0:	7839      	ldrb	r1, [r7, #0]
 80071a2:	1c7b      	adds	r3, r7, #1
 80071a4:	2206      	movs	r2, #6
 80071a6:	4830      	ldr	r0, [pc, #192]	; (8007268 <_vfiprintf_r+0x268>)
 80071a8:	9303      	str	r3, [sp, #12]
 80071aa:	7629      	strb	r1, [r5, #24]
 80071ac:	f7ff f92e 	bl	800640c <memchr>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d045      	beq.n	8007240 <_vfiprintf_r+0x240>
 80071b4:	4b2d      	ldr	r3, [pc, #180]	; (800726c <_vfiprintf_r+0x26c>)
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d127      	bne.n	800720a <_vfiprintf_r+0x20a>
 80071ba:	2207      	movs	r2, #7
 80071bc:	9b07      	ldr	r3, [sp, #28]
 80071be:	3307      	adds	r3, #7
 80071c0:	4393      	bics	r3, r2
 80071c2:	3308      	adds	r3, #8
 80071c4:	9307      	str	r3, [sp, #28]
 80071c6:	696b      	ldr	r3, [r5, #20]
 80071c8:	9a04      	ldr	r2, [sp, #16]
 80071ca:	189b      	adds	r3, r3, r2
 80071cc:	616b      	str	r3, [r5, #20]
 80071ce:	e75d      	b.n	800708c <_vfiprintf_r+0x8c>
 80071d0:	210a      	movs	r1, #10
 80071d2:	434b      	muls	r3, r1
 80071d4:	4667      	mov	r7, ip
 80071d6:	189b      	adds	r3, r3, r2
 80071d8:	3909      	subs	r1, #9
 80071da:	e7a3      	b.n	8007124 <_vfiprintf_r+0x124>
 80071dc:	2301      	movs	r3, #1
 80071de:	425b      	negs	r3, r3
 80071e0:	e7ce      	b.n	8007180 <_vfiprintf_r+0x180>
 80071e2:	2300      	movs	r3, #0
 80071e4:	001a      	movs	r2, r3
 80071e6:	3701      	adds	r7, #1
 80071e8:	606b      	str	r3, [r5, #4]
 80071ea:	7839      	ldrb	r1, [r7, #0]
 80071ec:	1c78      	adds	r0, r7, #1
 80071ee:	3930      	subs	r1, #48	; 0x30
 80071f0:	4684      	mov	ip, r0
 80071f2:	2909      	cmp	r1, #9
 80071f4:	d903      	bls.n	80071fe <_vfiprintf_r+0x1fe>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0c3      	beq.n	8007182 <_vfiprintf_r+0x182>
 80071fa:	9209      	str	r2, [sp, #36]	; 0x24
 80071fc:	e7c1      	b.n	8007182 <_vfiprintf_r+0x182>
 80071fe:	230a      	movs	r3, #10
 8007200:	435a      	muls	r2, r3
 8007202:	4667      	mov	r7, ip
 8007204:	1852      	adds	r2, r2, r1
 8007206:	3b09      	subs	r3, #9
 8007208:	e7ef      	b.n	80071ea <_vfiprintf_r+0x1ea>
 800720a:	ab07      	add	r3, sp, #28
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	0022      	movs	r2, r4
 8007210:	0029      	movs	r1, r5
 8007212:	0030      	movs	r0, r6
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <_vfiprintf_r+0x270>)
 8007216:	f7fd fe59 	bl	8004ecc <_printf_float>
 800721a:	9004      	str	r0, [sp, #16]
 800721c:	9b04      	ldr	r3, [sp, #16]
 800721e:	3301      	adds	r3, #1
 8007220:	d1d1      	bne.n	80071c6 <_vfiprintf_r+0x1c6>
 8007222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007224:	07db      	lsls	r3, r3, #31
 8007226:	d405      	bmi.n	8007234 <_vfiprintf_r+0x234>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	059b      	lsls	r3, r3, #22
 800722c:	d402      	bmi.n	8007234 <_vfiprintf_r+0x234>
 800722e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007230:	f7ff fe6a 	bl	8006f08 <__retarget_lock_release_recursive>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	065b      	lsls	r3, r3, #25
 8007238:	d500      	bpl.n	800723c <_vfiprintf_r+0x23c>
 800723a:	e70a      	b.n	8007052 <_vfiprintf_r+0x52>
 800723c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800723e:	e70a      	b.n	8007056 <_vfiprintf_r+0x56>
 8007240:	ab07      	add	r3, sp, #28
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	0022      	movs	r2, r4
 8007246:	0029      	movs	r1, r5
 8007248:	0030      	movs	r0, r6
 800724a:	4b09      	ldr	r3, [pc, #36]	; (8007270 <_vfiprintf_r+0x270>)
 800724c:	f7fe f8f0 	bl	8005430 <_printf_i>
 8007250:	e7e3      	b.n	800721a <_vfiprintf_r+0x21a>
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	08007f7c 	.word	0x08007f7c
 8007258:	08007f9c 	.word	0x08007f9c
 800725c:	08007f5c 	.word	0x08007f5c
 8007260:	08007e04 	.word	0x08007e04
 8007264:	08007e0a 	.word	0x08007e0a
 8007268:	08007e0e 	.word	0x08007e0e
 800726c:	08004ecd 	.word	0x08004ecd
 8007270:	08006fdd 	.word	0x08006fdd

08007274 <__swbuf_r>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	0005      	movs	r5, r0
 8007278:	000e      	movs	r6, r1
 800727a:	0014      	movs	r4, r2
 800727c:	2800      	cmp	r0, #0
 800727e:	d004      	beq.n	800728a <__swbuf_r+0x16>
 8007280:	6983      	ldr	r3, [r0, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <__swbuf_r+0x16>
 8007286:	f000 fa07 	bl	8007698 <__sinit>
 800728a:	4b22      	ldr	r3, [pc, #136]	; (8007314 <__swbuf_r+0xa0>)
 800728c:	429c      	cmp	r4, r3
 800728e:	d12e      	bne.n	80072ee <__swbuf_r+0x7a>
 8007290:	686c      	ldr	r4, [r5, #4]
 8007292:	69a3      	ldr	r3, [r4, #24]
 8007294:	60a3      	str	r3, [r4, #8]
 8007296:	89a3      	ldrh	r3, [r4, #12]
 8007298:	071b      	lsls	r3, r3, #28
 800729a:	d532      	bpl.n	8007302 <__swbuf_r+0x8e>
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d02f      	beq.n	8007302 <__swbuf_r+0x8e>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	6922      	ldr	r2, [r4, #16]
 80072a6:	b2f7      	uxtb	r7, r6
 80072a8:	1a98      	subs	r0, r3, r2
 80072aa:	6963      	ldr	r3, [r4, #20]
 80072ac:	b2f6      	uxtb	r6, r6
 80072ae:	4283      	cmp	r3, r0
 80072b0:	dc05      	bgt.n	80072be <__swbuf_r+0x4a>
 80072b2:	0021      	movs	r1, r4
 80072b4:	0028      	movs	r0, r5
 80072b6:	f000 f94d 	bl	8007554 <_fflush_r>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d127      	bne.n	800730e <__swbuf_r+0x9a>
 80072be:	68a3      	ldr	r3, [r4, #8]
 80072c0:	3001      	adds	r0, #1
 80072c2:	3b01      	subs	r3, #1
 80072c4:	60a3      	str	r3, [r4, #8]
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	6022      	str	r2, [r4, #0]
 80072cc:	701f      	strb	r7, [r3, #0]
 80072ce:	6963      	ldr	r3, [r4, #20]
 80072d0:	4283      	cmp	r3, r0
 80072d2:	d004      	beq.n	80072de <__swbuf_r+0x6a>
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	07db      	lsls	r3, r3, #31
 80072d8:	d507      	bpl.n	80072ea <__swbuf_r+0x76>
 80072da:	2e0a      	cmp	r6, #10
 80072dc:	d105      	bne.n	80072ea <__swbuf_r+0x76>
 80072de:	0021      	movs	r1, r4
 80072e0:	0028      	movs	r0, r5
 80072e2:	f000 f937 	bl	8007554 <_fflush_r>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d111      	bne.n	800730e <__swbuf_r+0x9a>
 80072ea:	0030      	movs	r0, r6
 80072ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ee:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <__swbuf_r+0xa4>)
 80072f0:	429c      	cmp	r4, r3
 80072f2:	d101      	bne.n	80072f8 <__swbuf_r+0x84>
 80072f4:	68ac      	ldr	r4, [r5, #8]
 80072f6:	e7cc      	b.n	8007292 <__swbuf_r+0x1e>
 80072f8:	4b08      	ldr	r3, [pc, #32]	; (800731c <__swbuf_r+0xa8>)
 80072fa:	429c      	cmp	r4, r3
 80072fc:	d1c9      	bne.n	8007292 <__swbuf_r+0x1e>
 80072fe:	68ec      	ldr	r4, [r5, #12]
 8007300:	e7c7      	b.n	8007292 <__swbuf_r+0x1e>
 8007302:	0021      	movs	r1, r4
 8007304:	0028      	movs	r0, r5
 8007306:	f000 f819 	bl	800733c <__swsetup_r>
 800730a:	2800      	cmp	r0, #0
 800730c:	d0c9      	beq.n	80072a2 <__swbuf_r+0x2e>
 800730e:	2601      	movs	r6, #1
 8007310:	4276      	negs	r6, r6
 8007312:	e7ea      	b.n	80072ea <__swbuf_r+0x76>
 8007314:	08007f7c 	.word	0x08007f7c
 8007318:	08007f9c 	.word	0x08007f9c
 800731c:	08007f5c 	.word	0x08007f5c

08007320 <__ascii_wctomb>:
 8007320:	0003      	movs	r3, r0
 8007322:	1e08      	subs	r0, r1, #0
 8007324:	d005      	beq.n	8007332 <__ascii_wctomb+0x12>
 8007326:	2aff      	cmp	r2, #255	; 0xff
 8007328:	d904      	bls.n	8007334 <__ascii_wctomb+0x14>
 800732a:	228a      	movs	r2, #138	; 0x8a
 800732c:	2001      	movs	r0, #1
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	4240      	negs	r0, r0
 8007332:	4770      	bx	lr
 8007334:	2001      	movs	r0, #1
 8007336:	700a      	strb	r2, [r1, #0]
 8007338:	e7fb      	b.n	8007332 <__ascii_wctomb+0x12>
	...

0800733c <__swsetup_r>:
 800733c:	4b37      	ldr	r3, [pc, #220]	; (800741c <__swsetup_r+0xe0>)
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	681d      	ldr	r5, [r3, #0]
 8007342:	0006      	movs	r6, r0
 8007344:	000c      	movs	r4, r1
 8007346:	2d00      	cmp	r5, #0
 8007348:	d005      	beq.n	8007356 <__swsetup_r+0x1a>
 800734a:	69ab      	ldr	r3, [r5, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <__swsetup_r+0x1a>
 8007350:	0028      	movs	r0, r5
 8007352:	f000 f9a1 	bl	8007698 <__sinit>
 8007356:	4b32      	ldr	r3, [pc, #200]	; (8007420 <__swsetup_r+0xe4>)
 8007358:	429c      	cmp	r4, r3
 800735a:	d10f      	bne.n	800737c <__swsetup_r+0x40>
 800735c:	686c      	ldr	r4, [r5, #4]
 800735e:	230c      	movs	r3, #12
 8007360:	5ee2      	ldrsh	r2, [r4, r3]
 8007362:	b293      	uxth	r3, r2
 8007364:	0711      	lsls	r1, r2, #28
 8007366:	d42d      	bmi.n	80073c4 <__swsetup_r+0x88>
 8007368:	06d9      	lsls	r1, r3, #27
 800736a:	d411      	bmi.n	8007390 <__swsetup_r+0x54>
 800736c:	2309      	movs	r3, #9
 800736e:	2001      	movs	r0, #1
 8007370:	6033      	str	r3, [r6, #0]
 8007372:	3337      	adds	r3, #55	; 0x37
 8007374:	4313      	orrs	r3, r2
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	4240      	negs	r0, r0
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	4b29      	ldr	r3, [pc, #164]	; (8007424 <__swsetup_r+0xe8>)
 800737e:	429c      	cmp	r4, r3
 8007380:	d101      	bne.n	8007386 <__swsetup_r+0x4a>
 8007382:	68ac      	ldr	r4, [r5, #8]
 8007384:	e7eb      	b.n	800735e <__swsetup_r+0x22>
 8007386:	4b28      	ldr	r3, [pc, #160]	; (8007428 <__swsetup_r+0xec>)
 8007388:	429c      	cmp	r4, r3
 800738a:	d1e8      	bne.n	800735e <__swsetup_r+0x22>
 800738c:	68ec      	ldr	r4, [r5, #12]
 800738e:	e7e6      	b.n	800735e <__swsetup_r+0x22>
 8007390:	075b      	lsls	r3, r3, #29
 8007392:	d513      	bpl.n	80073bc <__swsetup_r+0x80>
 8007394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007396:	2900      	cmp	r1, #0
 8007398:	d008      	beq.n	80073ac <__swsetup_r+0x70>
 800739a:	0023      	movs	r3, r4
 800739c:	3344      	adds	r3, #68	; 0x44
 800739e:	4299      	cmp	r1, r3
 80073a0:	d002      	beq.n	80073a8 <__swsetup_r+0x6c>
 80073a2:	0030      	movs	r0, r6
 80073a4:	f7fd fc06 	bl	8004bb4 <_free_r>
 80073a8:	2300      	movs	r3, #0
 80073aa:	6363      	str	r3, [r4, #52]	; 0x34
 80073ac:	2224      	movs	r2, #36	; 0x24
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	4393      	bics	r3, r2
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	2300      	movs	r3, #0
 80073b6:	6063      	str	r3, [r4, #4]
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	6023      	str	r3, [r4, #0]
 80073bc:	2308      	movs	r3, #8
 80073be:	89a2      	ldrh	r2, [r4, #12]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <__swsetup_r+0xa6>
 80073ca:	21a0      	movs	r1, #160	; 0xa0
 80073cc:	2280      	movs	r2, #128	; 0x80
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	0089      	lsls	r1, r1, #2
 80073d2:	0092      	lsls	r2, r2, #2
 80073d4:	400b      	ands	r3, r1
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d003      	beq.n	80073e2 <__swsetup_r+0xa6>
 80073da:	0021      	movs	r1, r4
 80073dc:	0030      	movs	r0, r6
 80073de:	f000 fa23 	bl	8007828 <__smakebuf_r>
 80073e2:	220c      	movs	r2, #12
 80073e4:	5ea3      	ldrsh	r3, [r4, r2]
 80073e6:	2001      	movs	r0, #1
 80073e8:	001a      	movs	r2, r3
 80073ea:	b299      	uxth	r1, r3
 80073ec:	4002      	ands	r2, r0
 80073ee:	4203      	tst	r3, r0
 80073f0:	d00f      	beq.n	8007412 <__swsetup_r+0xd6>
 80073f2:	2200      	movs	r2, #0
 80073f4:	60a2      	str	r2, [r4, #8]
 80073f6:	6962      	ldr	r2, [r4, #20]
 80073f8:	4252      	negs	r2, r2
 80073fa:	61a2      	str	r2, [r4, #24]
 80073fc:	2000      	movs	r0, #0
 80073fe:	6922      	ldr	r2, [r4, #16]
 8007400:	4282      	cmp	r2, r0
 8007402:	d1ba      	bne.n	800737a <__swsetup_r+0x3e>
 8007404:	060a      	lsls	r2, r1, #24
 8007406:	d5b8      	bpl.n	800737a <__swsetup_r+0x3e>
 8007408:	2240      	movs	r2, #64	; 0x40
 800740a:	4313      	orrs	r3, r2
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	3801      	subs	r0, #1
 8007410:	e7b3      	b.n	800737a <__swsetup_r+0x3e>
 8007412:	0788      	lsls	r0, r1, #30
 8007414:	d400      	bmi.n	8007418 <__swsetup_r+0xdc>
 8007416:	6962      	ldr	r2, [r4, #20]
 8007418:	60a2      	str	r2, [r4, #8]
 800741a:	e7ef      	b.n	80073fc <__swsetup_r+0xc0>
 800741c:	2000000c 	.word	0x2000000c
 8007420:	08007f7c 	.word	0x08007f7c
 8007424:	08007f9c 	.word	0x08007f9c
 8007428:	08007f5c 	.word	0x08007f5c

0800742c <abort>:
 800742c:	2006      	movs	r0, #6
 800742e:	b510      	push	{r4, lr}
 8007430:	f000 fa70 	bl	8007914 <raise>
 8007434:	2001      	movs	r0, #1
 8007436:	f7fb fc0e 	bl	8002c56 <_exit>
	...

0800743c <__sflush_r>:
 800743c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800743e:	898b      	ldrh	r3, [r1, #12]
 8007440:	0005      	movs	r5, r0
 8007442:	000c      	movs	r4, r1
 8007444:	071a      	lsls	r2, r3, #28
 8007446:	d45f      	bmi.n	8007508 <__sflush_r+0xcc>
 8007448:	684a      	ldr	r2, [r1, #4]
 800744a:	2a00      	cmp	r2, #0
 800744c:	dc04      	bgt.n	8007458 <__sflush_r+0x1c>
 800744e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007450:	2a00      	cmp	r2, #0
 8007452:	dc01      	bgt.n	8007458 <__sflush_r+0x1c>
 8007454:	2000      	movs	r0, #0
 8007456:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007458:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800745a:	2f00      	cmp	r7, #0
 800745c:	d0fa      	beq.n	8007454 <__sflush_r+0x18>
 800745e:	2200      	movs	r2, #0
 8007460:	2180      	movs	r1, #128	; 0x80
 8007462:	682e      	ldr	r6, [r5, #0]
 8007464:	602a      	str	r2, [r5, #0]
 8007466:	001a      	movs	r2, r3
 8007468:	0149      	lsls	r1, r1, #5
 800746a:	400a      	ands	r2, r1
 800746c:	420b      	tst	r3, r1
 800746e:	d034      	beq.n	80074da <__sflush_r+0x9e>
 8007470:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	075b      	lsls	r3, r3, #29
 8007476:	d506      	bpl.n	8007486 <__sflush_r+0x4a>
 8007478:	6863      	ldr	r3, [r4, #4]
 800747a:	1ac0      	subs	r0, r0, r3
 800747c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <__sflush_r+0x4a>
 8007482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007484:	1ac0      	subs	r0, r0, r3
 8007486:	0002      	movs	r2, r0
 8007488:	6a21      	ldr	r1, [r4, #32]
 800748a:	2300      	movs	r3, #0
 800748c:	0028      	movs	r0, r5
 800748e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007490:	47b8      	blx	r7
 8007492:	89a1      	ldrh	r1, [r4, #12]
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d106      	bne.n	80074a6 <__sflush_r+0x6a>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	2b1d      	cmp	r3, #29
 800749c:	d831      	bhi.n	8007502 <__sflush_r+0xc6>
 800749e:	4a2c      	ldr	r2, [pc, #176]	; (8007550 <__sflush_r+0x114>)
 80074a0:	40da      	lsrs	r2, r3
 80074a2:	07d3      	lsls	r3, r2, #31
 80074a4:	d52d      	bpl.n	8007502 <__sflush_r+0xc6>
 80074a6:	2300      	movs	r3, #0
 80074a8:	6063      	str	r3, [r4, #4]
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	04cb      	lsls	r3, r1, #19
 80074b0:	d505      	bpl.n	80074be <__sflush_r+0x82>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d102      	bne.n	80074bc <__sflush_r+0x80>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d100      	bne.n	80074be <__sflush_r+0x82>
 80074bc:	6560      	str	r0, [r4, #84]	; 0x54
 80074be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074c0:	602e      	str	r6, [r5, #0]
 80074c2:	2900      	cmp	r1, #0
 80074c4:	d0c6      	beq.n	8007454 <__sflush_r+0x18>
 80074c6:	0023      	movs	r3, r4
 80074c8:	3344      	adds	r3, #68	; 0x44
 80074ca:	4299      	cmp	r1, r3
 80074cc:	d002      	beq.n	80074d4 <__sflush_r+0x98>
 80074ce:	0028      	movs	r0, r5
 80074d0:	f7fd fb70 	bl	8004bb4 <_free_r>
 80074d4:	2000      	movs	r0, #0
 80074d6:	6360      	str	r0, [r4, #52]	; 0x34
 80074d8:	e7bd      	b.n	8007456 <__sflush_r+0x1a>
 80074da:	2301      	movs	r3, #1
 80074dc:	0028      	movs	r0, r5
 80074de:	6a21      	ldr	r1, [r4, #32]
 80074e0:	47b8      	blx	r7
 80074e2:	1c43      	adds	r3, r0, #1
 80074e4:	d1c5      	bne.n	8007472 <__sflush_r+0x36>
 80074e6:	682b      	ldr	r3, [r5, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0c2      	beq.n	8007472 <__sflush_r+0x36>
 80074ec:	2b1d      	cmp	r3, #29
 80074ee:	d001      	beq.n	80074f4 <__sflush_r+0xb8>
 80074f0:	2b16      	cmp	r3, #22
 80074f2:	d101      	bne.n	80074f8 <__sflush_r+0xbc>
 80074f4:	602e      	str	r6, [r5, #0]
 80074f6:	e7ad      	b.n	8007454 <__sflush_r+0x18>
 80074f8:	2340      	movs	r3, #64	; 0x40
 80074fa:	89a2      	ldrh	r2, [r4, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	e7a9      	b.n	8007456 <__sflush_r+0x1a>
 8007502:	2340      	movs	r3, #64	; 0x40
 8007504:	430b      	orrs	r3, r1
 8007506:	e7fa      	b.n	80074fe <__sflush_r+0xc2>
 8007508:	690f      	ldr	r7, [r1, #16]
 800750a:	2f00      	cmp	r7, #0
 800750c:	d0a2      	beq.n	8007454 <__sflush_r+0x18>
 800750e:	680a      	ldr	r2, [r1, #0]
 8007510:	600f      	str	r7, [r1, #0]
 8007512:	1bd2      	subs	r2, r2, r7
 8007514:	9201      	str	r2, [sp, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	079b      	lsls	r3, r3, #30
 800751a:	d100      	bne.n	800751e <__sflush_r+0xe2>
 800751c:	694a      	ldr	r2, [r1, #20]
 800751e:	60a2      	str	r2, [r4, #8]
 8007520:	9b01      	ldr	r3, [sp, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	dc00      	bgt.n	8007528 <__sflush_r+0xec>
 8007526:	e795      	b.n	8007454 <__sflush_r+0x18>
 8007528:	003a      	movs	r2, r7
 800752a:	0028      	movs	r0, r5
 800752c:	9b01      	ldr	r3, [sp, #4]
 800752e:	6a21      	ldr	r1, [r4, #32]
 8007530:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007532:	47b0      	blx	r6
 8007534:	2800      	cmp	r0, #0
 8007536:	dc06      	bgt.n	8007546 <__sflush_r+0x10a>
 8007538:	2340      	movs	r3, #64	; 0x40
 800753a:	2001      	movs	r0, #1
 800753c:	89a2      	ldrh	r2, [r4, #12]
 800753e:	4240      	negs	r0, r0
 8007540:	4313      	orrs	r3, r2
 8007542:	81a3      	strh	r3, [r4, #12]
 8007544:	e787      	b.n	8007456 <__sflush_r+0x1a>
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	183f      	adds	r7, r7, r0
 800754a:	1a1b      	subs	r3, r3, r0
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	e7e7      	b.n	8007520 <__sflush_r+0xe4>
 8007550:	20400001 	.word	0x20400001

08007554 <_fflush_r>:
 8007554:	690b      	ldr	r3, [r1, #16]
 8007556:	b570      	push	{r4, r5, r6, lr}
 8007558:	0005      	movs	r5, r0
 800755a:	000c      	movs	r4, r1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d102      	bne.n	8007566 <_fflush_r+0x12>
 8007560:	2500      	movs	r5, #0
 8007562:	0028      	movs	r0, r5
 8007564:	bd70      	pop	{r4, r5, r6, pc}
 8007566:	2800      	cmp	r0, #0
 8007568:	d004      	beq.n	8007574 <_fflush_r+0x20>
 800756a:	6983      	ldr	r3, [r0, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <_fflush_r+0x20>
 8007570:	f000 f892 	bl	8007698 <__sinit>
 8007574:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <_fflush_r+0x74>)
 8007576:	429c      	cmp	r4, r3
 8007578:	d11b      	bne.n	80075b2 <_fflush_r+0x5e>
 800757a:	686c      	ldr	r4, [r5, #4]
 800757c:	220c      	movs	r2, #12
 800757e:	5ea3      	ldrsh	r3, [r4, r2]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0ed      	beq.n	8007560 <_fflush_r+0xc>
 8007584:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007586:	07d2      	lsls	r2, r2, #31
 8007588:	d404      	bmi.n	8007594 <_fflush_r+0x40>
 800758a:	059b      	lsls	r3, r3, #22
 800758c:	d402      	bmi.n	8007594 <_fflush_r+0x40>
 800758e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007590:	f7ff fcb9 	bl	8006f06 <__retarget_lock_acquire_recursive>
 8007594:	0028      	movs	r0, r5
 8007596:	0021      	movs	r1, r4
 8007598:	f7ff ff50 	bl	800743c <__sflush_r>
 800759c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800759e:	0005      	movs	r5, r0
 80075a0:	07db      	lsls	r3, r3, #31
 80075a2:	d4de      	bmi.n	8007562 <_fflush_r+0xe>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	059b      	lsls	r3, r3, #22
 80075a8:	d4db      	bmi.n	8007562 <_fflush_r+0xe>
 80075aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ac:	f7ff fcac 	bl	8006f08 <__retarget_lock_release_recursive>
 80075b0:	e7d7      	b.n	8007562 <_fflush_r+0xe>
 80075b2:	4b06      	ldr	r3, [pc, #24]	; (80075cc <_fflush_r+0x78>)
 80075b4:	429c      	cmp	r4, r3
 80075b6:	d101      	bne.n	80075bc <_fflush_r+0x68>
 80075b8:	68ac      	ldr	r4, [r5, #8]
 80075ba:	e7df      	b.n	800757c <_fflush_r+0x28>
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <_fflush_r+0x7c>)
 80075be:	429c      	cmp	r4, r3
 80075c0:	d1dc      	bne.n	800757c <_fflush_r+0x28>
 80075c2:	68ec      	ldr	r4, [r5, #12]
 80075c4:	e7da      	b.n	800757c <_fflush_r+0x28>
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	08007f7c 	.word	0x08007f7c
 80075cc:	08007f9c 	.word	0x08007f9c
 80075d0:	08007f5c 	.word	0x08007f5c

080075d4 <std>:
 80075d4:	2300      	movs	r3, #0
 80075d6:	b510      	push	{r4, lr}
 80075d8:	0004      	movs	r4, r0
 80075da:	6003      	str	r3, [r0, #0]
 80075dc:	6043      	str	r3, [r0, #4]
 80075de:	6083      	str	r3, [r0, #8]
 80075e0:	8181      	strh	r1, [r0, #12]
 80075e2:	6643      	str	r3, [r0, #100]	; 0x64
 80075e4:	0019      	movs	r1, r3
 80075e6:	81c2      	strh	r2, [r0, #14]
 80075e8:	6103      	str	r3, [r0, #16]
 80075ea:	6143      	str	r3, [r0, #20]
 80075ec:	6183      	str	r3, [r0, #24]
 80075ee:	2208      	movs	r2, #8
 80075f0:	305c      	adds	r0, #92	; 0x5c
 80075f2:	f7fd fad7 	bl	8004ba4 <memset>
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <std+0x38>)
 80075f8:	6224      	str	r4, [r4, #32]
 80075fa:	6263      	str	r3, [r4, #36]	; 0x24
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <std+0x3c>)
 80075fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <std+0x40>)
 8007602:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <std+0x44>)
 8007606:	6323      	str	r3, [r4, #48]	; 0x30
 8007608:	bd10      	pop	{r4, pc}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	08007955 	.word	0x08007955
 8007610:	0800797d 	.word	0x0800797d
 8007614:	080079b5 	.word	0x080079b5
 8007618:	080079e1 	.word	0x080079e1

0800761c <_cleanup_r>:
 800761c:	b510      	push	{r4, lr}
 800761e:	4902      	ldr	r1, [pc, #8]	; (8007628 <_cleanup_r+0xc>)
 8007620:	f000 f8ba 	bl	8007798 <_fwalk_reent>
 8007624:	bd10      	pop	{r4, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	08007555 	.word	0x08007555

0800762c <__sfmoreglue>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	2568      	movs	r5, #104	; 0x68
 8007630:	1e4a      	subs	r2, r1, #1
 8007632:	4355      	muls	r5, r2
 8007634:	000e      	movs	r6, r1
 8007636:	0029      	movs	r1, r5
 8007638:	3174      	adds	r1, #116	; 0x74
 800763a:	f7fd fb27 	bl	8004c8c <_malloc_r>
 800763e:	1e04      	subs	r4, r0, #0
 8007640:	d008      	beq.n	8007654 <__sfmoreglue+0x28>
 8007642:	2100      	movs	r1, #0
 8007644:	002a      	movs	r2, r5
 8007646:	6001      	str	r1, [r0, #0]
 8007648:	6046      	str	r6, [r0, #4]
 800764a:	300c      	adds	r0, #12
 800764c:	60a0      	str	r0, [r4, #8]
 800764e:	3268      	adds	r2, #104	; 0x68
 8007650:	f7fd faa8 	bl	8004ba4 <memset>
 8007654:	0020      	movs	r0, r4
 8007656:	bd70      	pop	{r4, r5, r6, pc}

08007658 <__sfp_lock_acquire>:
 8007658:	b510      	push	{r4, lr}
 800765a:	4802      	ldr	r0, [pc, #8]	; (8007664 <__sfp_lock_acquire+0xc>)
 800765c:	f7ff fc53 	bl	8006f06 <__retarget_lock_acquire_recursive>
 8007660:	bd10      	pop	{r4, pc}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	2000026d 	.word	0x2000026d

08007668 <__sfp_lock_release>:
 8007668:	b510      	push	{r4, lr}
 800766a:	4802      	ldr	r0, [pc, #8]	; (8007674 <__sfp_lock_release+0xc>)
 800766c:	f7ff fc4c 	bl	8006f08 <__retarget_lock_release_recursive>
 8007670:	bd10      	pop	{r4, pc}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	2000026d 	.word	0x2000026d

08007678 <__sinit_lock_acquire>:
 8007678:	b510      	push	{r4, lr}
 800767a:	4802      	ldr	r0, [pc, #8]	; (8007684 <__sinit_lock_acquire+0xc>)
 800767c:	f7ff fc43 	bl	8006f06 <__retarget_lock_acquire_recursive>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	2000026e 	.word	0x2000026e

08007688 <__sinit_lock_release>:
 8007688:	b510      	push	{r4, lr}
 800768a:	4802      	ldr	r0, [pc, #8]	; (8007694 <__sinit_lock_release+0xc>)
 800768c:	f7ff fc3c 	bl	8006f08 <__retarget_lock_release_recursive>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	2000026e 	.word	0x2000026e

08007698 <__sinit>:
 8007698:	b513      	push	{r0, r1, r4, lr}
 800769a:	0004      	movs	r4, r0
 800769c:	f7ff ffec 	bl	8007678 <__sinit_lock_acquire>
 80076a0:	69a3      	ldr	r3, [r4, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <__sinit+0x14>
 80076a6:	f7ff ffef 	bl	8007688 <__sinit_lock_release>
 80076aa:	bd13      	pop	{r0, r1, r4, pc}
 80076ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80076ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80076b0:	6523      	str	r3, [r4, #80]	; 0x50
 80076b2:	4b13      	ldr	r3, [pc, #76]	; (8007700 <__sinit+0x68>)
 80076b4:	4a13      	ldr	r2, [pc, #76]	; (8007704 <__sinit+0x6c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80076ba:	9301      	str	r3, [sp, #4]
 80076bc:	42a3      	cmp	r3, r4
 80076be:	d101      	bne.n	80076c4 <__sinit+0x2c>
 80076c0:	2301      	movs	r3, #1
 80076c2:	61a3      	str	r3, [r4, #24]
 80076c4:	0020      	movs	r0, r4
 80076c6:	f000 f81f 	bl	8007708 <__sfp>
 80076ca:	6060      	str	r0, [r4, #4]
 80076cc:	0020      	movs	r0, r4
 80076ce:	f000 f81b 	bl	8007708 <__sfp>
 80076d2:	60a0      	str	r0, [r4, #8]
 80076d4:	0020      	movs	r0, r4
 80076d6:	f000 f817 	bl	8007708 <__sfp>
 80076da:	2200      	movs	r2, #0
 80076dc:	2104      	movs	r1, #4
 80076de:	60e0      	str	r0, [r4, #12]
 80076e0:	6860      	ldr	r0, [r4, #4]
 80076e2:	f7ff ff77 	bl	80075d4 <std>
 80076e6:	2201      	movs	r2, #1
 80076e8:	2109      	movs	r1, #9
 80076ea:	68a0      	ldr	r0, [r4, #8]
 80076ec:	f7ff ff72 	bl	80075d4 <std>
 80076f0:	2202      	movs	r2, #2
 80076f2:	2112      	movs	r1, #18
 80076f4:	68e0      	ldr	r0, [r4, #12]
 80076f6:	f7ff ff6d 	bl	80075d4 <std>
 80076fa:	2301      	movs	r3, #1
 80076fc:	61a3      	str	r3, [r4, #24]
 80076fe:	e7d2      	b.n	80076a6 <__sinit+0xe>
 8007700:	08007be4 	.word	0x08007be4
 8007704:	0800761d 	.word	0x0800761d

08007708 <__sfp>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	0007      	movs	r7, r0
 800770c:	f7ff ffa4 	bl	8007658 <__sfp_lock_acquire>
 8007710:	4b1f      	ldr	r3, [pc, #124]	; (8007790 <__sfp+0x88>)
 8007712:	681e      	ldr	r6, [r3, #0]
 8007714:	69b3      	ldr	r3, [r6, #24]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <__sfp+0x18>
 800771a:	0030      	movs	r0, r6
 800771c:	f7ff ffbc 	bl	8007698 <__sinit>
 8007720:	3648      	adds	r6, #72	; 0x48
 8007722:	68b4      	ldr	r4, [r6, #8]
 8007724:	6873      	ldr	r3, [r6, #4]
 8007726:	3b01      	subs	r3, #1
 8007728:	d504      	bpl.n	8007734 <__sfp+0x2c>
 800772a:	6833      	ldr	r3, [r6, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d022      	beq.n	8007776 <__sfp+0x6e>
 8007730:	6836      	ldr	r6, [r6, #0]
 8007732:	e7f6      	b.n	8007722 <__sfp+0x1a>
 8007734:	220c      	movs	r2, #12
 8007736:	5ea5      	ldrsh	r5, [r4, r2]
 8007738:	2d00      	cmp	r5, #0
 800773a:	d11a      	bne.n	8007772 <__sfp+0x6a>
 800773c:	0020      	movs	r0, r4
 800773e:	4b15      	ldr	r3, [pc, #84]	; (8007794 <__sfp+0x8c>)
 8007740:	3058      	adds	r0, #88	; 0x58
 8007742:	60e3      	str	r3, [r4, #12]
 8007744:	6665      	str	r5, [r4, #100]	; 0x64
 8007746:	f7ff fbdd 	bl	8006f04 <__retarget_lock_init_recursive>
 800774a:	f7ff ff8d 	bl	8007668 <__sfp_lock_release>
 800774e:	0020      	movs	r0, r4
 8007750:	2208      	movs	r2, #8
 8007752:	0029      	movs	r1, r5
 8007754:	6025      	str	r5, [r4, #0]
 8007756:	60a5      	str	r5, [r4, #8]
 8007758:	6065      	str	r5, [r4, #4]
 800775a:	6125      	str	r5, [r4, #16]
 800775c:	6165      	str	r5, [r4, #20]
 800775e:	61a5      	str	r5, [r4, #24]
 8007760:	305c      	adds	r0, #92	; 0x5c
 8007762:	f7fd fa1f 	bl	8004ba4 <memset>
 8007766:	6365      	str	r5, [r4, #52]	; 0x34
 8007768:	63a5      	str	r5, [r4, #56]	; 0x38
 800776a:	64a5      	str	r5, [r4, #72]	; 0x48
 800776c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800776e:	0020      	movs	r0, r4
 8007770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007772:	3468      	adds	r4, #104	; 0x68
 8007774:	e7d7      	b.n	8007726 <__sfp+0x1e>
 8007776:	2104      	movs	r1, #4
 8007778:	0038      	movs	r0, r7
 800777a:	f7ff ff57 	bl	800762c <__sfmoreglue>
 800777e:	1e04      	subs	r4, r0, #0
 8007780:	6030      	str	r0, [r6, #0]
 8007782:	d1d5      	bne.n	8007730 <__sfp+0x28>
 8007784:	f7ff ff70 	bl	8007668 <__sfp_lock_release>
 8007788:	230c      	movs	r3, #12
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	e7ef      	b.n	800776e <__sfp+0x66>
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	08007be4 	.word	0x08007be4
 8007794:	ffff0001 	.word	0xffff0001

08007798 <_fwalk_reent>:
 8007798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800779a:	0004      	movs	r4, r0
 800779c:	0006      	movs	r6, r0
 800779e:	2700      	movs	r7, #0
 80077a0:	9101      	str	r1, [sp, #4]
 80077a2:	3448      	adds	r4, #72	; 0x48
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	68a5      	ldr	r5, [r4, #8]
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	d504      	bpl.n	80077bc <_fwalk_reent+0x24>
 80077b2:	6824      	ldr	r4, [r4, #0]
 80077b4:	2c00      	cmp	r4, #0
 80077b6:	d1f5      	bne.n	80077a4 <_fwalk_reent+0xc>
 80077b8:	0038      	movs	r0, r7
 80077ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077bc:	89ab      	ldrh	r3, [r5, #12]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d908      	bls.n	80077d4 <_fwalk_reent+0x3c>
 80077c2:	220e      	movs	r2, #14
 80077c4:	5eab      	ldrsh	r3, [r5, r2]
 80077c6:	3301      	adds	r3, #1
 80077c8:	d004      	beq.n	80077d4 <_fwalk_reent+0x3c>
 80077ca:	0029      	movs	r1, r5
 80077cc:	0030      	movs	r0, r6
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	4798      	blx	r3
 80077d2:	4307      	orrs	r7, r0
 80077d4:	3568      	adds	r5, #104	; 0x68
 80077d6:	e7e8      	b.n	80077aa <_fwalk_reent+0x12>

080077d8 <__swhatbuf_r>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	000e      	movs	r6, r1
 80077dc:	001d      	movs	r5, r3
 80077de:	230e      	movs	r3, #14
 80077e0:	5ec9      	ldrsh	r1, [r1, r3]
 80077e2:	0014      	movs	r4, r2
 80077e4:	b096      	sub	sp, #88	; 0x58
 80077e6:	2900      	cmp	r1, #0
 80077e8:	da08      	bge.n	80077fc <__swhatbuf_r+0x24>
 80077ea:	220c      	movs	r2, #12
 80077ec:	5eb3      	ldrsh	r3, [r6, r2]
 80077ee:	2200      	movs	r2, #0
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	061b      	lsls	r3, r3, #24
 80077f4:	d411      	bmi.n	800781a <__swhatbuf_r+0x42>
 80077f6:	2380      	movs	r3, #128	; 0x80
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	e00f      	b.n	800781c <__swhatbuf_r+0x44>
 80077fc:	466a      	mov	r2, sp
 80077fe:	f000 f91b 	bl	8007a38 <_fstat_r>
 8007802:	2800      	cmp	r0, #0
 8007804:	dbf1      	blt.n	80077ea <__swhatbuf_r+0x12>
 8007806:	23f0      	movs	r3, #240	; 0xf0
 8007808:	9901      	ldr	r1, [sp, #4]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	4019      	ands	r1, r3
 800780e:	4b05      	ldr	r3, [pc, #20]	; (8007824 <__swhatbuf_r+0x4c>)
 8007810:	18c9      	adds	r1, r1, r3
 8007812:	424b      	negs	r3, r1
 8007814:	4159      	adcs	r1, r3
 8007816:	6029      	str	r1, [r5, #0]
 8007818:	e7ed      	b.n	80077f6 <__swhatbuf_r+0x1e>
 800781a:	2340      	movs	r3, #64	; 0x40
 800781c:	2000      	movs	r0, #0
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	b016      	add	sp, #88	; 0x58
 8007822:	bd70      	pop	{r4, r5, r6, pc}
 8007824:	ffffe000 	.word	0xffffe000

08007828 <__smakebuf_r>:
 8007828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800782a:	2602      	movs	r6, #2
 800782c:	898b      	ldrh	r3, [r1, #12]
 800782e:	0005      	movs	r5, r0
 8007830:	000c      	movs	r4, r1
 8007832:	4233      	tst	r3, r6
 8007834:	d006      	beq.n	8007844 <__smakebuf_r+0x1c>
 8007836:	0023      	movs	r3, r4
 8007838:	3347      	adds	r3, #71	; 0x47
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	6123      	str	r3, [r4, #16]
 800783e:	2301      	movs	r3, #1
 8007840:	6163      	str	r3, [r4, #20]
 8007842:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007844:	466a      	mov	r2, sp
 8007846:	ab01      	add	r3, sp, #4
 8007848:	f7ff ffc6 	bl	80077d8 <__swhatbuf_r>
 800784c:	9900      	ldr	r1, [sp, #0]
 800784e:	0007      	movs	r7, r0
 8007850:	0028      	movs	r0, r5
 8007852:	f7fd fa1b 	bl	8004c8c <_malloc_r>
 8007856:	2800      	cmp	r0, #0
 8007858:	d108      	bne.n	800786c <__smakebuf_r+0x44>
 800785a:	220c      	movs	r2, #12
 800785c:	5ea3      	ldrsh	r3, [r4, r2]
 800785e:	059a      	lsls	r2, r3, #22
 8007860:	d4ef      	bmi.n	8007842 <__smakebuf_r+0x1a>
 8007862:	2203      	movs	r2, #3
 8007864:	4393      	bics	r3, r2
 8007866:	431e      	orrs	r6, r3
 8007868:	81a6      	strh	r6, [r4, #12]
 800786a:	e7e4      	b.n	8007836 <__smakebuf_r+0xe>
 800786c:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <__smakebuf_r+0x84>)
 800786e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007870:	2380      	movs	r3, #128	; 0x80
 8007872:	89a2      	ldrh	r2, [r4, #12]
 8007874:	6020      	str	r0, [r4, #0]
 8007876:	4313      	orrs	r3, r2
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	9b00      	ldr	r3, [sp, #0]
 800787c:	6120      	str	r0, [r4, #16]
 800787e:	6163      	str	r3, [r4, #20]
 8007880:	9b01      	ldr	r3, [sp, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00d      	beq.n	80078a2 <__smakebuf_r+0x7a>
 8007886:	0028      	movs	r0, r5
 8007888:	230e      	movs	r3, #14
 800788a:	5ee1      	ldrsh	r1, [r4, r3]
 800788c:	f000 f8e6 	bl	8007a5c <_isatty_r>
 8007890:	2800      	cmp	r0, #0
 8007892:	d006      	beq.n	80078a2 <__smakebuf_r+0x7a>
 8007894:	2203      	movs	r2, #3
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	4393      	bics	r3, r2
 800789a:	001a      	movs	r2, r3
 800789c:	2301      	movs	r3, #1
 800789e:	4313      	orrs	r3, r2
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	89a0      	ldrh	r0, [r4, #12]
 80078a4:	4307      	orrs	r7, r0
 80078a6:	81a7      	strh	r7, [r4, #12]
 80078a8:	e7cb      	b.n	8007842 <__smakebuf_r+0x1a>
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	0800761d 	.word	0x0800761d

080078b0 <_malloc_usable_size_r>:
 80078b0:	1f0b      	subs	r3, r1, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	1f18      	subs	r0, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da01      	bge.n	80078be <_malloc_usable_size_r+0xe>
 80078ba:	580b      	ldr	r3, [r1, r0]
 80078bc:	18c0      	adds	r0, r0, r3
 80078be:	4770      	bx	lr

080078c0 <_raise_r>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	0004      	movs	r4, r0
 80078c4:	000d      	movs	r5, r1
 80078c6:	291f      	cmp	r1, #31
 80078c8:	d904      	bls.n	80078d4 <_raise_r+0x14>
 80078ca:	2316      	movs	r3, #22
 80078cc:	6003      	str	r3, [r0, #0]
 80078ce:	2001      	movs	r0, #1
 80078d0:	4240      	negs	r0, r0
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <_raise_r+0x24>
 80078da:	008a      	lsls	r2, r1, #2
 80078dc:	189b      	adds	r3, r3, r2
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	d108      	bne.n	80078f6 <_raise_r+0x36>
 80078e4:	0020      	movs	r0, r4
 80078e6:	f000 f831 	bl	800794c <_getpid_r>
 80078ea:	002a      	movs	r2, r5
 80078ec:	0001      	movs	r1, r0
 80078ee:	0020      	movs	r0, r4
 80078f0:	f000 f81a 	bl	8007928 <_kill_r>
 80078f4:	e7ed      	b.n	80078d2 <_raise_r+0x12>
 80078f6:	2000      	movs	r0, #0
 80078f8:	2a01      	cmp	r2, #1
 80078fa:	d0ea      	beq.n	80078d2 <_raise_r+0x12>
 80078fc:	1c51      	adds	r1, r2, #1
 80078fe:	d103      	bne.n	8007908 <_raise_r+0x48>
 8007900:	2316      	movs	r3, #22
 8007902:	3001      	adds	r0, #1
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	e7e4      	b.n	80078d2 <_raise_r+0x12>
 8007908:	2400      	movs	r4, #0
 800790a:	0028      	movs	r0, r5
 800790c:	601c      	str	r4, [r3, #0]
 800790e:	4790      	blx	r2
 8007910:	0020      	movs	r0, r4
 8007912:	e7de      	b.n	80078d2 <_raise_r+0x12>

08007914 <raise>:
 8007914:	b510      	push	{r4, lr}
 8007916:	4b03      	ldr	r3, [pc, #12]	; (8007924 <raise+0x10>)
 8007918:	0001      	movs	r1, r0
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	f7ff ffd0 	bl	80078c0 <_raise_r>
 8007920:	bd10      	pop	{r4, pc}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	2000000c 	.word	0x2000000c

08007928 <_kill_r>:
 8007928:	2300      	movs	r3, #0
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	4d06      	ldr	r5, [pc, #24]	; (8007948 <_kill_r+0x20>)
 800792e:	0004      	movs	r4, r0
 8007930:	0008      	movs	r0, r1
 8007932:	0011      	movs	r1, r2
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	f7fb f97e 	bl	8002c36 <_kill>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d103      	bne.n	8007946 <_kill_r+0x1e>
 800793e:	682b      	ldr	r3, [r5, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d000      	beq.n	8007946 <_kill_r+0x1e>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	20000268 	.word	0x20000268

0800794c <_getpid_r>:
 800794c:	b510      	push	{r4, lr}
 800794e:	f7fb f96c 	bl	8002c2a <_getpid>
 8007952:	bd10      	pop	{r4, pc}

08007954 <__sread>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	000c      	movs	r4, r1
 8007958:	250e      	movs	r5, #14
 800795a:	5f49      	ldrsh	r1, [r1, r5]
 800795c:	f000 f8a4 	bl	8007aa8 <_read_r>
 8007960:	2800      	cmp	r0, #0
 8007962:	db03      	blt.n	800796c <__sread+0x18>
 8007964:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007966:	181b      	adds	r3, r3, r0
 8007968:	6563      	str	r3, [r4, #84]	; 0x54
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	4a02      	ldr	r2, [pc, #8]	; (8007978 <__sread+0x24>)
 8007970:	4013      	ands	r3, r2
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	e7f9      	b.n	800796a <__sread+0x16>
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	ffffefff 	.word	0xffffefff

0800797c <__swrite>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	001f      	movs	r7, r3
 8007980:	898b      	ldrh	r3, [r1, #12]
 8007982:	0005      	movs	r5, r0
 8007984:	000c      	movs	r4, r1
 8007986:	0016      	movs	r6, r2
 8007988:	05db      	lsls	r3, r3, #23
 800798a:	d505      	bpl.n	8007998 <__swrite+0x1c>
 800798c:	230e      	movs	r3, #14
 800798e:	5ec9      	ldrsh	r1, [r1, r3]
 8007990:	2200      	movs	r2, #0
 8007992:	2302      	movs	r3, #2
 8007994:	f000 f874 	bl	8007a80 <_lseek_r>
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	4a05      	ldr	r2, [pc, #20]	; (80079b0 <__swrite+0x34>)
 800799c:	0028      	movs	r0, r5
 800799e:	4013      	ands	r3, r2
 80079a0:	81a3      	strh	r3, [r4, #12]
 80079a2:	0032      	movs	r2, r6
 80079a4:	230e      	movs	r3, #14
 80079a6:	5ee1      	ldrsh	r1, [r4, r3]
 80079a8:	003b      	movs	r3, r7
 80079aa:	f000 f81f 	bl	80079ec <_write_r>
 80079ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b0:	ffffefff 	.word	0xffffefff

080079b4 <__sseek>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	000c      	movs	r4, r1
 80079b8:	250e      	movs	r5, #14
 80079ba:	5f49      	ldrsh	r1, [r1, r5]
 80079bc:	f000 f860 	bl	8007a80 <_lseek_r>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	1c42      	adds	r2, r0, #1
 80079c4:	d103      	bne.n	80079ce <__sseek+0x1a>
 80079c6:	4a05      	ldr	r2, [pc, #20]	; (80079dc <__sseek+0x28>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
 80079ce:	2280      	movs	r2, #128	; 0x80
 80079d0:	0152      	lsls	r2, r2, #5
 80079d2:	4313      	orrs	r3, r2
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	6560      	str	r0, [r4, #84]	; 0x54
 80079d8:	e7f8      	b.n	80079cc <__sseek+0x18>
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	ffffefff 	.word	0xffffefff

080079e0 <__sclose>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	230e      	movs	r3, #14
 80079e4:	5ec9      	ldrsh	r1, [r1, r3]
 80079e6:	f000 f815 	bl	8007a14 <_close_r>
 80079ea:	bd10      	pop	{r4, pc}

080079ec <_write_r>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	0004      	movs	r4, r0
 80079f0:	0008      	movs	r0, r1
 80079f2:	0011      	movs	r1, r2
 80079f4:	001a      	movs	r2, r3
 80079f6:	2300      	movs	r3, #0
 80079f8:	4d05      	ldr	r5, [pc, #20]	; (8007a10 <_write_r+0x24>)
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	f7fb f954 	bl	8002ca8 <_write>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d103      	bne.n	8007a0c <_write_r+0x20>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d000      	beq.n	8007a0c <_write_r+0x20>
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	bd70      	pop	{r4, r5, r6, pc}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	20000268 	.word	0x20000268

08007a14 <_close_r>:
 8007a14:	2300      	movs	r3, #0
 8007a16:	b570      	push	{r4, r5, r6, lr}
 8007a18:	4d06      	ldr	r5, [pc, #24]	; (8007a34 <_close_r+0x20>)
 8007a1a:	0004      	movs	r4, r0
 8007a1c:	0008      	movs	r0, r1
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	f7fb f95e 	bl	8002ce0 <_close>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d103      	bne.n	8007a30 <_close_r+0x1c>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d000      	beq.n	8007a30 <_close_r+0x1c>
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	20000268 	.word	0x20000268

08007a38 <_fstat_r>:
 8007a38:	2300      	movs	r3, #0
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	4d06      	ldr	r5, [pc, #24]	; (8007a58 <_fstat_r+0x20>)
 8007a3e:	0004      	movs	r4, r0
 8007a40:	0008      	movs	r0, r1
 8007a42:	0011      	movs	r1, r2
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	f7fb f955 	bl	8002cf4 <_fstat>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d103      	bne.n	8007a56 <_fstat_r+0x1e>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d000      	beq.n	8007a56 <_fstat_r+0x1e>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	20000268 	.word	0x20000268

08007a5c <_isatty_r>:
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	b570      	push	{r4, r5, r6, lr}
 8007a60:	4d06      	ldr	r5, [pc, #24]	; (8007a7c <_isatty_r+0x20>)
 8007a62:	0004      	movs	r4, r0
 8007a64:	0008      	movs	r0, r1
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	f7fb f952 	bl	8002d10 <_isatty>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d103      	bne.n	8007a78 <_isatty_r+0x1c>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d000      	beq.n	8007a78 <_isatty_r+0x1c>
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	bd70      	pop	{r4, r5, r6, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	20000268 	.word	0x20000268

08007a80 <_lseek_r>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	0004      	movs	r4, r0
 8007a84:	0008      	movs	r0, r1
 8007a86:	0011      	movs	r1, r2
 8007a88:	001a      	movs	r2, r3
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4d05      	ldr	r5, [pc, #20]	; (8007aa4 <_lseek_r+0x24>)
 8007a8e:	602b      	str	r3, [r5, #0]
 8007a90:	f7fb f947 	bl	8002d22 <_lseek>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d103      	bne.n	8007aa0 <_lseek_r+0x20>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d000      	beq.n	8007aa0 <_lseek_r+0x20>
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	20000268 	.word	0x20000268

08007aa8 <_read_r>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	0004      	movs	r4, r0
 8007aac:	0008      	movs	r0, r1
 8007aae:	0011      	movs	r1, r2
 8007ab0:	001a      	movs	r2, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4d05      	ldr	r5, [pc, #20]	; (8007acc <_read_r+0x24>)
 8007ab6:	602b      	str	r3, [r5, #0]
 8007ab8:	f7fb f8d9 	bl	8002c6e <_read>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d103      	bne.n	8007ac8 <_read_r+0x20>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d000      	beq.n	8007ac8 <_read_r+0x20>
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	20000268 	.word	0x20000268

08007ad0 <_init>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr

08007adc <_fini>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr
